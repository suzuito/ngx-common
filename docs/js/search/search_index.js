var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Ctx.html",[0,0.064,1,2.03]],["body/interfaces/Ctx.html",[0,0.069,1,4.004,2,1.084,3,0.337,4,0.337,5,0.337,6,1.697,7,0.61,8,2.58,9,0.61,10,2,11,1.427,12,2.605,13,0.777,14,0.044,15,0.53,16,1.788,17,1.602,18,3.834,19,3.419,20,3.419,21,0.466,22,0.882,23,1.209,24,2.203,25,0.337,26,0.222,27,1.209,28,0.882,29,2.58,30,2.546,31,2.165,32,1.538,33,1.349,34,1.314,35,1.349,36,2.58,37,0.809,38,2.203,39,1.602,40,0.536,41,1.209,42,1.509,43,2.58,44,2.58,45,1.029,46,2.58,47,2.58,48,2.58,49,2.58,50,1.349,51,1.538,52,2.58,53,2.485,54,2.485,55,2.58,56,2.203,57,0.848,58,3.419,59,2.58,60,1.029,61,2.58,62,1.361,63,4.082,64,3.419,65,1.153,66,2,67,3.419,68,3.419,69,3.419,70,3.419,71,3.419,72,3.419,73,3.419,74,2.58,75,2.58,76,2.58,77,1.288,78,2.58,79,2.58,80,0.87,81,3.419,82,3.419,83,3.419,84,0.023,85,0.03,86,0.023]],["title/classes/Cursor.html",[22,0.494,26,0.205]],["body/classes/Cursor.html",[3,0.421,4,0.421,5,0.421,9,0.761,13,1.185,14,0.044,22,0.817,25,0.421,26,0.277,28,0.817,37,1.094,39,1.844,40,0.817,56,3.63,57,0.92,60,1.392,84,0.028,85,0.035,86,0.028,87,2.396,88,3.931,89,2.058,90,4.808,91,5.412,92,5.412,93,4.808,94,3.931,95,5.195,96,1.409,97,2.129,98,3.931,99,1.844,100,1.327,101,1.844,102,2.487,103,4.808,104,3.931,105,1.992,106,3.931,107,3.931,108,3.931,109,3.931,110,3.931,111,3.931,112,3.931,113,3.931,114,3.931,115,3.931]],["title/interfaces/CursorStoreInfo.html",[0,0.064,116,1.114]],["body/interfaces/CursorStoreInfo.html",[0,0.084,2,1.306,3,0.407,4,0.407,5,0.407,9,0.735,10,2.254,13,1.318,14,0.044,15,0.597,21,0.561,22,0.999,25,0.504,26,0.268,28,0.645,30,2.869,34,1.26,37,1.111,40,0.645,45,0.936,51,1.452,57,0.869,62,0.936,84,0.027,85,0.034,86,0.027,96,1.318,116,2.051,117,3.109,118,3.109,119,4.585,120,2.43,121,4.648,122,4.585,123,1.805,124,1.819,125,1.171,126,1.625,127,1.456,128,3.109,129,3.109,130,3.109,131,3.853,132,3.109,133,3.109,134,3.109,135,3.109,136,3.853,137,3.109,138,3.109,139,3.109,140,3.109,141,3.109,142,3.109,143,3.109,144,3.109]],["title/injectables/CursorStoreService.html",[123,1.114,126,1.243]],["body/injectables/CursorStoreService.html",[0,0.077,3,0.375,4,0.375,5,0.375,9,0.678,13,1.279,14,0.044,15,0.567,21,0.517,22,0.988,25,0.479,26,0.247,28,0.595,30,2.726,34,1.322,37,1.093,40,0.837,45,0.863,51,1.601,57,0.837,62,0.863,84,0.025,85,0.032,86,0.025,89,1.914,96,1.433,97,2.057,99,1.991,100,1.433,101,1.991,105,1.991,116,2.057,117,4.491,118,2.865,119,4.391,120,2.348,121,4.491,122,4.391,123,1.715,124,1.676,125,1.08,126,1.914,127,1.342,128,2.865,129,3.66,130,2.865,131,4.491,132,2.865,133,2.865,134,2.865,135,3.66,136,3.66,137,2.865,138,2.865,139,2.865,140,2.865,141,2.865,142,3.66,143,2.865,144,3.66,145,2.447,146,2.407,147,2.407,148,2.407,149,3.501,150,3.501,151,3.501,152,3.501,153,3.501]],["title/interfaces/DataProvider.html",[0,0.064,154,1.243]],["body/interfaces/DataProvider.html",[0,0.081,2,1.272,3,0.541,4,0.396,5,0.396,6,2.995,9,0.716,10,2.217,13,1.371,14,0.043,15,0.587,22,1.006,25,0.396,37,1.115,38,3.236,39,1.418,80,1.536,84,0.027,85,0.033,86,0.027,89,1.981,96,1.245,97,2.092,99,2.092,100,1.506,101,2.092,105,2.092,116,2.031,120,2.416,154,1.981,155,3.699,156,5.298,157,2.72,158,4.63,159,5.055,160,2.72,161,3.699,162,2.995,163,3.699,164,1.76,165,4.63,166,3.699,167,3.699,168,3.699,169,3.699,170,3.699,171,4.63,172,2.72,173,3.699,174,1.991]],["title/interfaces/Logger.html",[0,0.064,175,1.391]],["body/interfaces/Logger.html",[0,0.098,2,1.536,3,0.587,4,0.478,5,0.478,9,0.865,13,1.1,14,0.042,25,0.478,51,1.6,60,1.351,84,0.032,85,0.037,86,0.032,89,2.221,97,1.713,99,1.713,100,1.233,101,1.713,105,1.713,175,2.484,176,4.467,177,5.189,178,4.467,179,2.404]],["title/directives/MugenScrollBottomDirective.html",[16,1.243,180,1.243]],["body/directives/MugenScrollBottomDirective.html",[3,0.468,4,0.468,5,0.468,6,2.352,7,0.846,14,0.043,15,0.554,16,2.192,17,1.964,21,0.645,23,1.964,25,0.468,26,0.308,28,0.742,31,1.964,40,0.742,41,1.676,57,0.742,84,0.031,85,0.037,86,0.031,180,2.192,181,2.352,182,4.37,183,2.663,184,4.193,185,2.092,186,2.092,187,2.092]],["title/directives/MugenScrollDataDirective.html",[16,1.243,27,1.114]],["body/directives/MugenScrollDataDirective.html",[0,0.07,1,3.982,3,0.34,4,0.34,5,0.34,6,1.71,7,0.615,8,2.6,11,1.404,12,2.491,14,0.044,15,0.532,16,1.797,17,1.61,18,3.849,19,3.437,20,3.437,21,0.469,22,0.884,23,1.61,24,2.934,25,0.34,26,0.224,27,1.61,28,0.884,29,2.6,30,2.559,31,2.168,32,1.543,33,1.36,34,1.317,35,1.36,36,2.6,37,0.813,38,2.22,39,1.61,40,0.54,41,1.218,42,1.521,43,2.6,44,2.6,45,1.035,46,2.6,47,2.6,48,2.6,49,2.6,50,1.36,51,1.543,52,2.6,53,2.491,54,2.491,55,2.6,56,2.22,57,0.85,58,3.437,59,2.6,60,1.035,61,2.6,62,1.363,63,4.095,64,3.437,65,1.159,66,2.01,67,3.437,68,3.437,69,3.437,70,3.437,71,3.437,72,3.437,73,3.437,74,2.6,75,2.6,76,2.6,77,1.295,78,2.6,79,2.6,80,0.877,81,3.437,82,3.437,83,3.437,84,0.023,85,0.03,86,0.023,181,1.71,183,1.937]],["title/directives/MugenScrollTopDirective.html",[16,1.243,188,1.243]],["body/directives/MugenScrollTopDirective.html",[3,0.468,4,0.468,5,0.468,6,2.352,7,0.846,14,0.043,15,0.554,16,2.192,17,1.964,21,0.645,23,1.964,25,0.468,26,0.308,28,0.742,31,1.964,40,0.742,41,1.676,57,0.742,84,0.031,85,0.037,86,0.031,181,2.352,183,2.663,185,2.092,186,2.092,187,2.092,188,2.192,189,4.37,190,3.58]],["title/components/NgxMugenScrollComponent.html",[191,1.243,192,1.243]],["body/components/NgxMugenScrollComponent.html",[0,0.057,3,0.177,4,0.177,5,0.177,7,1.031,9,0.319,11,1.332,12,0.79,13,1.168,14,0.044,15,0.563,17,0.999,21,0.244,22,0.443,23,1.627,25,0.346,26,0.184,27,1.238,28,0.825,31,1.406,32,1.497,33,2.119,34,1.444,35,2.029,37,0.773,40,0.28,41,0.999,42,1.247,45,1.362,50,0.706,51,1.497,53,0.79,54,0.79,57,0.868,60,0.795,62,1.095,65,1.102,77,0.995,80,1.271,84,0.012,85,0.019,86,0.012,89,1.115,96,0.642,97,1.959,100,0.891,102,1.247,105,1.406,116,0.999,125,0.509,126,1.382,147,0.888,148,1.973,154,1.382,157,2.284,160,2.284,164,1.231,174,0.888,175,2.032,180,1.382,181,0.888,183,1.006,185,0.79,186,0.79,187,1.912,188,1.382,190,1.153,191,1.115,192,1.569,193,2.605,194,2.784,195,1.687,196,1.006,197,1.11,198,1.968,199,1.968,200,1.737,201,0.995,202,1.704,203,1.973,204,2.235,205,2.605,206,1.968,207,1.968,208,1.968,209,1.968,210,2.665,211,1.968,212,2.433,213,2.605,214,1.65,215,2.479,216,2.284,217,2.284,218,2.807,219,1.65,220,1.65,221,2.479,222,1.402,223,1.65,224,1.588,225,1.65,226,2.479,227,1.65,228,1.402,229,1.588,230,1.65,231,0.999,232,2.235,233,1.588,234,2.708,235,1.65,236,1.261,237,2.235,238,1.65,239,1.65,240,1.406,241,1.973,242,1.756,243,2.586,244,1.65,245,1.65,246,1.588,247,1.588,248,1.968,249,1.65,250,1.406,251,1.402,252,1.402,253,1.588,254,1.006,255,2.889,256,1.968,257,1.006,258,0.888,259,0.888,260,0.888,261,0.888,262,0.888,263,1.402,264,1.588,265,1.006,266,1.006,267,1.006,268,1.006,269,1.006,270,1.006,271,1.006,272,1.006,273,1.968,274,1.006,275,1.006,276,1.588,277,1.531,278,2.235,279,1.006,280,1.588,281,1.588,282,1.588,283,1.968,284,0.888,285,1.588,286,1.006,287,1.006,288,1.006,289,1.968,290,1.588,291,1.984,292,1.588,293,3.272,294,3.272,295,1.588,296,1.588,297,2.708,298,2.586,299,2.433,300,2.235,301,1.006,302,1.006,303,1.006,304,1.006,305,1.968,306,1.006,307,1.006,308,1.006,309,1.588,310,1.006,311,1.588,312,1.006,313,1.006,314,1.006,315,1.006,316,1.006,317,1.006,318,1.006,319,1.006,320,1.006,321,1.006,322,1.006,323,1.006,324,1.006,325,1.968,326,1.588,327,1.006,328,1.006,329,1.006,330,1.006,331,1.006,332,2.235,333,1.006,334,1.968,335,1.006,336,1.006,337,1.006,338,1.588,339,1.588,340,1.006,341,0.999,342,1.006,343,1.006,344,0.999,345,1.406,346,1.588,347,1.588,348,1.006,349,0.999,350,1.588,351,1.588,352,1.006,353,1.006,354,1.006,355,1.006,356,1.006,357,1.006,358,1.006,359,1.588,360,1.006,361,1.006,362,1.006,363,1.006,364,1.006,365,1.006,366,1.006,367,1.006,368,1.006,369,3.667,370,1.65,371,1.65,372,1.65,373,1.65]],["title/modules/NgxMugenScrollModule.html",[374,2.377,375,1.771]],["body/modules/NgxMugenScrollModule.html",[3,0.448,4,0.448,5,0.448,7,1.034,14,0.043,15,0.716,21,0.619,25,0.448,26,0.295,27,2.166,84,0.03,85,0.036,86,0.03,180,2.418,188,2.418,192,2.418,194,2.254,195,1.742,201,1.291,258,2.254,259,2.254,260,2.254,375,3.045,376,2.927,377,4.188,378,4.996,379,4.996,380,4.089,381,4.188,382,3.428]],["title/classes/NotFoundResourceError.html",[26,0.205,383,1.563]],["body/classes/NotFoundResourceError.html",[0,0.061,3,0.191,4,0.191,5,0.191,7,0.346,9,0.886,10,1.328,11,1.246,13,0.837,14,0.044,15,0.352,21,0.264,22,0.804,25,0.41,26,0.196,28,0.705,32,1.048,34,0.837,37,0.886,39,0.685,40,0.471,45,1.246,57,0.925,60,1.246,62,1.425,65,0.765,66,1.985,77,1.048,80,1.057,84,0.024,85,0.02,86,0.013,87,1.089,96,1.413,97,1.303,99,0.685,100,1.211,101,0.685,120,1.959,123,1.063,124,0.856,125,0.551,127,1.969,146,0.962,162,2.361,164,1.604,172,1.829,179,0.962,195,0.551,197,0.954,201,0.551,202,1.969,231,1.063,236,1.884,240,0.685,250,1.303,277,1.063,291,1.303,341,1.682,344,1.682,345,1.904,349,1.682,383,1.492,384,2.061,385,0.962,386,1.69,387,2.335,388,2.79,389,1.787,390,2.773,391,1.787,392,1.089,393,1.089,394,1.089,395,0.962,396,2.061,397,1.492,398,1.089,399,1.492,400,1.089,401,1.089,402,2.8,403,2.674,404,1.089,405,1.089,406,1.089,407,1.089,408,1.089,409,1.089,410,2.335,411,1.69,412,1.089,413,2.071,414,2.071,415,1.69,416,2.071,417,1.089,418,1.089,419,1.089,420,1.089,421,1.089,422,2.527,423,1.089,424,1.089,425,1.089,426,1.089,427,1.089,428,0.962,429,1.089,430,3.339,431,2.527,432,2.071,433,1.089,434,1.69,435,1.089,436,1.089,437,1.089,438,1.089,439,1.089,440,1.69,441,2.79,442,1.089,443,1.089,444,2.79,445,2.962,446,2.464,447,2.949,448,2.335,449,1.089,450,1.089,451,1.089,452,1.69,453,1.69,454,1.69,455,1.69,456,2.071,457,2.071,458,2.335,459,2.527,460,1.69,461,1.089,462,2.527,463,1.089,464,2.527,465,1.089,466,1.089,467,1.69,468,1.089,469,1.089,470,1.089,471,1.089,472,1.089,473,1.089,474,1.089,475,1.089,476,1.089,477,1.089,478,1.089,479,1.089,480,2.527,481,2.335,482,2.79,483,1.089,484,1.69,485,2.335,486,1.69,487,1.69,488,2.231,489,1.089,490,1.089,491,2.071,492,1.089,493,2.674,494,1.089,495,1.089,496,1.089,497,1.089,498,1.089,499,1.089,500,1.69,501,1.69,502,1.089,503,1.089,504,1.089,505,2.071,506,1.089,507,1.089,508,1.089,509,1.089,510,1.089,511,1.089,512,1.089,513,1.089,514,1.089,515,1.089,516,1.089,517,1.089,518,1.089,519,1.089,520,1.69,521,0.962,522,0.962,523,1.089,524,1.089,525,1.089,526,1.089,527,1.089,528,1.089,529,1.089,530,1.089,531,1.089,532,1.089,533,1.492,534,1.089,535,0.962,536,1.089,537,1.089,538,1.089]],["title/classes/NullLogger.html",[26,0.205,263,1.563]],["body/classes/NullLogger.html",[0,0.064,3,0.38,4,0.205,5,0.205,7,0.979,9,0.37,11,1.246,12,0.916,13,0.471,14,0.044,15,0.595,17,1.121,21,0.283,22,0.497,23,0.734,25,0.38,26,0.206,27,1.121,28,0.86,31,1.523,32,1.56,33,1.83,34,1.457,35,1.699,37,0.687,40,0.325,41,1.121,42,0.916,45,1.384,50,0.819,51,1.529,53,0.916,54,0.916,57,0.897,60,1.054,62,1.156,65,1.181,77,1.094,80,1.096,84,0.014,85,0.021,86,0.014,87,1.166,89,1.251,96,0.471,97,0.734,99,0.734,100,0.528,101,0.734,102,1.399,105,0.734,116,1.121,125,0.59,126,1.518,147,1.03,148,1.573,154,1.251,157,1.573,160,1.573,164,1.094,174,1.03,175,2.246,180,1.251,185,0.916,186,0.916,187,2.048,188,1.251,191,1.251,192,0.819,194,1.573,195,1.447,196,1.166,197,1.22,198,1.781,199,1.781,200,1.03,201,0.59,202,1.36,203,1.03,204,1.166,206,1.166,207,1.166,208,1.166,209,1.166,210,2.302,211,1.166,212,1.781,215,2.137,216,1.909,217,1.909,218,2.42,221,2.137,222,1.03,224,1.166,226,2.137,228,1.03,229,1.166,231,0.734,232,1.781,233,1.166,234,2.607,236,1.005,237,1.781,240,1.121,241,1.573,242,1.399,243,2.162,246,1.166,247,1.166,248,1.781,250,1.36,251,1.03,252,1.03,253,1.166,254,1.166,255,3.022,256,2.162,257,1.166,258,1.03,259,1.03,260,1.03,261,1.03,262,1.03,263,1.909,264,2.162,265,1.166,266,1.166,267,1.166,268,1.166,269,1.166,270,1.166,271,1.166,272,1.166,273,2.162,274,1.166,275,1.166,276,1.781,277,1.64,278,2.42,279,1.166,280,1.781,281,1.781,282,1.781,283,2.162,284,1.03,285,1.781,286,1.166,287,1.166,288,1.166,289,2.162,290,1.781,291,2.047,292,1.781,293,3.356,294,3.356,295,1.781,296,1.781,297,2.859,298,2.749,299,2.607,300,2.42,301,1.166,302,1.166,303,1.166,304,1.166,305,2.162,306,1.166,307,1.166,308,1.166,309,1.781,310,1.166,311,1.781,312,1.166,313,1.166,314,1.166,315,1.166,316,1.166,317,1.166,318,1.166,319,1.166,320,1.166,321,1.166,322,1.166,323,1.166,324,1.166,325,2.162,326,1.781,327,1.166,328,1.166,329,1.166,330,1.166,331,1.166,332,2.42,333,1.166,334,2.162,335,1.166,336,1.166,337,1.166,338,1.781,339,1.781,340,1.166,341,1.121,342,1.166,343,1.166,344,1.121,345,1.523,346,1.781,347,1.781,348,1.166,349,1.121,350,1.781,351,1.781,352,1.166,353,1.166,354,1.166,355,1.166,356,1.166,357,1.166,358,1.166,359,1.781,360,1.166,361,1.166,362,1.166,363,1.166,364,1.166,365,1.166,366,1.166,367,1.166,368,1.166,539,1.913,540,1.913]],["title/injectables/OrderedDataStoreIdxService.html",[123,1.114,399,1.563]],["body/injectables/OrderedDataStoreIdxService.html",[0,0.052,3,0.156,4,0.156,5,0.156,7,0.281,9,0.958,11,1.302,13,1.253,14,0.044,15,0.298,21,0.215,22,0.874,25,0.365,26,0.166,28,0.637,32,0.915,34,0.731,37,1.015,39,0.903,40,0.504,45,1.176,50,1.007,51,0.726,57,0.89,60,1.253,62,1.395,65,0.65,66,1.794,77,0.915,80,1.214,84,0.021,85,0.017,86,0.01,89,1.007,96,1.442,97,1.831,99,1.95,100,1.343,101,1.742,105,1.79,120,2.043,123,0.903,124,0.696,125,0.448,127,2.067,145,1.016,146,1.597,162,2.512,164,1.672,172,2.445,179,1.597,195,0.448,197,0.5,201,0.448,202,2.154,203,1.267,231,0.903,236,1.817,240,1.138,250,1.619,277,1.308,291,1.138,341,1.538,344,1.538,345,1.79,349,1.538,383,0.782,384,2.62,385,0.782,386,0.886,387,0.886,388,2.284,392,0.886,393,0.886,394,0.886,395,0.782,396,1.835,397,1.835,398,0.886,399,2.017,400,0.886,401,0.886,402,2.663,403,2.445,404,0.886,405,0.886,406,0.886,407,0.886,408,1.808,409,1.435,410,2.681,411,2.079,412,0.886,413,1.808,414,1.808,415,1.435,416,1.808,417,0.886,418,0.886,419,0.886,420,0.886,421,0.886,422,2.284,423,0.886,424,1.435,425,1.808,426,0.886,427,0.886,428,1.267,429,0.886,430,3.22,431,2.284,432,1.808,433,0.886,434,1.435,435,0.886,436,0.886,437,0.886,438,0.886,439,0.886,440,1.435,441,2.574,442,0.886,443,1.435,444,2.574,445,2.77,446,2.273,447,2.96,448,2.079,449,0.886,450,0.886,451,1.808,452,2.445,453,2.445,454,2.445,455,2.445,456,2.574,457,1.808,458,2.079,459,2.91,460,1.435,461,0.886,462,2.284,463,0.886,464,2.284,465,0.886,466,0.886,467,1.435,468,0.886,469,0.886,470,0.886,471,0.886,472,0.886,473,0.886,474,0.886,475,1.435,476,0.886,477,2.079,478,0.886,479,0.886,480,2.77,481,2.681,482,2.574,483,0.886,484,1.435,485,2.079,486,1.435,487,1.435,488,2.273,489,1.808,490,0.886,491,2.284,492,0.886,493,2.681,494,0.886,495,0.886,496,0.886,497,0.886,498,0.886,499,0.886,500,1.435,501,1.435,502,0.886,503,0.886,504,0.886,505,1.808,506,0.886,507,0.886,508,0.886,509,1.808,510,1.808,511,0.886,512,0.886,513,0.886,514,0.886,515,0.886,516,0.886,517,0.886,518,0.886,519,0.886,520,2.079,521,0.782,522,0.782,523,0.886,524,0.886,525,0.886,526,0.886,527,0.886,528,0.886,529,0.886,530,0.886,531,0.886,532,0.886,533,1.267,534,0.886,535,0.782,536,0.886,537,0.886,538,0.886,541,2.354,542,2.354,543,1.453,544,1.453,545,1.453,546,1.453,547,1.453,548,1.453,549,3.411,550,3.411,551,1.453,552,1.453,553,1.453,554,1.453,555,1.453,556,1.453,557,1.453,558,1.453,559,1.453,560,1.453,561,1.453,562,1.453]],["title/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.064,395,1.563]],["body/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.061,2,0.621,3,0.193,4,0.193,5,0.193,7,0.35,9,0.89,10,1.338,11,1.17,13,0.843,14,0.044,15,0.354,21,0.267,22,0.807,25,0.412,26,0.197,28,0.708,32,0.557,34,0.843,37,0.89,39,0.692,40,0.307,45,1.249,57,0.927,60,1.285,62,1.426,65,0.771,66,1.995,77,1.055,80,1.216,84,0.025,85,0.02,86,0.013,96,1.414,100,1.216,120,1.966,123,1.072,124,0.864,125,0.557,127,1.869,146,0.971,162,2.371,164,1.608,172,1.841,179,0.971,195,0.557,197,0.621,201,0.557,202,1.974,231,1.597,236,1.887,240,0.692,250,1.312,277,1.072,291,1.312,341,1.689,344,1.689,345,1.91,349,1.689,383,0.971,384,0.971,385,0.971,386,1.1,387,1.1,388,2.539,392,1.1,393,1.1,394,1.1,395,1.504,396,2.473,397,1.504,398,1.1,399,1.504,400,1.1,401,1.1,402,2.807,403,2.685,404,1.1,405,1.1,406,1.1,407,1.1,408,1.1,409,1.1,410,2.347,411,1.704,412,1.1,413,2.085,414,2.085,415,1.704,416,2.085,417,1.1,418,1.1,419,1.1,420,1.1,421,1.1,422,2.539,423,1.1,424,1.1,425,1.1,426,1.1,427,1.1,428,0.971,429,1.1,430,3.345,431,2.539,432,2.085,433,1.1,434,1.704,435,1.1,436,1.1,437,1.1,438,1.1,439,1.1,440,1.704,441,2.801,442,1.1,443,1.1,444,2.801,445,2.971,446,2.473,447,2.954,448,2.347,449,1.1,450,1.1,451,1.1,452,1.704,453,1.704,454,1.704,455,1.704,456,2.085,457,2.085,458,2.347,459,2.539,460,1.704,461,1.1,462,2.539,463,1.1,464,2.539,465,1.1,466,1.1,467,1.704,468,1.1,469,1.1,470,1.1,471,1.1,472,1.1,473,1.1,474,1.1,475,1.1,476,1.1,477,1.1,478,1.1,479,1.1,480,2.539,481,2.347,482,2.801,483,1.1,484,1.704,485,2.347,486,1.704,487,1.704,488,2.242,489,1.1,490,1.1,491,2.085,492,1.1,493,2.685,494,1.1,495,1.1,496,1.1,497,1.1,498,1.1,499,1.1,500,1.704,501,1.704,502,1.1,503,1.1,504,1.1,505,2.085,506,1.1,507,1.1,508,1.1,509,1.1,510,1.1,511,1.1,512,1.1,513,1.1,514,1.1,515,1.1,516,1.1,517,1.1,518,1.1,519,1.1,520,1.704,521,0.971,522,0.971,523,1.1,524,1.1,525,1.1,526,1.1,527,1.1,528,1.1,529,1.1,530,1.1,531,1.1,532,1.1,533,1.504,534,1.1,535,0.971,536,1.1,537,1.1,538,1.1]],["title/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.064,397,1.563]],["body/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.061,2,0.621,3,0.193,4,0.193,5,0.193,7,0.35,9,0.89,10,1.338,11,1.17,13,0.843,14,0.044,15,0.354,21,0.267,22,0.807,25,0.412,26,0.197,28,0.708,32,0.557,34,0.843,37,0.89,39,0.692,40,0.307,45,1.249,57,0.927,60,1.312,62,1.426,65,0.771,66,1.995,77,1.055,80,1.063,84,0.025,85,0.02,86,0.013,96,1.414,100,1.216,120,1.966,123,1.072,124,0.864,125,0.557,127,1.869,146,0.971,162,2.371,164,1.608,172,1.841,179,0.971,195,0.557,197,0.621,201,0.557,202,1.974,231,1.072,236,1.887,240,0.692,250,1.312,277,1.072,291,1.312,341,1.689,344,1.689,345,1.91,349,1.689,383,0.971,384,0.971,385,0.971,386,1.1,387,1.1,388,2.539,392,1.1,393,1.1,394,1.1,395,0.971,396,2.473,397,1.841,398,2.347,399,1.504,400,1.1,401,1.1,402,2.807,403,2.685,404,1.1,405,1.1,406,1.1,407,1.1,408,1.1,409,1.1,410,2.347,411,1.704,412,1.1,413,2.085,414,2.085,415,1.704,416,2.085,417,1.1,418,1.1,419,1.1,420,1.1,421,1.1,422,2.539,423,1.1,424,1.1,425,1.1,426,1.1,427,1.1,428,0.971,429,1.1,430,3.345,431,2.539,432,2.085,433,1.1,434,1.704,435,1.1,436,1.1,437,1.1,438,1.1,439,1.1,440,1.704,441,2.801,442,1.1,443,1.1,444,2.801,445,2.971,446,2.473,447,2.954,448,2.347,449,1.1,450,1.1,451,1.1,452,1.704,453,1.704,454,1.704,455,1.704,456,2.085,457,2.085,458,2.347,459,2.539,460,1.704,461,1.1,462,2.539,463,1.1,464,2.539,465,1.1,466,1.1,467,1.704,468,1.1,469,1.1,470,1.1,471,1.1,472,1.1,473,1.1,474,1.1,475,1.1,476,1.1,477,1.1,478,1.1,479,1.1,480,2.539,481,2.347,482,2.801,483,1.1,484,1.704,485,2.347,486,1.704,487,1.704,488,2.242,489,1.1,490,1.1,491,2.085,492,1.1,493,2.685,494,1.1,495,1.1,496,1.1,497,1.1,498,1.1,499,1.1,500,1.704,501,1.704,502,1.1,503,1.1,504,1.1,505,2.085,506,1.1,507,1.1,508,1.1,509,1.1,510,1.1,511,1.1,512,1.1,513,1.1,514,1.1,515,1.1,516,1.1,517,1.1,518,1.1,519,1.1,520,1.704,521,0.971,522,0.971,523,1.1,524,1.1,525,1.1,526,1.1,527,1.1,528,1.1,529,1.1,530,1.1,531,1.1,532,1.1,533,1.504,534,1.1,535,0.971,536,1.1,537,1.1,538,1.1]],["title/interfaces/ScrollBottomEvent.html",[0,0.064,261,1.563]],["body/interfaces/ScrollBottomEvent.html",[0,0.065,2,0.668,3,0.208,4,0.208,5,0.208,7,0.984,11,1.251,12,0.93,14,0.044,15,0.598,17,1.134,21,0.287,22,0.503,23,0.745,25,0.383,26,0.209,27,1.134,28,0.863,31,1.535,32,1.566,33,1.843,34,1.459,35,1.713,37,0.693,40,0.33,41,1.134,42,0.93,45,1.387,50,0.832,51,1.499,53,0.93,54,0.93,57,0.9,60,0.882,62,1.162,65,1.189,77,1.104,80,1.105,84,0.014,85,0.021,86,0.014,96,0.479,102,1.416,116,1.134,125,0.599,126,1.533,147,1.046,148,1.592,154,1.266,157,1.592,160,1.592,164,1.104,174,1.046,175,2.172,180,1.266,185,0.93,186,0.93,187,2.062,188,1.266,191,1.266,192,0.832,194,1.046,195,1.399,196,1.184,197,1.017,198,1.803,199,1.803,200,1.046,201,0.599,202,1.373,203,1.046,204,1.184,206,1.184,207,1.184,208,1.184,209,1.184,210,2.318,211,1.184,212,1.803,215,2.154,216,1.927,217,1.927,218,2.44,221,2.154,222,1.046,224,1.184,226,2.154,228,1.046,229,1.184,231,0.745,232,1.803,233,1.184,234,2.625,236,1.017,237,1.803,240,1.134,241,1.592,242,1.416,243,2.183,246,1.184,247,1.184,248,1.803,250,1.373,251,1.046,252,1.046,253,1.184,254,1.184,255,3.036,256,2.183,257,1.184,258,1.046,259,1.046,260,1.046,261,1.592,262,1.046,263,1.592,264,1.803,265,1.184,266,1.184,267,1.184,268,1.184,269,1.184,270,1.184,271,1.184,272,1.184,273,2.183,274,1.184,275,1.184,276,1.803,277,1.652,278,2.44,279,1.184,280,1.803,281,1.803,282,1.803,283,2.183,284,1.046,285,1.803,286,1.184,287,1.184,288,1.184,289,2.183,290,1.803,291,2.053,292,1.803,293,3.364,294,3.364,295,1.803,296,1.803,297,2.875,298,2.765,299,2.625,300,2.44,301,1.184,302,1.184,303,1.184,304,1.184,305,2.183,306,1.184,307,1.184,308,1.184,309,1.803,310,1.184,311,1.803,312,1.184,313,1.184,314,1.184,315,1.184,316,1.184,317,1.184,318,1.184,319,1.184,320,1.184,321,1.184,322,1.184,323,1.184,324,1.184,325,2.183,326,1.803,327,1.184,328,1.184,329,1.184,330,1.184,331,1.184,332,2.44,333,1.184,334,2.183,335,1.184,336,1.184,337,1.184,338,1.803,339,1.803,340,1.184,341,1.134,342,1.184,343,1.184,344,1.134,345,1.535,346,1.803,347,1.803,348,1.184,349,1.134,350,1.803,351,1.803,352,1.184,353,1.184,354,1.184,355,1.184,356,1.184,357,1.184,358,1.184,359,1.803,360,1.184,361,1.184,362,1.184,363,1.184,364,1.184,365,1.184,366,1.184,367,1.184,368,1.184]],["title/interfaces/ScrollTopEvent.html",[0,0.064,262,1.563]],["body/interfaces/ScrollTopEvent.html",[0,0.065,2,0.668,3,0.208,4,0.208,5,0.208,7,0.984,11,1.251,12,0.93,14,0.044,15,0.598,17,1.134,21,0.287,22,0.503,23,0.745,25,0.383,26,0.209,27,1.134,28,0.863,31,1.535,32,1.566,33,1.843,34,1.459,35,1.713,37,0.693,40,0.33,41,1.134,42,0.93,45,1.387,50,0.832,51,1.499,53,0.93,54,0.93,57,0.9,60,0.882,62,1.162,65,1.189,77,1.104,80,1.105,84,0.014,85,0.021,86,0.014,96,0.479,102,1.416,116,1.134,125,0.599,126,1.533,147,1.046,148,1.592,154,1.266,157,1.592,160,1.592,164,1.104,174,1.046,175,2.172,180,1.266,185,0.93,186,0.93,187,2.062,188,1.266,191,1.266,192,0.832,194,1.046,195,1.399,196,1.184,197,1.017,198,1.803,199,1.803,200,1.046,201,0.599,202,1.373,203,1.046,204,1.184,206,1.184,207,1.184,208,1.184,209,1.184,210,2.318,211,1.184,212,1.803,215,2.154,216,1.927,217,1.927,218,2.44,221,2.154,222,1.046,224,1.184,226,2.154,228,1.046,229,1.184,231,0.745,232,1.803,233,1.184,234,2.625,236,1.017,237,1.803,240,1.134,241,1.592,242,1.416,243,2.183,246,1.184,247,1.184,248,1.803,250,1.373,251,1.046,252,1.046,253,1.184,254,1.184,255,3.036,256,2.183,257,1.184,258,1.046,259,1.046,260,1.046,261,1.046,262,1.592,263,1.592,264,1.803,265,1.184,266,1.184,267,1.184,268,1.184,269,1.184,270,1.184,271,1.184,272,1.184,273,2.183,274,1.184,275,1.184,276,1.803,277,1.652,278,2.44,279,1.184,280,1.803,281,1.803,282,1.803,283,2.183,284,1.046,285,1.803,286,1.184,287,1.184,288,1.184,289,2.183,290,1.803,291,2.053,292,1.803,293,3.364,294,3.364,295,1.803,296,1.803,297,2.875,298,2.765,299,2.625,300,2.44,301,1.184,302,1.184,303,1.184,304,1.184,305,2.183,306,1.184,307,1.184,308,1.184,309,1.803,310,1.184,311,1.803,312,1.184,313,1.184,314,1.184,315,1.184,316,1.184,317,1.184,318,1.184,319,1.184,320,1.184,321,1.184,322,1.184,323,1.184,324,1.184,325,2.183,326,1.803,327,1.184,328,1.184,329,1.184,330,1.184,331,1.184,332,2.44,333,1.184,334,2.183,335,1.184,336,1.184,337,1.184,338,1.803,339,1.803,340,1.184,341,1.134,342,1.184,343,1.184,344,1.134,345,1.535,346,1.803,347,1.803,348,1.184,349,1.134,350,1.803,351,1.803,352,1.184,353,1.184,354,1.184,355,1.184,356,1.184,357,1.184,358,1.184,359,1.803,360,1.184,361,1.184,362,1.184,363,1.184,364,1.184,365,1.184,366,1.184,367,1.184,368,1.184]],["title/dependencies.html",[563,2.431,564,2.857]],["body/dependencies.html",[14,0.042,21,0.682,84,0.033,85,0.038,86,0.033,564,4.33,565,4.621,566,4.621,567,4.621,568,4.621,569,4.33]],["title/miscellaneous/functions.html",[570,1.99,571,2.857]],["body/miscellaneous/functions.html",[9,0.845,11,1.338,14,0.042,84,0.031,85,0.037,86,0.031,99,1.963,100,1.413,101,1.963,105,1.963,127,2.083,164,1.345,384,2.348,385,2.923,396,2.755,402,2.755,446,2.348,447,3.015,521,2.755,522,2.755,533,2.755,535,2.348,570,3.571,571,3.571,572,5.118,573,5.118,574,4.363,575,4.363]],["title/index.html",[9,0.471,576,1.99,577,1.99]],["body/index.html",[0,0.102,7,1.093,11,1.39,14,0.041,15,0.586,24,2.578,26,0.26,33,1.978,35,2.161,65,1.018,84,0.026,85,0.033,86,0.026,102,1.766,127,1.415,154,1.579,184,3.019,190,2.578,191,2.463,192,2.38,195,1.425,197,1.269,200,1.985,201,1.425,210,2.993,216,2.717,217,2.717,221,2.717,222,1.985,226,3.071,228,1.985,241,1.985,242,2.213,251,2.488,252,1.985,375,3.077,380,3.019,382,3.019,428,1.985,488,1.985,569,3.019,578,5.049,579,5.049,580,3.689,581,3.689,582,3.689,583,3.689,584,3.689,585,4.623,586,3.689,587,4.623,588,4.623,589,4.623,590,3.689,591,3.689,592,3.689,593,2.578,594,5.049,595,3.689,596,3.689,597,3.689,598,3.689,599,3.689,600,3.689,601,3.689,602,3.689,603,5.049,604,5.049,605,3.689,606,3.689,607,3.689,608,3.689,609,3.689,610,3.689,611,3.689,612,5.049,613,3.689,614,4.623,615,3.689,616,3.689,617,3.689,618,3.689,619,3.689,620,3.689,621,4.623,622,3.689,623,3.019,624,3.689,625,3.689,626,3.689,627,3.689]],["title/license.html",[576,1.99,577,1.99,628,2.431]],["body/license.html",[14,0.035,84,0.029,85,0.035,86,0.029,215,2.205,236,1.409,242,1.961,623,4.035,629,5.289,630,4.097,631,4.097,632,4.097,633,4.93,634,4.097,635,4.097,636,4.097,637,4.097,638,4.097,639,4.097,640,4.93,641,5.857,642,4.097,643,4.097,644,4.097,645,4.097,646,5.289,647,4.097,648,4.93,649,4.097,650,4.097,651,4.097,652,4.097,653,4.097,654,4.097,655,4.097,656,4.097,657,4.097,658,4.93,659,4.097,660,4.097,661,4.097,662,4.097,663,4.097,664,4.097,665,4.097,666,4.93,667,4.93,668,4.097,669,4.097,670,4.097,671,4.097,672,4.097,673,4.097,674,4.097,675,4.097,676,4.097,677,4.097,678,4.097,679,4.097,680,4.097,681,4.097,682,4.097,683,4.097,684,4.097,685,4.097,686,4.097,687,4.097,688,4.097,689,4.097,690,4.097,691,4.097,692,4.097,693,4.097,694,4.097,695,4.097]],["title/modules.html",[376,2.763]],["body/modules.html",[14,0.038,84,0.034,85,0.038,86,0.034,375,2.858,376,3.277,696,4.69]],["title/overview.html",[593,2.763]],["body/overview.html",[2,1.587,14,0.038,84,0.033,85,0.038,86,0.033,87,2.812,145,3.224,181,2.483,191,1.974,284,2.845,374,3.775,593,3.224,697,5.286,698,4.613,699,4.613]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":77,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["0px",{"_index":318,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["1",{"_index":284,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["1.0",{"_index":320,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["10",{"_index":279,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["11.0.9",{"_index":569,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":698,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":630,"title":{},"body":{"license.html":{}}}],["3",{"_index":697,"title":{},"body":{"overview.html":{}}}],["30",{"_index":47,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["8",{"_index":699,"title":{},"body":{"overview.html":{}}}],["9999999",{"_index":368,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["above",{"_index":665,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":93,"title":{},"body":{"classes/Cursor.html":{}}}],["action",{"_index":688,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":373,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["add",{"_index":541,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["add(storename",{"_index":443,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["afterviewinit",{"_index":199,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["and/or",{"_index":656,"title":{},"body":{"license.html":{}}}],["angular",{"_index":583,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":21,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{}}}],["angularjs",{"_index":580,"title":{},"body":{"index.html":{}}}],["any).result",{"_index":432,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["api",{"_index":585,"title":{},"body":{"index.html":{}}}],["appended",{"_index":241,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["args",{"_index":179,"title":{},"body":{"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["args.foreach((arg",{"_index":449,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arising",{"_index":692,"title":{},"body":{"license.html":{}}}],["arrange(deleteattop",{"_index":79,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["array",{"_index":60,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["array).foreach((v",{"_index":516,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybuffer",{"_index":454,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybufferview",{"_index":453,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["associated",{"_index":642,"title":{},"body":{"license.html":{}}}],["async",{"_index":202,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["attached",{"_index":72,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["attribute",{"_index":603,"title":{},"body":{"index.html":{}}}],["authors",{"_index":682,"title":{},"body":{"license.html":{}}}],["autofetchingbottom",{"_index":206,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autofetchingbottom(autofetchingtop",{"_index":610,"title":{},"body":{"index.html":{}}}],["autofetchingtop",{"_index":207,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autoloadscrollposition",{"_index":208,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["automatically",{"_index":217,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["await",{"_index":341,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["base",{"_index":409,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.add",{"_index":420,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.get",{"_index":412,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["boolean",{"_index":80,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom",{"_index":33,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["bottom(top",{"_index":612,"title":{},"body":{"index.html":{}}}],["bottom.directive",{"_index":259,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom.directive.ts",{"_index":182,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{}}}],["bottombeforeadded",{"_index":343,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottomcursor",{"_index":119,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomcursor.tostring",{"_index":132,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomdirective",{"_index":267,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["browse",{"_index":696,"title":{},"body":{"modules.html":{}}}],["button",{"_index":627,"title":{},"body":{"index.html":{}}}],["called",{"_index":247,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["catch",{"_index":350,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cb",{"_index":510,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cb(v",{"_index":517,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["charge",{"_index":637,"title":{},"body":{"license.html":{}}}],["children",{"_index":602,"title":{},"body":{"index.html":{}}}],["claim",{"_index":685,"title":{},"body":{"license.html":{}}}],["class",{"_index":26,"title":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["classes",{"_index":87,"title":{},"body":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"overview.html":{}}}],["clear",{"_index":50,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["clear(storename",{"_index":475,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["clearall",{"_index":477,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cli",{"_index":584,"title":{},"body":{"index.html":{}}}],["click",{"_index":624,"title":{},"body":{"index.html":{}}}],["component",{"_index":191,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":370,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["components",{"_index":193,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["conditions",{"_index":664,"title":{},"body":{"license.html":{}}}],["connection",{"_index":694,"title":{},"body":{"license.html":{}}}],["console.error('mugenscrolldatadirective",{"_index":331,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.bottom",{"_index":335,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.top",{"_index":333,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('provider",{"_index":330,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error(ev",{"_index":440,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`fetch",{"_index":414,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`filter",{"_index":511,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`from",{"_index":496,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`load",{"_index":137,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["console.log(`save",{"_index":130,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["const",{"_index":62,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor(datas",{"_index":94,"title":{},"body":{"classes/Cursor.html":{}}}],["constructor(message",{"_index":389,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["constructor(public",{"_index":392,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["content",{"_index":294,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild",{"_index":254,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrollbottomdirective",{"_index":266,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolldatadirective",{"_index":270,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolltopdirective",{"_index":268,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contract",{"_index":689,"title":{},"body":{"license.html":{}}}],["copies",{"_index":658,"title":{},"body":{"license.html":{}}}],["copy",{"_index":640,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":629,"title":{},"body":{"license.html":{}}}],["countperload",{"_index":209,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ctx",{"_index":1,"title":{"interfaces/Ctx.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["ctx.data",{"_index":83,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["current",{"_index":250,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["current.getitems",{"_index":485,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["current.tostring",{"_index":495,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursor",{"_index":22,"title":{"classes/Cursor.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursor([v.tostring",{"_index":49,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["cursor.continue",{"_index":508,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursorstoreinfo",{"_index":116,"title":{"interfaces/CursorStoreInfo.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreinfo.scrolltop",{"_index":327,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreservice",{"_index":126,"title":{"injectables/CursorStoreService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["damages",{"_index":686,"title":{},"body":{"license.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data.directive",{"_index":260,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["data.directive.ts",{"_index":8,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["data.index",{"_index":599,"title":{},"body":{"index.html":{}}}],["data.message",{"_index":600,"title":{},"body":{"index.html":{}}}],["datadirective",{"_index":271,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["dataprovider",{"_index":154,"title":{"interfaces/DataProvider.html":{}},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas",{"_index":102,"title":{},"body":{"classes/Cursor.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas.foreach(data",{"_index":61,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datas.map(v",{"_index":111,"title":{},"body":{"classes/Cursor.html":{}}}],["datas.reverse().foreach(data",{"_index":76,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datasmap",{"_index":29,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["date",{"_index":452,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db",{"_index":402,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["db.createobjectstore",{"_index":524,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames",{"_index":479,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames.contains(storename",{"_index":523,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.transaction(storename",{"_index":536,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["dbname",{"_index":404,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["deal",{"_index":645,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":695,"title":{},"body":{"license.html":{}}}],["debug",{"_index":272,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["declarations",{"_index":378,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["default",{"_index":549,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["defined",{"_index":97,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["delete",{"_index":146,"title":{},"body":{"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["delete(p",{"_index":142,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["delete(storename",{"_index":547,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["delimiter",{"_index":95,"title":{},"body":{"classes/Cursor.html":{}}}],["demo1",{"_index":588,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":564,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["direction",{"_index":493,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["directive",{"_index":16,"title":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["directives",{"_index":181,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"overview.html":{}}}],["displayed",{"_index":228,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["distribute",{"_index":654,"title":{},"body":{"license.html":{}}}],["docs",{"_index":617,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":643,"title":{},"body":{"license.html":{}}}],["during",{"_index":595,"title":{},"body":{"index.html":{}}}],["el",{"_index":41,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["element",{"_index":185,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["elementref",{"_index":17,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["embeddedviewref",{"_index":18,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["emitted",{"_index":237,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["end",{"_index":481,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["end.getitems",{"_index":486,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["entities",{"_index":307,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entities.foreach(entity",{"_index":308,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.isintersecting",{"_index":311,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.target",{"_index":309,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["eof",{"_index":504,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["err",{"_index":351,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error",{"_index":386,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('db",{"_index":423,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('mugenscrollbottomdirective",{"_index":292,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolldatadirective",{"_index":298,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolltopdirective",{"_index":296,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('provider",{"_index":300,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error(`cannot",{"_index":537,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev",{"_index":430,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev.target",{"_index":431,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["event",{"_index":236,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["eventemitter",{"_index":234,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["example",{"_index":618,"title":{},"body":{"index.html":{}}}],["export",{"_index":25,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["exports",{"_index":379,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["express",{"_index":673,"title":{},"body":{"license.html":{}}}],["false",{"_index":277,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["feature",{"_index":615,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":240,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetch(base",{"_index":551,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["fetchbottom",{"_index":157,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchbottom(cursor",{"_index":161,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetched",{"_index":216,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["fetcher",{"_index":411,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fetchoninit",{"_index":158,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchoninit(n",{"_index":165,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload",{"_index":159,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload(info",{"_index":167,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchtop",{"_index":160,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchtop(cursor",{"_index":169,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["files",{"_index":644,"title":{},"body":{"license.html":{}}}],["filter",{"_index":509,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["filter(storename",{"_index":553,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["find",{"_index":418,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fitness",{"_index":678,"title":{},"body":{"license.html":{}}}],["following",{"_index":663,"title":{},"body":{"license.html":{}}}],["free",{"_index":636,"title":{},"body":{"license.html":{}}}],["function",{"_index":520,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["functions",{"_index":571,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":661,"title":{},"body":{"license.html":{}}}],["generated",{"_index":582,"title":{},"body":{"index.html":{}}}],["get(p",{"_index":144,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["get(storename",{"_index":556,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getitem",{"_index":90,"title":{},"body":{"classes/Cursor.html":{}}}],["getitem(i",{"_index":103,"title":{},"body":{"classes/Cursor.html":{}}}],["getitems",{"_index":91,"title":{},"body":{"classes/Cursor.html":{}}}],["getlargern",{"_index":542,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlargern(storename",{"_index":558,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlength",{"_index":108,"title":{},"body":{"classes/Cursor.html":{}}}],["getsmallern",{"_index":489,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["getsmallern(storename",{"_index":560,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getting",{"_index":576,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":635,"title":{},"body":{"license.html":{}}}],["hereby",{"_index":634,"title":{},"body":{"license.html":{}}}],["holders",{"_index":683,"title":{},"body":{"license.html":{}}}],["htmlelement",{"_index":186,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scroll(0",{"_index":326,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scrolltop",{"_index":340,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["i.bottomcursor.tostring",{"_index":138,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.n",{"_index":140,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.scrolltop",{"_index":141,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.topcursor.tostring",{"_index":139,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["id",{"_index":232,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["idbarraykey",{"_index":455,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbcursorwithvalue",{"_index":503,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbdatabase",{"_index":403,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbfactory",{"_index":401,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange",{"_index":456,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.bound",{"_index":484,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.lowerbound(current.getitems",{"_index":483,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.upperbound(current.getitems",{"_index":490,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbrequest",{"_index":514,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbtransaction",{"_index":535,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx",{"_index":458,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.get(query",{"_index":461,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.getkey(key",{"_index":468,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.service.ts",{"_index":385,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx.service.ts:105",{"_index":544,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:113",{"_index":557,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:138",{"_index":548,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:171",{"_index":545,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:186",{"_index":546,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:198",{"_index":559,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:225",{"_index":561,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:293",{"_index":555,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:31",{"_index":543,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:39",{"_index":552,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:6",{"_index":390,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:7",{"_index":391,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:75",{"_index":562,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["ignore",{"_index":31,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["implementing",{"_index":613,"title":{},"body":{"index.html":{}}}],["implements",{"_index":197,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["implied",{"_index":674,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["imports",{"_index":382,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["included",{"_index":668,"title":{},"body":{"license.html":{}}}],["includeequal",{"_index":162,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["including",{"_index":648,"title":{},"body":{"license.html":{}}}],["indecies",{"_index":522,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indecies.foreach(v",{"_index":525,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indexed",{"_index":416,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexeddb",{"_index":400,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexname",{"_index":480,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indices",{"_index":398,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["infinite",{"_index":578,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["info(...args",{"_index":177,"title":{},"body":{"interfaces/Logger.html":{}}}],["info(...msgs",{"_index":264,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init",{"_index":203,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init(version",{"_index":424,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["initialize",{"_index":246,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initially",{"_index":229,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initstore",{"_index":521,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["initstore(db",{"_index":574,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":123,"title":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["injectables",{"_index":145,"title":{},"body":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{},"overview.html":{}}}],["input",{"_index":255,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["inputs",{"_index":205,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["intersectionobserver",{"_index":273,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["iter",{"_index":492,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key",{"_index":410,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2",{"_index":467,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onerror",{"_index":474,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onsuccess",{"_index":469,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["keypath",{"_index":396,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":672,"title":{},"body":{"license.html":{}}}],["left",{"_index":620,"title":{},"body":{"index.html":{}}}],["length",{"_index":56,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{}}}],["liability",{"_index":687,"title":{},"body":{"license.html":{}}}],["liable",{"_index":684,"title":{},"body":{"license.html":{}}}],["lib",{"_index":200,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["libmugenscrollbottom",{"_index":184,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"index.html":{}}}],["libmugenscrollbottom]'},{'name",{"_index":371,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolldata",{"_index":24,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"index.html":{}}}],["libmugenscrolldata]'},{'name",{"_index":372,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolltop",{"_index":190,"title":{},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"index.html":{}}}],["library",{"_index":579,"title":{},"body":{"index.html":{}}}],["license",{"_index":628,"title":{"license.html":{}},"body":{}}],["limitation",{"_index":649,"title":{},"body":{"license.html":{}}}],["limited",{"_index":675,"title":{},"body":{"license.html":{}}}],["live",{"_index":587,"title":{},"body":{"index.html":{}}}],["load",{"_index":147,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["load(p",{"_index":135,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["loaded",{"_index":222,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["local",{"_index":606,"title":{},"body":{"index.html":{}}}],["located",{"_index":621,"title":{},"body":{"index.html":{}}}],["logger",{"_index":175,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["map",{"_index":30,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{}}}],["matching",{"_index":85,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":36,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["memory",{"_index":252,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["merchantability",{"_index":677,"title":{},"body":{"license.html":{}}}],["merge",{"_index":652,"title":{},"body":{"license.html":{}}}],["message",{"_index":387,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["metadata",{"_index":183,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["method",{"_index":243,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["methods",{"_index":89,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["miscellaneous",{"_index":570,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":533,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["modify",{"_index":651,"title":{},"body":{"license.html":{}}}],["module",{"_index":374,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":376,"title":{"modules.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"modules.html":{}}}],["more",{"_index":626,"title":{},"body":{"index.html":{}}}],["msgs",{"_index":540,"title":{},"body":{"classes/NullLogger.html":{}}}],["mugen",{"_index":195,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["mugenscrollbottomdirective",{"_index":180,"title":{"directives/MugenScrollBottomDirective.html":{}},"body":{"directives/MugenScrollBottomDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolldatadirective",{"_index":27,"title":{"directives/MugenScrollDataDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolltopdirective",{"_index":188,"title":{"directives/MugenScrollTopDirective.html":{}},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["n",{"_index":120,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["name",{"_index":100,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":591,"title":{},"body":{"index.html":{}}}],["new",{"_index":45,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["newcursor",{"_index":38,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{}}}],["newcursor(v",{"_index":171,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["next",{"_index":488,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["ng",{"_index":293,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngafterviewinit",{"_index":248,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngmodule",{"_index":380,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["ngoninit",{"_index":286,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngx",{"_index":201,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscroll",{"_index":581,"title":{},"body":{"index.html":{}}}],["ngxmugenscrollcomponent",{"_index":192,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscrollmodule",{"_index":375,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{},"modules.html":{}}}],["noninfringement",{"_index":681,"title":{},"body":{"license.html":{}}}],["notfoundresourceerror",{"_index":383,"title":{"classes/NotFoundResourceError.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notfoundresourceerror(`cannot",{"_index":417,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notice",{"_index":666,"title":{},"body":{"license.html":{}}}],["null",{"_index":459,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["nulllogger",{"_index":263,"title":{"classes/NullLogger.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["number",{"_index":37,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["objectstorenames",{"_index":478,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["obtaining",{"_index":639,"title":{},"body":{"license.html":{}}}],["offset",{"_index":363,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["oninit",{"_index":198,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["optional",{"_index":101,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["ordereddatastoreidxservice",{"_index":399,"title":{"injectables/OrderedDataStoreIdxService.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxserviceindex",{"_index":395,"title":{"interfaces/OrderedDataStoreIdxServiceIndex.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxservicestore",{"_index":397,"title":{"interfaces/OrderedDataStoreIdxServiceStore.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["otherwise",{"_index":691,"title":{},"body":{"license.html":{}}}],["out",{"_index":693,"title":{},"body":{"license.html":{}}}],["output",{"_index":256,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["outputs",{"_index":213,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["overview",{"_index":593,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":131,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["package",{"_index":563,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":99,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":679,"title":{},"body":{"license.html":{}}}],["peer",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["permission",{"_index":633,"title":{},"body":{"license.html":{}}}],["permit",{"_index":659,"title":{},"body":{"license.html":{}}}],["person",{"_index":638,"title":{},"body":{"license.html":{}}}],["persons",{"_index":660,"title":{},"body":{"license.html":{}}}],["portions",{"_index":670,"title":{},"body":{"license.html":{}}}],["position",{"_index":221,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["prev",{"_index":491,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["previous",{"_index":301,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["private",{"_index":28,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["promise",{"_index":164,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":344,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["promise>((resolve",{"_index":501,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provided",{"_index":242,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":124,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provider",{"_index":210,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["provides",{"_index":594,"title":{},"body":{"index.html":{}}}],["public",{"_index":32,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["publish",{"_index":653,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":680,"title":{},"body":{"license.html":{}}}],["push(...datas",{"_index":59,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["query",{"_index":451,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r",{"_index":66,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.detectchanges",{"_index":69,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r.onerror",{"_index":464,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.onsuccess",{"_index":462,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.rootnodes[0].setattribute('_cursor",{"_index":68,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r2",{"_index":513,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r2.result",{"_index":515,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range",{"_index":482,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.lower",{"_index":497,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.upper",{"_index":498,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["read",{"_index":625,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":388,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["readwrite",{"_index":448,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["redisplayed",{"_index":598,"title":{},"body":{"index.html":{}}}],["ref",{"_index":81,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["reference",{"_index":616,"title":{},"body":{"index.html":{}}}],["references",{"_index":586,"title":{},"body":{"index.html":{}}}],["reflectiveinjector",{"_index":257,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["reject",{"_index":345,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["reject(ev",{"_index":441,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reject(r.error",{"_index":465,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["related",{"_index":253,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["remote",{"_index":419,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["represents",{"_index":604,"title":{},"body":{"index.html":{}}}],["request",{"_index":426,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onblocked",{"_index":439,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onerror",{"_index":442,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onsuccess",{"_index":429,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onupgradeneeded",{"_index":433,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["requested",{"_index":224,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["resolve",{"_index":349,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["resolve(r.result",{"_index":463,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resolve(ret",{"_index":505,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["restriction",{"_index":647,"title":{},"body":{"license.html":{}}}],["result",{"_index":84,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":86,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["resultsinitstore",{"_index":434,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resultsinitstore.push(initstore(db",{"_index":436,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret",{"_index":500,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(cursor.value",{"_index":506,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(v",{"_index":518,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(cursor.value",{"_index":507,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(v",{"_index":519,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["return",{"_index":57,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["returns",{"_index":105,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":622,"title":{},"body":{"index.html":{}}}],["rights",{"_index":650,"title":{},"body":{"license.html":{}}}],["root",{"_index":125,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["rootmargin",{"_index":317,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["row",{"_index":605,"title":{},"body":{"index.html":{}}}],["s",{"_index":359,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save",{"_index":148,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save(p",{"_index":129,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["saved",{"_index":251,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["savescrollposition",{"_index":204,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll",{"_index":7,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["scroll.component",{"_index":381,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.component.ts",{"_index":196,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll.component.ts:13",{"_index":539,"title":{},"body":{"classes/NullLogger.html":{}}}],["scroll.component.ts:135",{"_index":245,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:219",{"_index":249,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:249",{"_index":239,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:283",{"_index":244,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:39",{"_index":225,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:46",{"_index":230,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:52",{"_index":227,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:58",{"_index":223,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:64",{"_index":214,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:70",{"_index":219,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:76",{"_index":220,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:82",{"_index":235,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:88",{"_index":238,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.module.ts",{"_index":377,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.ts",{"_index":155,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:10",{"_index":168,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:12",{"_index":166,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:13",{"_index":173,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:6",{"_index":163,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:8",{"_index":170,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrollbottom",{"_index":367,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollbottomevent",{"_index":261,"title":{"interfaces/ScrollBottomEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollbottomoninit",{"_index":211,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolled",{"_index":218,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollid",{"_index":156,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrolling",{"_index":596,"title":{},"body":{"index.html":{}}}],["scrolltop",{"_index":121,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["scrolltopat(at",{"_index":356,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolltopevent",{"_index":262,"title":{"interfaces/ScrollTopEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["selector",{"_index":23,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["sell",{"_index":657,"title":{},"body":{"license.html":{}}}],["set",{"_index":589,"title":{},"body":{"index.html":{}}}],["settimeout",{"_index":347,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["shall",{"_index":667,"title":{},"body":{"license.html":{}}}],["simple",{"_index":619,"title":{},"body":{"index.html":{}}}],["software",{"_index":641,"title":{},"body":{"license.html":{}}}],["sort",{"_index":499,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["specified",{"_index":608,"title":{},"body":{"index.html":{}}}],["src/.../ordered",{"_index":572,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/cursor",{"_index":117,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["src/lib/cursor.ts",{"_index":88,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:10",{"_index":107,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:13",{"_index":104,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:16",{"_index":106,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:2",{"_index":98,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:9",{"_index":109,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/logger.ts",{"_index":176,"title":{},"body":{"interfaces/Logger.html":{}}}],["src/lib/logger.ts:2",{"_index":178,"title":{},"body":{"interfaces/Logger.html":{}}}],["src/lib/mugen",{"_index":6,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["src/lib/ngx",{"_index":194,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["src/lib/ordered",{"_index":384,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":577,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":289,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["static",{"_index":408,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store",{"_index":127,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["store.clear",{"_index":476,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.createindex",{"_index":526,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.delete(key",{"_index":466,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.index(index",{"_index":460,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.indices",{"_index":438,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.keypath",{"_index":437,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name",{"_index":413,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name}.${index}.${key",{"_index":415,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.service",{"_index":174,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["store.service.ts",{"_index":118,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["store.service.ts:16",{"_index":149,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:22",{"_index":153,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:27",{"_index":152,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:36",{"_index":150,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:40",{"_index":151,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.transaction.onabort",{"_index":531,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.oncomplete",{"_index":530,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.onerror",{"_index":532,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["storename",{"_index":447,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["storename}.${indexname",{"_index":494,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores",{"_index":425,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores.foreach(async",{"_index":435,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stream",{"_index":226,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["string",{"_index":96,"title":{},"body":{"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["styles",{"_index":265,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["subject",{"_index":662,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":655,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":669,"title":{},"body":{"license.html":{}}}],["suitable",{"_index":597,"title":{},"body":{"index.html":{}}}],["suzuki",{"_index":632,"title":{},"body":{"license.html":{}}}],["t",{"_index":172,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["t,i",{"_index":554,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["tag",{"_index":609,"title":{},"body":{"index.html":{}}}],["taito",{"_index":631,"title":{},"body":{"license.html":{}}}],["target",{"_index":470,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["target.result",{"_index":472,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tbd",{"_index":614,"title":{},"body":{"index.html":{}}}],["template",{"_index":42,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["templateref",{"_index":19,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["then(resolve).catch(reject",{"_index":473,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.arrange(false",{"_index":78,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.arrange(true",{"_index":74,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.autofetchingbottom",{"_index":280,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autofetchingtop",{"_index":281,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autoloadscrollposition",{"_index":282,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom",{"_index":54,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom.emit",{"_index":315,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective",{"_index":290,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective.element",{"_index":314,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.constructor.name",{"_index":394,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.countperload",{"_index":278,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.load(this.provider.scrollid",{"_index":323,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.save",{"_index":336,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective",{"_index":297,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.bottom",{"_index":334,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.clear",{"_index":302,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.newcursor",{"_index":303,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.push(...datas",{"_index":325,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.top",{"_index":332,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.unshift(...datas",{"_index":354,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datas",{"_index":110,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.join(this.delimiter",{"_index":113,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.length",{"_index":112,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.map(v",{"_index":115,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas[i",{"_index":114,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datasmap",{"_index":44,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.clear",{"_index":55,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.has(cursor.tostring",{"_index":64,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.set(cursor.tostring",{"_index":73,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.db",{"_index":422,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.dbname",{"_index":405,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.delete(storename",{"_index":471,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.el.nativeelement",{"_index":187,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchbottom",{"_index":316,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchtop",{"_index":313,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.indexeddb",{"_index":406,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.indexeddb.open(this.dbname",{"_index":427,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.info(`i",{"_index":361,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.info(`scroll",{"_index":365,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.init",{"_index":287,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver",{"_index":305,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.disconnect",{"_index":306,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.bottomdirective.element",{"_index":321,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.topdirective.element",{"_index":322,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.iter",{"_index":487,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.logger",{"_index":285,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.logger.info(...msgs",{"_index":366,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.max",{"_index":46,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.name",{"_index":393,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.newcursor",{"_index":48,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.newcursor(data",{"_index":63,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.provider",{"_index":299,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchbottom",{"_index":342,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchoninit(this.countperload).then(datas",{"_index":328,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchonload(cursorstoreinfo).then(datas",{"_index":324,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchtop",{"_index":352,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor",{"_index":304,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at",{"_index":360,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at).tostring",{"_index":358,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.bottom",{"_index":338,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top",{"_index":339,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top).tostring",{"_index":357,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.scrollid",{"_index":337,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottom",{"_index":329,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomat(bottombeforeadded",{"_index":348,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomoninit",{"_index":276,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrolltopat(topbeforeadded",{"_index":355,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.store",{"_index":128,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.delete(p",{"_index":143,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.get(p",{"_index":136,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.set(p",{"_index":134,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.timeoutmillisecondsafterbinding",{"_index":283,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.top",{"_index":53,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.top.emit",{"_index":312,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective",{"_index":295,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective.element",{"_index":310,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.uniqid",{"_index":275,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.validdb",{"_index":444,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.viewcontainer.clear",{"_index":52,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":67,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.length",{"_index":58,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["three",{"_index":601,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":319,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["throw",{"_index":291,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["timeoutmillisecondsafterbinding",{"_index":274,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top",{"_index":35,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["top.directive",{"_index":258,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top.directive.ts",{"_index":189,"title":{},"body":{"directives/MugenScrollTopDirective.html":{}}}],["topbeforeadded",{"_index":353,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["topcursor",{"_index":122,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topcursor.tostring",{"_index":133,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topdirective",{"_index":269,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tort",{"_index":690,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":92,"title":{},"body":{"classes/Cursor.html":{}}}],["transaction",{"_index":538,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["true",{"_index":65,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["try",{"_index":346,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tslib",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["tx",{"_index":445,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename",{"_index":457,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).getall",{"_index":512,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).index(indexname).opencursor(range",{"_index":502,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).put(arg",{"_index":450,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["undefined",{"_index":34,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["uniqid",{"_index":212,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unique",{"_index":231,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unshift(...datas",{"_index":75,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["until",{"_index":71,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["up",{"_index":590,"title":{},"body":{"index.html":{}}}],["usage",{"_index":592,"title":{},"body":{"index.html":{}}}],["use",{"_index":623,"title":{},"body":{"index.html":{},"license.html":{}}}],["used",{"_index":233,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["v",{"_index":39,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.element",{"_index":362,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["v.keypath",{"_index":528,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.name",{"_index":527,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.offsetheight",{"_index":364,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["v.unique",{"_index":529,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validate",{"_index":288,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["validdb",{"_index":421,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validtx",{"_index":573,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validtx(db",{"_index":446,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["value",{"_index":550,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["var",{"_index":369,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["variable",{"_index":607,"title":{},"body":{"index.html":{}}}],["version",{"_index":428,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["versionchange",{"_index":534,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["viewcontainer",{"_index":43,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["viewcontainerref",{"_index":20,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["visible",{"_index":611,"title":{},"body":{"index.html":{}}}],["void",{"_index":51,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["vref.context",{"_index":82,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["wait",{"_index":70,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["warranties",{"_index":676,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":671,"title":{},"body":{"license.html":{}}}],["whether",{"_index":215,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["window.indexeddb",{"_index":407,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["without",{"_index":646,"title":{},"body":{"license.html":{}}}],["yes",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Ctx.html":{"url":"interfaces/Ctx.html","title":"interface - Ctx","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Ctx\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 30;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  /**\n   * @ignore\n   */\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cursor.html":{"url":"classes/Cursor.html","title":"class - Cursor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cursor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getItem\n                            \n                            \n                                getItems\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(datas: Array, delimiter: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        datas\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        delimiter\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItem\n                        \n                        \n                    \n                \n            \n            \n                \ngetItem(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItems\n                        \n                        \n                    \n                \n            \n            \n                \ngetItems()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/cursor.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export class Cursor {\n    private datas: Array;\n    constructor(\n        datas: Array,\n        private delimiter: string = '-',\n    ) {\n        this.datas = datas.map(v => v);\n    }\n    get length(): number { return this.datas.length; }\n    toString(): string {\n        return this.datas.join(this.delimiter);\n    }\n    getItem(i: number): number | string {\n        return this.datas[i];\n    }\n    getItems(): Array {\n        return this.datas.map(v => v);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CursorStoreInfo.html":{"url":"interfaces/CursorStoreInfo.html","title":"interface - CursorStoreInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CursorStoreInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomCursor\n                                \n                                \n                                        n\n                                \n                                \n                                        scrollTop\n                                \n                                \n                                        topCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomCursor\n                                    \n                                \n                                \n                                    \n                                        bottomCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        n\n                                    \n                                \n                                \n                                    \n                                        n:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topCursor\n                                    \n                                \n                                \n                                    \n                                        topCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CursorStoreService.html":{"url":"injectables/CursorStoreService.html","title":"injectable - CursorStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CursorStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                load\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor-store.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            load\n                        \n                        \n                    \n                \n            \n            \n                \nload(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottomCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scrollTop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataProvider.html":{"url":"interfaces/DataProvider.html","title":"interface - DataProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        scrollId\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fetchBottom\n                                \n                                \n                                    fetchOnInit\n                                \n                                \n                                    fetchOnLoad\n                                \n                                \n                                    fetchTop\n                                \n                                \n                                    newCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \nfetchBottom(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnInit(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnLoad\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnLoad(info: CursorStoreInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                                CursorStoreInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \nfetchTop(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            newCursor\n                        \n                        \n                    \n                \n            \n            \n                \nnewCursor(v: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Cursor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scrollId\n                                    \n                                \n                                \n                                    \n                                        scrollId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cursor } from './cursor';\nimport { CursorStoreInfo } from './cursor-store.service';\n\nexport interface DataProvider {\n    scrollId: string;\n    fetchBottom(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchTop(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchOnLoad(\n        info: CursorStoreInfo): Promise>;\n    fetchOnInit(n: number): Promise>;\n    newCursor(v: T): Cursor;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    info\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            info\n                        \n                        \n                    \n                \n            \n            \n                \ninfo(...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface Logger {\n    info(...args: Array): void;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollBottomDirective.html":{"url":"directives/MugenScrollBottomDirective.html","title":"directive - MugenScrollBottomDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollBottomDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-bottom.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollBottom]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollBottom]'\n})\nexport class MugenScrollBottomDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) { }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollDataDirective.html":{"url":"directives/MugenScrollDataDirective.html","title":"directive - MugenScrollDataDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollDataDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollData]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 30;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  /**\n   * @ignore\n   */\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollTopDirective.html":{"url":"directives/MugenScrollTopDirective.html","title":"directive - MugenScrollTopDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollTopDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-top.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollTop]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollTop]'\n})\nexport class MugenScrollTopDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMugenScrollComponent.html":{"url":"components/NgxMugenScrollComponent.html","title":"component - NgxMugenScrollComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxMugenScrollComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/lib/ngx-mugen-scroll.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                lib-ngx-mugen-scroll\n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchBottom\n                            \n                            \n                                    Async\n                                fetchTop\n                            \n                            \n                                init\n                            \n                            \n                                saveScrollPosition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoFetchingBottom\n                            \n                            \n                                autoFetchingTop\n                            \n                            \n                                autoLoadScrollPosition\n                            \n                            \n                                countPerLoad\n                            \n                            \n                                provider\n                            \n                            \n                                scrollBottomOnInit\n                            \n                            \n                                uniqId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                bottom\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoFetchingBottom\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:64\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoFetchingTop\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:70\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to top.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoLoadScrollPosition\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:76\n                            \n                        \n                \n                    \n                        Whether the scroll position is loaded automatically.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        countPerLoad\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:58\n                            \n                        \n                \n                    \n                        The number of data fetched by provider when new data is requested.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        provider\n                    \n                \n                \n                    \n                        Type :         DataProvider | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:39\n                            \n                        \n                \n                    \n                        Provider of stream data\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollBottomOnInit\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:52\n                            \n                        \n                \n                    \n                        Whether scroll to bottom or not when stream is displayed initially.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        uniqId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:46\n                            \n                        \n                \n                    \n                        Unique id of stream.\nThis id is used to save scroll position.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        bottom\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:82\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:88\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to top.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchBottom()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:249\n                \n            \n\n\n            \n                \n                    Fetch data and appended to bottom.\nThe data is provided by fetchBottom method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchTop()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:283\n                \n            \n\n\n            \n                \n                    Fetch data and appended to top.\nThe data is provided by fetchTop method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:135\n                \n            \n\n\n            \n                \n                    Initialize stream. This method is also called in ngAfterViewInit.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveScrollPosition\n                        \n                        \n                    \n                \n            \n            \n                \nsaveScrollPosition()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:219\n                \n            \n\n\n            \n                \n                    Save current scroll position.\nScroll position is saved on memory and related to uniqId.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output, ReflectiveInjector } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   */\n  @Input()\n  public countPerLoad: number;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'NgxMugenScrollComponent', 'selector': 'lib-ngx-mugen-scroll'}];\n    var DIRECTIVES = [{'name': 'MugenScrollBottomDirective', 'selector': '[libMugenScrollBottom]'},{'name': 'MugenScrollDataDirective', 'selector': '[libMugenScrollData]'},{'name': 'MugenScrollTopDirective', 'selector': '[libMugenScrollTop]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMugenScrollComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxMugenScrollModule.html":{"url":"modules/NgxMugenScrollModule.html","title":"module - NgxMugenScrollModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxMugenScrollModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxMugenScrollComponent } from './ngx-mugen-scroll.component';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n})\nexport class NgxMugenScrollModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundResourceError.html":{"url":"classes/NotFoundResourceError.html","title":"class - NotFoundResourceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundResourceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Error\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NullLogger.html":{"url":"classes/NullLogger.html","title":"class - NullLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NullLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Logger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                info\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            info\n                        \n                        \n                    \n                \n            \n            \n                \ninfo(...msgs: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    msgs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output, ReflectiveInjector } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   */\n  @Input()\n  public countPerLoad: number;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderedDataStoreIdxService.html":{"url":"injectables/OrderedDataStoreIdxService.html","title":"injectable - OrderedDataStoreIdxService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OrderedDataStoreIdxService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                clear\n                            \n                            \n                                    Async\n                                clearAll\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Public\n                                    Async\n                                filter\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getLargerN\n                            \n                            \n                                    Async\n                                getSmallerN\n                            \n                            \n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(storeName: string, ...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear(storeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearAll()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(storeName: string, key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    key\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            fetch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(base: OrderedDataStoreIdxService, store: OrderedDataStoreIdxServiceStore, key: string, index: string, fetcher: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                OrderedDataStoreIdxService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    store\n                                    \n                                                OrderedDataStoreIdxServiceStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fetcher\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            filter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filter(storeName: string, direction: \"next\" | \"prev\", cb: (v: T,i: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:293\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    direction\n                                    \n                                            \"next\" | \"prev\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(storeName: string, query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:113\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLargerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLargerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:198\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSmallerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSmallerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:225\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(version: number, stores: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stores\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceIndex.html":{"url":"interfaces/OrderedDataStoreIdxServiceIndex.html","title":"interface - OrderedDataStoreIdxServiceIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                                \n                                        unique\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unique\n                                    \n                                \n                                \n                                    \n                                        unique:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceStore.html":{"url":"interfaces/OrderedDataStoreIdxServiceStore.html","title":"interface - OrderedDataStoreIdxServiceStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        indices\n                                \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        indices\n                                    \n                                \n                                \n                                    \n                                        indices:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollBottomEvent.html":{"url":"interfaces/ScrollBottomEvent.html","title":"interface - ScrollBottomEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollBottomEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output, ReflectiveInjector } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   */\n  @Input()\n  public countPerLoad: number;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollTopEvent.html":{"url":"interfaces/ScrollTopEvent.html","title":"interface - ScrollTopEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollTopEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output, ReflectiveInjector } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   */\n  @Input()\n  public countPerLoad: number;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^11.0.9\n        \n            @angular/core : ^11.0.9\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            initStore   (src/.../ordered-data-store-idx.service.ts)\n                        \n                        \n                            validTx   (src/.../ordered-data-store-idx.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ordered-data-store-idx.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            initStore\n                        \n                        \n                    \n                \n            \n            \n                \ninitStore(db, storeName, keyPath, indecies)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keyPath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    indecies\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validTx\n                        \n                        \n                    \n                \n            \n            \n                \nvalidTx(db, storeName, mode?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IDBTransaction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nThe infinite scroll library for AngularJS\nNgxMugenScroll\nThis library was generated with Angular CLI version 11.0.9.\n\nAPI references\nlive demo1\n\nSet up\nYou need to import NgxMugenScrollModule.\nimport { NgxMugenScrollModule } from 'ngx-mugen-scroll';\n...\n@NgModule({\n  imports: [\n      ...\n    NgxMugenScrollModule,\n      ...\n  ],Usage\nOverview\nComponent\nThis library provides NgxMugenScrollComponent that implements infinite scroll.\nNgxMugenScrollComponent has provider that provides datas displayed on the component during scrolling.\nprovider is suitable for DataProvider interface.\nScroll position is saved automatically in memory. Saved position can be loaded when stream is redisplayed.\n\n      \n      \n            {{data.index}}\n            {{data.message}}\n      \n      \nNgxMugenScrollComponent must have three children.\n\nTop component\nThe component with libMugenScrollTop attribute represents top of the NgxMugenScrollComponent.\n\n\nBottom component\nThe component with libMugenScrollBottom attribute represents bottom of the NgxMugenScrollComponent.\n\n\nData component\nThe component with libMugenScrollData attribute represents row of the stream in NgxMugenScrollComponent.\nLocal variable data is provided by provider specified in lib-ngx-mugen-scroll tag.\n\n\n\nIf autoFetchingBottom(autoFetchingTop) is set to true and top component is visible, then next data is provided by provider and appended to the bottom(top) of stream.\nProvider\nThe class implementing Provider interface provides data on the stream.\nTBD\nScroll position store feature\nTBD\nAPI\n\nreference docs\n\nExample\nSimple infinite scroll\nIn left stream, data is fetched automatically when stream is located to bottom(top).\nIn Right stream, data is not fetched automatically when stream is located to bottom(top).\nWhen use click Read more ... button, the data is fetched.\nlive demo1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright 2021 Taito Suzuki\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxMugenScrollModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
