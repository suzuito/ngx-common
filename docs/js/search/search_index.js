var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Ctx.html",[0,0.119,1,1.949]],["body/interfaces/Ctx.html",[0,0.127,1,3.825,2,1.098,3,0.366,4,0.366,5,0.366,6,1.578,7,0.588,8,2.447,9,0.672,10,1.856,11,1.424,12,2.756,13,0.865,14,0.048,15,0.488,16,1.646,17,1.236,18,3.666,19,1.578,20,3.26,21,3.26,22,0.435,23,0.846,24,1.236,25,2.076,26,0.366,27,0.24,28,1.236,29,0.813,30,2.447,31,2.397,32,2.242,33,1.558,34,1.393,35,1.308,36,1.393,37,2.447,38,0.783,39,2.076,40,1.462,41,0.509,42,1.578,43,2.447,44,2.447,45,1.018,46,2.447,47,2.447,48,2.447,49,2.447,50,1.393,51,1.754,52,2.447,53,2.625,54,2.625,55,2.447,56,2.076,57,0.813,58,3.26,59,2.447,60,1.152,61,2.447,62,1.356,63,3.91,64,3.26,65,1.152,66,1.856,67,3.26,68,3.26,69,3.26,70,3.26,71,3.26,72,3.26,73,3.26,74,2.447,75,2.447,76,2.447,77,1.299,78,2.447,79,2.447,80,0.865,81,3.26,82,3.26,83,3.26,84,0.024,85,0.032,86,0.024]],["title/classes/Cursor.html",[23,0.478,27,0.225]],["body/classes/Cursor.html",[3,0.46,4,0.46,5,0.46,9,0.844,13,1.332,14,0.047,23,0.784,26,0.46,27,0.301,29,0.784,38,1.067,40,1.691,41,0.784,56,3.462,57,0.885,60,1.571,84,0.03,85,0.037,86,0.03,87,2.606,88,3.778,89,2.431,90,4.639,91,5.234,92,5.234,93,4.639,94,3.778,95,5.019,96,1.406,97,2.487,98,3.778,99,2.147,100,1.502,101,2.147,102,2.631,103,4.639,104,3.778,105,2.323,106,3.778,107,3.778,108,3.778,109,3.778,110,3.778,111,3.778,112,3.778,113,3.778,114,3.778,115,3.778]],["title/interfaces/CursorStoreInfo.html",[0,0.119,116,1.16]],["body/interfaces/CursorStoreInfo.html",[0,0.154,2,1.329,3,0.443,4,0.443,5,0.443,9,0.814,10,2.1,13,1.485,14,0.047,15,0.552,22,0.527,23,0.963,26,0.552,27,0.291,29,0.616,31,2.711,35,1.254,38,1.084,41,0.616,45,0.926,51,1.654,57,0.835,62,0.926,84,0.029,85,0.037,86,0.029,96,1.312,116,2.122,117,2.963,118,2.963,119,4.407,120,2.257,121,4.469,122,4.407,123,1.654,124,1.687,125,1.181,126,1.687,127,1.329,128,2.963,129,2.963,130,2.963,131,3.688,132,2.963,133,2.963,134,2.963,135,2.963,136,3.688,137,2.963,138,2.963,139,2.963,140,2.963,141,2.963,142,2.963,143,2.963,144,2.963]],["title/injectables/CursorStoreService.html",[123,1.031,126,1.308]],["body/injectables/CursorStoreService.html",[0,0.141,3,0.407,4,0.407,5,0.407,9,0.748,13,1.439,14,0.047,15,0.523,22,0.484,23,0.952,26,0.523,27,0.267,29,0.566,31,2.57,35,1.316,38,1.066,41,0.803,45,0.85,51,1.827,57,0.803,62,0.85,84,0.027,85,0.035,86,0.027,89,2.254,96,1.43,97,2.399,99,2.32,100,1.623,101,2.32,105,2.32,116,2.128,117,4.312,118,2.722,119,4.214,120,2.177,121,4.312,122,4.214,123,1.568,124,1.55,125,1.085,126,1.99,127,1.221,128,2.722,129,3.495,130,2.722,131,4.312,132,2.722,133,2.722,134,2.722,135,3.495,136,3.495,137,2.722,138,2.722,139,2.722,140,2.722,141,2.722,142,3.495,143,2.722,144,3.495,145,2.309,146,2.254,147,2.57,148,2.57,149,3.349,150,3.349,151,3.349,152,3.349,153,3.349]],["title/interfaces/DataProvider.html",[0,0.119,154,1.308]],["body/interfaces/DataProvider.html",[0,0.149,2,1.293,3,0.593,4,0.431,5,0.431,6,2.821,9,0.792,10,2.064,13,1.546,14,0.047,15,0.542,23,0.97,26,0.431,38,1.088,39,3.075,40,1.293,80,1.546,84,0.029,85,0.036,86,0.029,89,2.337,96,1.238,97,2.441,99,2.441,100,1.708,101,2.441,105,2.441,116,2.101,120,2.243,154,2.064,155,3.546,156,5.118,157,2.915,158,4.459,159,4.878,160,2.915,161,3.546,162,2.821,163,3.546,164,1.79,165,4.459,166,3.546,167,3.546,168,3.546,169,3.546,170,3.546,171,4.459,172,2.556,173,3.546,174,2.119]],["title/directives/MugenScrollBottomDirective.html",[16,1.16,175,1.308]],["body/directives/MugenScrollBottomDirective.html",[3,0.514,4,0.514,5,0.514,6,2.212,7,0.824,14,0.047,15,0.514,16,2.035,17,2.035,22,0.61,24,2.035,26,0.514,27,0.337,29,0.713,32,2.035,41,0.713,57,0.713,84,0.034,85,0.04,86,0.034,175,2.295,176,2.212,177,4.221,178,2.523,179,4.03,180,2.212,181,3.431,182,2.212,183,2.212]],["title/directives/MugenScrollDataDirective.html",[16,1.16,28,1.16]],["body/directives/MugenScrollDataDirective.html",[0,0.128,1,3.804,3,0.369,4,0.369,5,0.369,6,1.591,7,0.592,8,2.467,11,1.4,12,2.632,14,0.048,15,0.491,16,1.655,17,1.246,18,3.681,19,1.591,20,3.278,21,3.278,22,0.439,23,0.849,24,1.655,25,2.781,26,0.369,27,0.242,28,1.655,29,0.815,30,2.467,31,2.41,32,2.245,33,1.563,34,1.405,35,1.311,36,1.405,37,2.467,38,0.787,39,2.093,40,1.47,41,0.513,42,1.591,43,2.467,44,2.467,45,1.024,46,2.467,47,2.467,48,2.467,49,2.467,50,1.405,51,1.759,52,2.467,53,2.632,54,2.632,55,2.467,56,2.093,57,0.815,58,3.278,59,2.467,60,1.158,61,2.467,62,1.359,63,3.922,64,3.278,65,1.158,66,1.867,67,3.278,68,3.278,69,3.278,70,3.278,71,3.278,72,3.278,73,3.278,74,2.467,75,2.467,76,2.467,77,1.306,78,2.467,79,2.467,80,0.872,81,3.278,82,3.278,83,3.278,84,0.024,85,0.032,86,0.024,176,1.591,178,1.814]],["title/directives/MugenScrollTopDirective.html",[16,1.16,184,1.308]],["body/directives/MugenScrollTopDirective.html",[3,0.514,4,0.514,5,0.514,6,2.212,7,0.824,14,0.047,15,0.514,16,2.035,17,2.035,22,0.61,24,2.035,26,0.514,27,0.337,29,0.713,32,2.035,41,0.713,57,0.713,84,0.034,85,0.04,86,0.034,176,2.212,178,2.523,180,2.212,181,3.431,182,2.212,183,2.212,184,2.295,185,4.221,186,3.419]],["title/components/NgxMugenScrollComponent.html",[187,1.308,188,1.308]],["body/components/NgxMugenScrollComponent.html",[0,0.11,3,0.203,4,0.203,5,0.203,7,1.016,9,0.372,11,1.341,12,0.873,13,1.338,14,0.048,15,0.509,17,1.071,19,2.374,22,0.241,23,0.441,24,1.719,26,0.391,27,0.133,28,1.319,29,0.74,32,1.319,33,1.509,34,2.248,35,1.446,36,2.156,38,0.71,41,0.281,42,1.367,45,1.349,50,0.771,51,1.596,53,0.873,54,0.873,57,0.805,60,0.478,62,1.063,65,1.134,77,0.845,80,1.301,84,0.013,85,0.021,86,0.013,89,1.367,96,0.662,97,2.316,100,1.041,102,1.367,105,1.684,116,1.071,125,0.54,126,1.488,147,0.995,148,2.173,154,1.488,157,2.502,160,2.502,164,1.279,174,0.995,175,1.488,176,0.873,178,0.995,180,1.367,182,0.873,183,1.906,184,1.488,186,1.149,187,1.207,188,1.684,189,2.608,190,3.026,191,1.731,192,1.149,193,0.951,194,2.217,195,2.217,196,1.921,197,1.041,198,1.797,199,2.173,200,2.508,201,2.608,202,2.217,203,2.217,204,2.217,205,2.217,206,2.902,207,2.217,208,2.723,209,2.608,210,1.666,211,2.707,212,2.502,213,2.502,214,3.124,215,1.666,216,1.666,217,2.707,218,1.559,219,1.666,220,1.799,221,1.666,222,2.707,223,1.666,224,1.559,225,1.799,226,1.666,227,1.071,228,2.508,229,1.799,230,3.018,231,1.666,232,1.326,233,2.508,234,1.666,235,1.666,236,1.493,237,2.173,238,1.906,239,2.888,240,1.666,241,1.666,242,1.799,243,1.799,244,2.217,245,1.666,246,1.493,247,1.559,248,1.559,249,1.799,250,1.149,251,2.217,252,0.995,253,0.995,254,0.995,255,0.995,256,0.995,257,1.149,258,1.149,259,1.149,260,1.149,261,1.149,262,1.149,263,1.149,264,2.217,265,1.149,266,1.799,267,1.621,268,2.508,269,1.149,270,1.799,271,1.799,272,1.799,273,1.149,274,1.149,275,1.149,276,2.217,277,1.799,278,2.078,279,1.799,280,3.618,281,3.618,282,1.799,283,1.799,284,3.018,285,2.888,286,2.723,287,2.508,288,1.149,289,1.149,290,1.149,291,1.149,292,2.217,293,1.149,294,1.149,295,1.149,296,1.799,297,1.149,298,1.799,299,1.149,300,1.149,301,1.149,302,1.149,303,1.149,304,1.149,305,1.149,306,1.149,307,1.149,308,1.149,309,1.149,310,1.149,311,1.149,312,2.217,313,1.149,314,1.149,315,1.149,316,1.149,317,1.149,318,1.149,319,2.508,320,1.149,321,1.799,322,1.149,323,1.149,324,1.149,325,1.799,326,1.799,327,1.149,328,1.071,329,1.149,330,1.149,331,1.149,332,1.149,333,1.149,334,1.149,335,1.149,336,1.149,337,1.149,338,1.149,339,3.637,340,1.666,341,1.666,342,1.666,343,1.666]],["title/modules/NgxMugenScrollModule.html",[344,2.298,345,1.689]],["body/modules/NgxMugenScrollModule.html",[3,0.491,4,0.491,5,0.491,7,1.008,14,0.047,15,0.666,22,0.584,26,0.491,27,0.322,28,2.246,84,0.033,85,0.039,86,0.033,175,2.533,184,2.533,188,2.533,190,2.413,191,1.772,197,1.308,252,2.413,253,2.413,254,2.413,345,2.886,346,2.784,347,4.037,348,4.829,349,4.829,350,3.925,351,4.037,352,3.282]],["title/classes/NotFoundResourceError.html",[27,0.225,353,1.481]],["body/classes/NotFoundResourceError.html",[0,0.11,3,0.204,4,0.204,5,0.204,7,0.327,9,0.98,10,1.213,11,1.235,13,0.927,14,0.048,15,0.319,22,0.242,23,0.767,26,0.444,27,0.209,29,0.669,33,1.045,35,0.82,38,0.856,40,0.611,41,0.443,45,1.235,57,0.888,60,1.397,62,1.42,65,0.753,66,1.833,77,1.045,80,1.048,84,0.026,85,0.021,86,0.013,87,1.156,96,1.408,97,1.494,99,0.776,100,1.36,101,0.776,120,1.801,123,0.956,124,0.776,125,0.543,127,1.802,146,0.879,162,2.201,164,1.623,172,1.692,191,0.543,193,0.956,197,0.543,198,2.029,227,1.076,232,1.928,236,0.688,246,1.325,267,1.076,278,1.325,328,1.724,353,1.374,354,1.913,355,0.879,356,1.566,357,2.181,358,2.622,359,1.677,360,2.621,361,1.677,362,1.002,363,1.002,364,1.002,365,0.879,366,1.913,367,1.374,368,1.002,369,1.374,370,1.002,371,1.002,372,2.626,373,2.509,374,1.002,375,1.002,376,1.002,377,1.002,378,1.002,379,1.002,380,2.181,381,1.566,382,1.002,383,1.929,384,1.929,385,1.566,386,1.929,387,1.002,388,1.002,389,1.002,390,1.002,391,1.002,392,2.367,393,1.002,394,1.002,395,1.002,396,2.509,397,2.852,398,1.002,399,1.002,400,0.879,401,1.002,402,3.16,403,2.367,404,1.929,405,2.509,406,1.002,407,1.566,408,1.002,409,1.002,410,1.002,411,1.002,412,1.002,413,1.566,414,2.622,415,1.002,416,1.002,417,1.002,418,2.622,419,2.789,420,2.299,421,2.771,422,2.181,423,1.002,424,1.002,425,1.002,426,1.566,427,1.566,428,1.566,429,1.566,430,1.929,431,1.929,432,2.181,433,2.367,434,1.566,435,1.002,436,2.367,437,1.002,438,2.367,439,1.002,440,1.002,441,1.566,442,1.002,443,1.002,444,1.002,445,1.002,446,1.002,447,1.002,448,1.002,449,1.002,450,1.002,451,1.002,452,1.002,453,1.002,454,2.367,455,2.181,456,2.622,457,1.002,458,1.566,459,2.181,460,1.566,461,1.566,462,2.076,463,1.002,464,1.002,465,1.929,466,1.002,467,2.509,468,1.002,469,1.002,470,1.002,471,1.002,472,1.002,473,1.002,474,1.566,475,1.566,476,1.002,477,1.002,478,1.002,479,1.929,480,1.002,481,1.002,482,1.002,483,1.002,484,1.002,485,1.002,486,1.002,487,1.002,488,1.002,489,1.002,490,1.002,491,1.002,492,1.002,493,1.002,494,1.566,495,0.879,496,0.879,497,1.002,498,1.002,499,1.002,500,1.002,501,1.002,502,1.002,503,1.002,504,1.002,505,1.002,506,1.002,507,1.374,508,1.002,509,0.879,510,1.002,511,1.002,512,1.002]],["title/injectables/OrderedDataStoreIdxService.html",[123,1.031,369,1.481]],["body/injectables/OrderedDataStoreIdxService.html",[0,0.093,3,0.165,4,0.165,5,0.165,7,0.265,9,1.062,11,1.292,13,1.405,14,0.048,15,0.27,22,0.196,23,0.836,26,0.394,27,0.177,29,0.603,33,0.909,35,0.712,38,0.985,40,0.808,41,0.474,45,1.163,50,1.026,51,0.808,57,0.853,60,1.405,62,1.389,65,0.636,66,1.651,77,0.909,80,1.208,84,0.023,85,0.018,86,0.011,89,1.161,96,1.439,97,2.121,99,2.264,100,1.514,101,2.014,105,2.071,120,1.88,123,0.808,124,0.629,125,0.44,127,1.895,145,0.937,146,1.471,162,2.345,164,1.693,172,2.281,191,0.44,193,0.495,197,0.44,198,2.227,199,1.324,227,0.91,232,1.856,236,1.152,246,1.656,267,1.329,278,1.152,328,1.57,353,0.712,354,2.449,355,0.712,356,0.812,357,0.812,358,2.131,362,0.812,363,0.812,364,0.812,365,0.712,366,1.697,367,1.697,368,0.812,369,1.869,370,0.812,371,0.812,372,2.492,373,2.286,374,0.812,375,0.812,376,0.812,377,0.812,378,1.677,379,1.324,380,2.514,381,1.935,382,0.812,383,1.677,384,1.677,385,1.324,386,1.677,387,0.812,388,0.812,389,0.812,390,0.812,391,0.812,392,2.131,393,0.812,394,1.324,395,1.677,396,2.286,397,2.674,398,0.812,399,0.812,400,1.161,401,0.812,402,3.041,403,2.131,404,1.677,405,2.286,406,0.812,407,1.324,408,0.812,409,0.812,410,0.812,411,0.812,412,0.812,413,1.324,414,2.411,415,0.812,416,1.324,417,1.677,418,2.411,419,2.601,420,2.114,421,2.782,422,1.935,423,0.812,424,0.812,425,1.677,426,2.286,427,2.286,428,2.286,429,2.286,430,2.411,431,1.677,432,1.935,433,2.738,434,1.324,435,0.812,436,2.131,437,0.812,438,2.131,439,0.812,440,0.812,441,1.324,442,0.812,443,0.812,444,0.812,445,0.812,446,0.812,447,0.812,448,0.812,449,1.324,450,0.812,451,1.935,452,0.812,453,0.812,454,2.601,455,2.514,456,2.411,457,0.812,458,1.324,459,1.935,460,1.324,461,1.324,462,2.114,463,1.677,464,0.812,465,2.131,466,0.812,467,2.514,468,0.812,469,0.812,470,0.812,471,0.812,472,0.812,473,0.812,474,1.324,475,1.324,476,0.812,477,0.812,478,0.812,479,1.677,480,0.812,481,0.812,482,0.812,483,1.677,484,1.677,485,0.812,486,0.812,487,0.812,488,0.812,489,0.812,490,0.812,491,0.812,492,0.812,493,0.812,494,1.935,495,0.712,496,0.712,497,0.812,498,0.812,499,0.812,500,0.812,501,0.812,502,0.812,503,0.812,504,0.812,505,0.812,506,0.812,507,1.161,508,0.812,509,0.712,510,0.812,511,0.812,512,0.812,513,2.216,514,2.216,515,1.358,516,1.358,517,1.358,518,1.358,519,1.358,520,1.358,521,3.237,522,3.237,523,1.358,524,1.358,525,1.358,526,1.358,527,1.358,528,1.358,529,1.358,530,1.358,531,1.358,532,1.358,533,1.358,534,1.358]],["title/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.119,365,1.481]],["body/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.111,2,0.618,3,0.206,4,0.206,5,0.206,7,0.331,9,0.984,10,1.223,11,1.157,13,0.933,14,0.048,15,0.322,22,0.245,23,0.77,26,0.447,27,0.211,29,0.673,33,0.549,35,0.825,38,0.86,40,0.618,41,0.286,45,1.238,57,0.889,60,1.443,62,1.422,65,0.759,66,1.842,77,1.052,80,1.211,84,0.026,85,0.021,86,0.014,96,1.409,100,1.366,120,1.808,123,0.964,124,0.784,125,0.549,127,1.707,146,0.888,162,2.21,164,1.627,172,1.703,191,0.549,193,0.618,197,0.549,198,2.034,227,1.634,232,1.931,236,0.695,246,1.334,267,1.085,278,1.334,328,1.731,353,0.888,354,0.888,355,0.888,356,1.012,357,1.012,358,2.378,362,1.012,363,1.012,364,1.012,365,1.385,366,2.308,367,1.385,368,1.012,369,1.385,370,1.012,371,1.012,372,2.632,373,2.52,374,1.012,375,1.012,376,1.012,377,1.012,378,1.012,379,1.012,380,2.193,381,1.579,382,1.012,383,1.942,384,1.942,385,1.579,386,1.942,387,1.012,388,1.012,389,1.012,390,1.012,391,1.012,392,2.378,393,1.012,394,1.012,395,1.012,396,2.52,397,2.861,398,1.012,399,1.012,400,0.888,401,1.012,402,3.165,403,2.378,404,1.942,405,2.52,406,1.012,407,1.579,408,1.012,409,1.012,410,1.012,411,1.012,412,1.012,413,1.579,414,2.632,415,1.012,416,1.012,417,1.012,418,2.632,419,2.798,420,2.308,421,2.776,422,2.193,423,1.012,424,1.012,425,1.012,426,1.579,427,1.579,428,1.579,429,1.579,430,1.942,431,1.942,432,2.193,433,2.378,434,1.579,435,1.012,436,2.378,437,1.012,438,2.378,439,1.012,440,1.012,441,1.579,442,1.012,443,1.012,444,1.012,445,1.012,446,1.012,447,1.012,448,1.012,449,1.012,450,1.012,451,1.012,452,1.012,453,1.012,454,2.378,455,2.193,456,2.632,457,1.012,458,1.579,459,2.193,460,1.579,461,1.579,462,2.086,463,1.012,464,1.012,465,1.942,466,1.012,467,2.52,468,1.012,469,1.012,470,1.012,471,1.012,472,1.012,473,1.012,474,1.579,475,1.579,476,1.012,477,1.012,478,1.012,479,1.942,480,1.012,481,1.012,482,1.012,483,1.012,484,1.012,485,1.012,486,1.012,487,1.012,488,1.012,489,1.012,490,1.012,491,1.012,492,1.012,493,1.012,494,1.579,495,0.888,496,0.888,497,1.012,498,1.012,499,1.012,500,1.012,501,1.012,502,1.012,503,1.012,504,1.012,505,1.012,506,1.012,507,1.385,508,1.012,509,0.888,510,1.012,511,1.012,512,1.012]],["title/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.119,367,1.481]],["body/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.111,2,0.618,3,0.206,4,0.206,5,0.206,7,0.331,9,0.984,10,1.223,11,1.157,13,0.933,14,0.048,15,0.322,22,0.245,23,0.77,26,0.447,27,0.211,29,0.673,33,0.549,35,0.825,38,0.86,40,0.618,41,0.286,45,1.238,57,0.889,60,1.475,62,1.422,65,0.759,66,1.842,77,1.052,80,1.054,84,0.026,85,0.021,86,0.014,96,1.409,100,1.366,120,1.808,123,0.964,124,0.784,125,0.549,127,1.707,146,0.888,162,2.21,164,1.627,172,1.703,191,0.549,193,0.618,197,0.549,198,2.034,227,1.085,232,1.931,236,0.695,246,1.334,267,1.085,278,1.334,328,1.731,353,0.888,354,0.888,355,0.888,356,1.012,357,1.012,358,2.378,362,1.012,363,1.012,364,1.012,365,0.888,366,2.308,367,1.703,368,2.193,369,1.385,370,1.012,371,1.012,372,2.632,373,2.52,374,1.012,375,1.012,376,1.012,377,1.012,378,1.012,379,1.012,380,2.193,381,1.579,382,1.012,383,1.942,384,1.942,385,1.579,386,1.942,387,1.012,388,1.012,389,1.012,390,1.012,391,1.012,392,2.378,393,1.012,394,1.012,395,1.012,396,2.52,397,2.861,398,1.012,399,1.012,400,0.888,401,1.012,402,3.165,403,2.378,404,1.942,405,2.52,406,1.012,407,1.579,408,1.012,409,1.012,410,1.012,411,1.012,412,1.012,413,1.579,414,2.632,415,1.012,416,1.012,417,1.012,418,2.632,419,2.798,420,2.308,421,2.776,422,2.193,423,1.012,424,1.012,425,1.012,426,1.579,427,1.579,428,1.579,429,1.579,430,1.942,431,1.942,432,2.193,433,2.378,434,1.579,435,1.012,436,2.378,437,1.012,438,2.378,439,1.012,440,1.012,441,1.579,442,1.012,443,1.012,444,1.012,445,1.012,446,1.012,447,1.012,448,1.012,449,1.012,450,1.012,451,1.012,452,1.012,453,1.012,454,2.378,455,2.193,456,2.632,457,1.012,458,1.579,459,2.193,460,1.579,461,1.579,462,2.086,463,1.012,464,1.012,465,1.942,466,1.012,467,2.52,468,1.012,469,1.012,470,1.012,471,1.012,472,1.012,473,1.012,474,1.579,475,1.579,476,1.012,477,1.012,478,1.012,479,1.942,480,1.012,481,1.012,482,1.012,483,1.012,484,1.012,485,1.012,486,1.012,487,1.012,488,1.012,489,1.012,490,1.012,491,1.012,492,1.012,493,1.012,494,1.579,495,0.888,496,0.888,497,1.012,498,1.012,499,1.012,500,1.012,501,1.012,502,1.012,503,1.012,504,1.012,505,1.012,506,1.012,507,1.385,508,1.012,509,0.888,510,1.012,511,1.012,512,1.012]],["title/interfaces/ScrollBottomEvent.html",[0,0.119,255,1.689]],["body/interfaces/ScrollBottomEvent.html",[0,0.126,2,0.728,3,0.243,4,0.243,5,0.243,7,0.976,11,1.27,12,1.047,14,0.048,15,0.547,17,1.23,19,2.516,22,0.289,23,0.507,24,0.82,26,0.438,27,0.159,28,1.23,29,0.789,32,1.477,33,1.59,34,1.984,35,1.462,36,1.851,38,0.585,41,0.337,42,1.047,45,1.379,50,0.924,51,1.563,53,1.047,54,1.047,57,0.845,60,0.574,62,1.143,65,1.231,77,0.971,80,1.149,84,0.016,85,0.024,86,0.016,96,0.507,102,1.571,116,1.23,125,0.647,126,1.665,147,1.193,148,1.791,154,1.387,157,1.791,160,1.791,164,1.165,174,1.193,175,1.387,180,1.571,182,1.047,183,2.096,184,1.387,187,1.387,188,0.924,190,1.193,191,1.458,192,1.377,193,0.728,194,2.067,195,2.067,196,1.193,197,0.647,198,1.477,199,1.193,200,1.377,202,1.377,203,1.377,204,1.377,205,1.377,206,2.561,207,1.377,208,2.067,211,2.39,212,2.15,213,2.15,214,2.758,217,2.39,218,1.193,220,1.377,222,2.39,224,1.193,225,1.377,227,0.82,228,2.067,229,1.377,230,2.955,232,1.093,233,2.067,236,1.23,237,1.791,238,1.571,239,2.481,242,1.377,243,1.377,244,2.067,246,1.477,247,1.193,248,1.193,249,1.377,250,1.377,251,2.481,252,1.193,253,1.193,254,1.193,255,1.791,256,1.193,257,1.377,258,1.377,259,1.377,260,1.377,261,1.377,262,1.377,263,1.377,264,2.481,265,1.377,266,2.067,267,1.759,268,2.758,269,1.377,270,2.067,271,2.067,272,2.067,273,1.377,274,1.377,275,1.377,276,2.481,277,2.067,278,2.156,279,2.067,280,3.726,281,3.726,282,2.067,283,2.067,284,3.219,285,3.104,286,2.955,287,2.758,288,1.377,289,1.377,290,1.377,291,1.377,292,2.481,293,1.377,294,1.377,295,1.377,296,2.067,297,1.377,298,2.067,299,1.377,300,1.377,301,1.377,302,1.377,303,1.377,304,1.377,305,1.377,306,1.377,307,1.377,308,1.377,309,1.377,310,1.377,311,1.377,312,2.481,313,1.377,314,1.377,315,1.377,316,1.377,317,1.377,318,1.377,319,2.758,320,1.377,321,2.067,322,1.377,323,1.377,324,1.377,325,2.067,326,2.067,327,1.377,328,1.23,329,1.377,330,1.377,331,1.377,332,1.377,333,1.377,334,1.377,335,1.377,336,1.377,337,1.377,338,1.377]],["title/interfaces/ScrollTopEvent.html",[0,0.119,256,1.689]],["body/interfaces/ScrollTopEvent.html",[0,0.126,2,0.728,3,0.243,4,0.243,5,0.243,7,0.976,11,1.27,12,1.047,14,0.048,15,0.547,17,1.23,19,2.516,22,0.289,23,0.507,24,0.82,26,0.438,27,0.159,28,1.23,29,0.789,32,1.477,33,1.59,34,1.984,35,1.462,36,1.851,38,0.585,41,0.337,42,1.047,45,1.379,50,0.924,51,1.563,53,1.047,54,1.047,57,0.845,60,0.574,62,1.143,65,1.231,77,0.971,80,1.149,84,0.016,85,0.024,86,0.016,96,0.507,102,1.571,116,1.23,125,0.647,126,1.665,147,1.193,148,1.791,154,1.387,157,1.791,160,1.791,164,1.165,174,1.193,175,1.387,180,1.571,182,1.047,183,2.096,184,1.387,187,1.387,188,0.924,190,1.193,191,1.458,192,1.377,193,0.728,194,2.067,195,2.067,196,1.193,197,0.647,198,1.477,199,1.193,200,1.377,202,1.377,203,1.377,204,1.377,205,1.377,206,2.561,207,1.377,208,2.067,211,2.39,212,2.15,213,2.15,214,2.758,217,2.39,218,1.193,220,1.377,222,2.39,224,1.193,225,1.377,227,0.82,228,2.067,229,1.377,230,2.955,232,1.093,233,2.067,236,1.23,237,1.791,238,1.571,239,2.481,242,1.377,243,1.377,244,2.067,246,1.477,247,1.193,248,1.193,249,1.377,250,1.377,251,2.481,252,1.193,253,1.193,254,1.193,255,1.193,256,1.791,257,1.377,258,1.377,259,1.377,260,1.377,261,1.377,262,1.377,263,1.377,264,2.481,265,1.377,266,2.067,267,1.759,268,2.758,269,1.377,270,2.067,271,2.067,272,2.067,273,1.377,274,1.377,275,1.377,276,2.481,277,2.067,278,2.156,279,2.067,280,3.726,281,3.726,282,2.067,283,2.067,284,3.219,285,3.104,286,2.955,287,2.758,288,1.377,289,1.377,290,1.377,291,1.377,292,2.481,293,1.377,294,1.377,295,1.377,296,2.067,297,1.377,298,2.067,299,1.377,300,1.377,301,1.377,302,1.377,303,1.377,304,1.377,305,1.377,306,1.377,307,1.377,308,1.377,309,1.377,310,1.377,311,1.377,312,2.481,313,1.377,314,1.377,315,1.377,316,1.377,317,1.377,318,1.377,319,2.758,320,1.377,321,2.067,322,1.377,323,1.377,324,1.377,325,2.067,326,2.067,327,1.377,328,1.23,329,1.377,330,1.377,331,1.377,332,1.377,333,1.377,334,1.377,335,1.377,336,1.377,337,1.377,338,1.377]],["title/dependencies.html",[535,2.367,536,2.76]],["body/dependencies.html",[14,0.045,22,0.647,84,0.036,85,0.041,86,0.036,536,4.17,537,4.476,538,4.476,539,4.476,540,4.476,541,4.17]],["title/miscellaneous/functions.html",[542,1.924,543,2.76]],["body/miscellaneous/functions.html",[9,0.941,11,1.336,14,0.045,84,0.034,85,0.04,86,0.034,99,2.293,100,1.604,101,2.293,105,2.293,127,1.918,164,1.365,354,2.209,355,2.757,366,2.596,372,2.596,420,2.209,421,2.845,495,2.596,496,2.596,507,2.596,509,2.209,542,3.426,543,3.426,544,4.953,545,4.953,546,4.214,547,4.214]],["title/index.html",[9,0.529,548,1.924,549,1.924]],["body/index.html",[0,0.188,7,1.066,11,1.387,14,0.045,15,0.542,25,2.439,27,0.282,34,2.06,36,2.255,65,1.016,84,0.028,85,0.036,86,0.028,102,1.853,127,1.289,154,1.637,179,2.874,186,2.439,187,2.58,188,2.49,191,1.442,193,1.289,196,2.113,197,1.442,206,3.215,212,2.911,213,2.911,217,2.911,218,2.113,222,3.301,224,2.113,237,2.113,238,2.333,247,2.66,248,2.113,345,2.911,350,2.874,352,2.874,400,1.853,462,1.853,541,2.874,550,4.872,551,4.872,552,3.536,553,3.536,554,3.536,555,3.536,556,3.536,557,4.451,558,3.536,559,4.451,560,4.451,561,4.451,562,3.536,563,3.536,564,3.536,565,2.439,566,4.872,567,3.536,568,3.536,569,3.536,570,3.536,571,3.536,572,3.536,573,3.536,574,3.536,575,4.872,576,4.872,577,3.536,578,3.536,579,3.536,580,3.536,581,3.536,582,3.536,583,3.536,584,4.872,585,3.536,586,4.451,587,3.536,588,3.536,589,3.536,590,3.536,591,3.536,592,3.536,593,4.451,594,3.536,595,2.874,596,3.536,597,3.536,598,3.536,599,3.536]],["title/license.html",[548,1.924,549,1.924,600,2.367]],["body/license.html",[14,0.038,84,0.032,85,0.038,86,0.032,211,2.357,232,1.438,238,2.067,595,3.871,601,5.115,602,3.945,603,3.945,604,3.945,605,4.762,606,3.945,607,3.945,608,3.945,609,3.945,610,3.945,611,3.945,612,4.762,613,5.677,614,3.945,615,3.945,616,3.945,617,3.945,618,5.115,619,3.945,620,4.762,621,3.945,622,3.945,623,3.945,624,3.945,625,3.945,626,3.945,627,3.945,628,3.945,629,3.945,630,4.762,631,3.945,632,3.945,633,3.945,634,3.945,635,3.945,636,3.945,637,3.945,638,4.762,639,4.762,640,3.945,641,3.945,642,3.945,643,3.945,644,3.945,645,3.945,646,3.945,647,3.945,648,3.945,649,3.945,650,3.945,651,3.945,652,3.945,653,3.945,654,3.945,655,3.945,656,3.945,657,3.945,658,3.945,659,3.945,660,3.945,661,3.945,662,3.945,663,3.945,664,3.945,665,3.945,666,3.945,667,3.945]],["title/modules.html",[346,2.651]],["body/modules.html",[14,0.042,84,0.037,85,0.042,86,0.037,345,2.717,346,3.136,668,4.547]],["title/overview.html",[565,2.651]],["body/overview.html",[2,1.629,14,0.041,84,0.036,85,0.041,86,0.036,87,3.082,145,3.082,176,2.342,187,2.069,344,3.633,565,3.082,669,5.125,670,4.469,671,5.125,672,4.469]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":77,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["0px",{"_index":305,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["1",{"_index":669,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":307,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["100",{"_index":47,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["11.0.9",{"_index":541,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":671,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":602,"title":{},"body":{"license.html":{}}}],["3",{"_index":670,"title":{},"body":{"overview.html":{}}}],["50",{"_index":269,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["7",{"_index":672,"title":{},"body":{"overview.html":{}}}],["above",{"_index":637,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":93,"title":{},"body":{"classes/Cursor.html":{}}}],["action",{"_index":660,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":343,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["add",{"_index":513,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["add(storename",{"_index":416,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["afterviewinit",{"_index":195,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["and/or",{"_index":628,"title":{},"body":{"license.html":{}}}],["angular",{"_index":555,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":22,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{}}}],["angularjs",{"_index":552,"title":{},"body":{"index.html":{}}}],["any).result",{"_index":404,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["api",{"_index":557,"title":{},"body":{"index.html":{}}}],["appended",{"_index":237,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["args",{"_index":417,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["args.foreach((arg",{"_index":423,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arising",{"_index":664,"title":{},"body":{"license.html":{}}}],["arrange(deleteattop",{"_index":79,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["array",{"_index":60,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["array).foreach((v",{"_index":490,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybuffer",{"_index":428,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybufferview",{"_index":427,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["associated",{"_index":614,"title":{},"body":{"license.html":{}}}],["async",{"_index":198,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["attached",{"_index":72,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["attribute",{"_index":575,"title":{},"body":{"index.html":{}}}],["authors",{"_index":654,"title":{},"body":{"license.html":{}}}],["autofetchingbottom",{"_index":202,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autofetchingbottom(autofetchingtop",{"_index":582,"title":{},"body":{"index.html":{}}}],["autofetchingtop",{"_index":203,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autoloadscrollposition",{"_index":204,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["automatically",{"_index":213,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["await",{"_index":328,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["base",{"_index":379,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.add",{"_index":390,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.get",{"_index":382,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["boolean",{"_index":80,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom",{"_index":34,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["bottom(top",{"_index":584,"title":{},"body":{"index.html":{}}}],["bottom.directive",{"_index":253,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom.directive.ts",{"_index":177,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{}}}],["bottomcursor",{"_index":119,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomcursor.tostring",{"_index":132,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomdirective",{"_index":259,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["browse",{"_index":668,"title":{},"body":{"modules.html":{}}}],["button",{"_index":599,"title":{},"body":{"index.html":{}}}],["called",{"_index":243,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cb",{"_index":484,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cb(v",{"_index":491,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["charge",{"_index":609,"title":{},"body":{"license.html":{}}}],["children",{"_index":574,"title":{},"body":{"index.html":{}}}],["claim",{"_index":657,"title":{},"body":{"license.html":{}}}],["class",{"_index":27,"title":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["classes",{"_index":87,"title":{},"body":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"overview.html":{}}}],["clear",{"_index":50,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["clear(storename",{"_index":449,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["clearall",{"_index":451,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cli",{"_index":556,"title":{},"body":{"index.html":{}}}],["click",{"_index":596,"title":{},"body":{"index.html":{}}}],["component",{"_index":187,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":340,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["components",{"_index":189,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["conditions",{"_index":636,"title":{},"body":{"license.html":{}}}],["connection",{"_index":666,"title":{},"body":{"license.html":{}}}],["console.error('mugenscrolldatadirective",{"_index":318,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.bottom",{"_index":322,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.top",{"_index":320,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('provider",{"_index":317,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error(ev",{"_index":413,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`fetch",{"_index":384,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`filter",{"_index":485,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`from",{"_index":470,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`load",{"_index":137,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["console.log(`save",{"_index":130,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["const",{"_index":62,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor",{"_index":41,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor(datas",{"_index":94,"title":{},"body":{"classes/Cursor.html":{}}}],["constructor(message",{"_index":359,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["constructor(public",{"_index":362,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["content",{"_index":281,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild",{"_index":250,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrollbottomdirective",{"_index":258,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolldatadirective",{"_index":262,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolltopdirective",{"_index":260,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contract",{"_index":661,"title":{},"body":{"license.html":{}}}],["copies",{"_index":630,"title":{},"body":{"license.html":{}}}],["copy",{"_index":612,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":601,"title":{},"body":{"license.html":{}}}],["countperload",{"_index":205,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ctx",{"_index":1,"title":{"interfaces/Ctx.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["ctx.data",{"_index":83,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["current",{"_index":246,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["current.getitems",{"_index":459,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["current.tostring",{"_index":469,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursor",{"_index":23,"title":{"classes/Cursor.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursor([v.tostring",{"_index":49,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["cursor.continue",{"_index":482,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursorstoreinfo",{"_index":116,"title":{"interfaces/CursorStoreInfo.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreinfo.scrolltop",{"_index":314,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreservice",{"_index":126,"title":{"injectables/CursorStoreService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["damages",{"_index":658,"title":{},"body":{"license.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data.directive",{"_index":254,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["data.directive.ts",{"_index":8,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["data.index",{"_index":571,"title":{},"body":{"index.html":{}}}],["data.message",{"_index":572,"title":{},"body":{"index.html":{}}}],["datadirective",{"_index":263,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["dataprovider",{"_index":154,"title":{"interfaces/DataProvider.html":{}},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas",{"_index":102,"title":{},"body":{"classes/Cursor.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas.foreach(data",{"_index":61,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datas.map(v",{"_index":111,"title":{},"body":{"classes/Cursor.html":{}}}],["datas.reverse().foreach(data",{"_index":76,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datasmap",{"_index":30,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["date",{"_index":426,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db",{"_index":372,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["db.createobjectstore",{"_index":498,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames",{"_index":453,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames.contains(storename",{"_index":497,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.transaction(storename",{"_index":510,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["dbname",{"_index":374,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["deal",{"_index":617,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":667,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":348,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["default",{"_index":521,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["defined",{"_index":97,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["delete",{"_index":146,"title":{},"body":{"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["delete(p",{"_index":142,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["delete(storename",{"_index":519,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["delimiter",{"_index":95,"title":{},"body":{"classes/Cursor.html":{}}}],["demo1",{"_index":560,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":536,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["direction",{"_index":467,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["directive",{"_index":16,"title":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["directives",{"_index":176,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"overview.html":{}}}],["displayed",{"_index":224,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["distribute",{"_index":626,"title":{},"body":{"license.html":{}}}],["docs",{"_index":589,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":615,"title":{},"body":{"license.html":{}}}],["during",{"_index":567,"title":{},"body":{"index.html":{}}}],["el",{"_index":180,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["element",{"_index":181,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["elementref",{"_index":17,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["embeddedviewref",{"_index":18,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["emitted",{"_index":233,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["end",{"_index":455,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["end.getitems",{"_index":460,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["entities",{"_index":294,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entities.foreach(entity",{"_index":295,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.isintersecting",{"_index":298,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.target",{"_index":296,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["eof",{"_index":478,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error",{"_index":356,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('db",{"_index":393,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('mugenscrollbottomdirective",{"_index":279,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolldatadirective",{"_index":285,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolltopdirective",{"_index":283,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('provider",{"_index":287,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error(`cannot",{"_index":511,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev",{"_index":402,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev.target",{"_index":403,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["event",{"_index":232,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["eventemitter",{"_index":230,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["example",{"_index":590,"title":{},"body":{"index.html":{}}}],["export",{"_index":26,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["exports",{"_index":349,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["express",{"_index":645,"title":{},"body":{"license.html":{}}}],["false",{"_index":267,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["feature",{"_index":587,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":236,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetch(base",{"_index":523,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["fetchbottom",{"_index":157,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchbottom(cursor",{"_index":161,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetched",{"_index":212,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["fetcher",{"_index":381,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fetchoninit",{"_index":158,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchoninit(n",{"_index":165,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload",{"_index":159,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload(info",{"_index":167,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchtop",{"_index":160,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchtop(cursor",{"_index":169,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["files",{"_index":616,"title":{},"body":{"license.html":{}}}],["filter",{"_index":483,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["filter(storename",{"_index":525,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["find",{"_index":388,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fitness",{"_index":650,"title":{},"body":{"license.html":{}}}],["following",{"_index":635,"title":{},"body":{"license.html":{}}}],["free",{"_index":608,"title":{},"body":{"license.html":{}}}],["function",{"_index":494,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["functions",{"_index":543,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":633,"title":{},"body":{"license.html":{}}}],["generated",{"_index":554,"title":{},"body":{"index.html":{}}}],["get(p",{"_index":144,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["get(storename",{"_index":528,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getitem",{"_index":90,"title":{},"body":{"classes/Cursor.html":{}}}],["getitem(i",{"_index":103,"title":{},"body":{"classes/Cursor.html":{}}}],["getitems",{"_index":91,"title":{},"body":{"classes/Cursor.html":{}}}],["getlargern",{"_index":514,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlargern(storename",{"_index":530,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlength",{"_index":108,"title":{},"body":{"classes/Cursor.html":{}}}],["getsmallern",{"_index":463,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["getsmallern(storename",{"_index":532,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getting",{"_index":548,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":607,"title":{},"body":{"license.html":{}}}],["hereby",{"_index":606,"title":{},"body":{"license.html":{}}}],["holders",{"_index":655,"title":{},"body":{"license.html":{}}}],["htmlelement",{"_index":182,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scroll(0",{"_index":313,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scrolltop",{"_index":327,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["i.bottomcursor.tostring",{"_index":138,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.n",{"_index":140,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.scrolltop",{"_index":141,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.topcursor.tostring",{"_index":139,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["id",{"_index":228,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["idbarraykey",{"_index":429,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbcursorwithvalue",{"_index":477,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbdatabase",{"_index":373,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbfactory",{"_index":371,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange",{"_index":430,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.bound",{"_index":458,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.lowerbound(current.getitems",{"_index":457,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.upperbound(current.getitems",{"_index":464,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbrequest",{"_index":488,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbtransaction",{"_index":509,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx",{"_index":432,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.get(query",{"_index":435,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.getkey(key",{"_index":442,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.service.ts",{"_index":355,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx.service.ts:105",{"_index":516,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:113",{"_index":529,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:138",{"_index":520,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:171",{"_index":517,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:186",{"_index":518,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:198",{"_index":531,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:225",{"_index":533,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:293",{"_index":527,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:31",{"_index":515,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:39",{"_index":524,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:6",{"_index":360,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:7",{"_index":361,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:75",{"_index":534,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["ignore",{"_index":32,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["implementing",{"_index":585,"title":{},"body":{"index.html":{}}}],["implements",{"_index":193,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["implied",{"_index":646,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["imports",{"_index":352,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["included",{"_index":640,"title":{},"body":{"license.html":{}}}],["includeequal",{"_index":162,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["including",{"_index":620,"title":{},"body":{"license.html":{}}}],["indecies",{"_index":496,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indecies.foreach(v",{"_index":499,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indexed",{"_index":386,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexeddb",{"_index":370,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexname",{"_index":454,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indices",{"_index":368,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["infinite",{"_index":550,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init",{"_index":199,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init(version",{"_index":394,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["initialize",{"_index":242,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initially",{"_index":225,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initstore",{"_index":495,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["initstore(db",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":123,"title":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["injectables",{"_index":145,"title":{},"body":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{},"overview.html":{}}}],["input",{"_index":19,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["inputs",{"_index":201,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["intersectionobserver",{"_index":264,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["iter",{"_index":466,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key",{"_index":380,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2",{"_index":441,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onerror",{"_index":448,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onsuccess",{"_index":443,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["keypath",{"_index":366,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":644,"title":{},"body":{"license.html":{}}}],["left",{"_index":592,"title":{},"body":{"index.html":{}}}],["length",{"_index":56,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{}}}],["liability",{"_index":659,"title":{},"body":{"license.html":{}}}],["liable",{"_index":656,"title":{},"body":{"license.html":{}}}],["lib",{"_index":196,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["libmugenscrollbottom",{"_index":179,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"index.html":{}}}],["libmugenscrollbottom]'},{'name",{"_index":341,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolldata",{"_index":25,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"index.html":{}}}],["libmugenscrolldata]'},{'name",{"_index":342,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolltop",{"_index":186,"title":{},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"index.html":{}}}],["library",{"_index":551,"title":{},"body":{"index.html":{}}}],["license",{"_index":600,"title":{"license.html":{}},"body":{}}],["limitation",{"_index":621,"title":{},"body":{"license.html":{}}}],["limited",{"_index":647,"title":{},"body":{"license.html":{}}}],["live",{"_index":559,"title":{},"body":{"index.html":{}}}],["load",{"_index":147,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["load(p",{"_index":135,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["loaded",{"_index":218,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["local",{"_index":578,"title":{},"body":{"index.html":{}}}],["located",{"_index":593,"title":{},"body":{"index.html":{}}}],["map",{"_index":31,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{}}}],["matching",{"_index":85,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":37,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["memory",{"_index":248,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["merchantability",{"_index":649,"title":{},"body":{"license.html":{}}}],["merge",{"_index":624,"title":{},"body":{"license.html":{}}}],["message",{"_index":357,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["metadata",{"_index":178,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["method",{"_index":239,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["methods",{"_index":89,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["miscellaneous",{"_index":542,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":507,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["modify",{"_index":623,"title":{},"body":{"license.html":{}}}],["module",{"_index":344,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":346,"title":{"modules.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"modules.html":{}}}],["more",{"_index":598,"title":{},"body":{"index.html":{}}}],["mugen",{"_index":191,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["mugenscrollbottomdirective",{"_index":175,"title":{"directives/MugenScrollBottomDirective.html":{}},"body":{"directives/MugenScrollBottomDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolldatadirective",{"_index":28,"title":{"directives/MugenScrollDataDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolltopdirective",{"_index":184,"title":{"directives/MugenScrollTopDirective.html":{}},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["n",{"_index":120,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["name",{"_index":100,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":563,"title":{},"body":{"index.html":{}}}],["new",{"_index":45,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["newcursor",{"_index":39,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{}}}],["newcursor(v",{"_index":171,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["next",{"_index":462,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["ng",{"_index":280,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngafterviewinit",{"_index":244,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngmodule",{"_index":350,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["ngoninit",{"_index":273,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngx",{"_index":197,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscroll",{"_index":553,"title":{},"body":{"index.html":{}}}],["ngxmugenscrollcomponent",{"_index":188,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscrollmodule",{"_index":345,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{},"modules.html":{}}}],["noninfringement",{"_index":653,"title":{},"body":{"license.html":{}}}],["notfoundresourceerror",{"_index":353,"title":{"classes/NotFoundResourceError.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notfoundresourceerror(`cannot",{"_index":387,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notice",{"_index":638,"title":{},"body":{"license.html":{}}}],["null",{"_index":433,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["number",{"_index":38,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["objectstorenames",{"_index":452,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["obtaining",{"_index":611,"title":{},"body":{"license.html":{}}}],["oninit",{"_index":194,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["optional",{"_index":101,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["ordereddatastoreidxservice",{"_index":369,"title":{"injectables/OrderedDataStoreIdxService.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxserviceindex",{"_index":365,"title":{"interfaces/OrderedDataStoreIdxServiceIndex.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxservicestore",{"_index":367,"title":{"interfaces/OrderedDataStoreIdxServiceStore.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["otherwise",{"_index":663,"title":{},"body":{"license.html":{}}}],["out",{"_index":665,"title":{},"body":{"license.html":{}}}],["output",{"_index":251,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["outputs",{"_index":209,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["overview",{"_index":565,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":131,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["package",{"_index":535,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":99,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":651,"title":{},"body":{"license.html":{}}}],["peer",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["permission",{"_index":605,"title":{},"body":{"license.html":{}}}],["permit",{"_index":631,"title":{},"body":{"license.html":{}}}],["person",{"_index":610,"title":{},"body":{"license.html":{}}}],["persons",{"_index":632,"title":{},"body":{"license.html":{}}}],["portions",{"_index":642,"title":{},"body":{"license.html":{}}}],["position",{"_index":217,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["prev",{"_index":465,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["previous",{"_index":288,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["private",{"_index":29,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["promise",{"_index":164,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":396,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["promise>((resolve",{"_index":475,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provided",{"_index":238,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":124,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provider",{"_index":206,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["provides",{"_index":566,"title":{},"body":{"index.html":{}}}],["public",{"_index":33,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["publish",{"_index":625,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":652,"title":{},"body":{"license.html":{}}}],["push(...datas",{"_index":59,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["query",{"_index":425,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r",{"_index":66,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.detectchanges",{"_index":69,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r.onerror",{"_index":438,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.onsuccess",{"_index":436,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.rootnodes[0].setattribute('_cursor",{"_index":68,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r2",{"_index":487,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r2.result",{"_index":489,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range",{"_index":456,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.lower",{"_index":471,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.upper",{"_index":472,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["read",{"_index":597,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":358,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["readwrite",{"_index":422,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["redisplayed",{"_index":570,"title":{},"body":{"index.html":{}}}],["ref",{"_index":81,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["reference",{"_index":588,"title":{},"body":{"index.html":{}}}],["references",{"_index":558,"title":{},"body":{"index.html":{}}}],["reject",{"_index":397,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reject(ev",{"_index":414,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reject(r.error",{"_index":439,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["related",{"_index":249,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["remote",{"_index":389,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["represents",{"_index":576,"title":{},"body":{"index.html":{}}}],["request",{"_index":398,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onblocked",{"_index":412,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onerror",{"_index":415,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onsuccess",{"_index":401,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onupgradeneeded",{"_index":406,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["requested",{"_index":220,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["resolve",{"_index":405,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resolve(r.result",{"_index":437,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resolve(ret",{"_index":479,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["restriction",{"_index":619,"title":{},"body":{"license.html":{}}}],["result",{"_index":84,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":86,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["resultsinitstore",{"_index":407,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resultsinitstore.push(initstore(db",{"_index":409,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret",{"_index":474,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(cursor.value",{"_index":480,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(v",{"_index":492,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(cursor.value",{"_index":481,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(v",{"_index":493,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["return",{"_index":57,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["returns",{"_index":105,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":594,"title":{},"body":{"index.html":{}}}],["rights",{"_index":622,"title":{},"body":{"license.html":{}}}],["root",{"_index":125,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["rootmargin",{"_index":304,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["row",{"_index":577,"title":{},"body":{"index.html":{}}}],["s",{"_index":337,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save",{"_index":148,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save(p",{"_index":129,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["saved",{"_index":247,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["savescrollposition",{"_index":200,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll",{"_index":7,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["scroll.component",{"_index":351,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.component.ts",{"_index":192,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll.component.ts:120",{"_index":241,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:204",{"_index":245,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:234",{"_index":235,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:256",{"_index":240,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:34",{"_index":221,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:41",{"_index":226,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:47",{"_index":223,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:53",{"_index":219,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:59",{"_index":210,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:65",{"_index":215,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:71",{"_index":216,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:77",{"_index":231,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:83",{"_index":234,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.module.ts",{"_index":347,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.ts",{"_index":155,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:10",{"_index":168,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:12",{"_index":166,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:13",{"_index":173,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:6",{"_index":163,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:8",{"_index":170,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrollbottomevent",{"_index":255,"title":{"interfaces/ScrollBottomEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollbottomoninit",{"_index":207,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolled",{"_index":214,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollid",{"_index":156,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrolling",{"_index":568,"title":{},"body":{"index.html":{}}}],["scrolltop",{"_index":121,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["scrolltopat(at",{"_index":334,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolltopevent",{"_index":256,"title":{"interfaces/ScrollTopEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["selector",{"_index":24,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["sell",{"_index":629,"title":{},"body":{"license.html":{}}}],["set",{"_index":561,"title":{},"body":{"index.html":{}}}],["shall",{"_index":639,"title":{},"body":{"license.html":{}}}],["simple",{"_index":591,"title":{},"body":{"index.html":{}}}],["software",{"_index":613,"title":{},"body":{"license.html":{}}}],["sort",{"_index":473,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["specified",{"_index":580,"title":{},"body":{"index.html":{}}}],["src/.../ordered",{"_index":544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/cursor",{"_index":117,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["src/lib/cursor.ts",{"_index":88,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:10",{"_index":107,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:13",{"_index":104,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:16",{"_index":106,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:2",{"_index":98,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:9",{"_index":109,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/mugen",{"_index":6,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["src/lib/ngx",{"_index":190,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["src/lib/ordered",{"_index":354,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":549,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":276,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["static",{"_index":378,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store",{"_index":127,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["store.clear",{"_index":450,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.createindex",{"_index":500,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.delete(key",{"_index":440,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.index(index",{"_index":434,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.indices",{"_index":411,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.keypath",{"_index":410,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name",{"_index":383,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name}.${index}.${key",{"_index":385,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.service",{"_index":174,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["store.service.ts",{"_index":118,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["store.service.ts:16",{"_index":149,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:22",{"_index":153,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:27",{"_index":152,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:36",{"_index":150,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:40",{"_index":151,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.transaction.onabort",{"_index":505,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.oncomplete",{"_index":504,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.onerror",{"_index":506,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["storename",{"_index":421,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["storename}.${indexname",{"_index":468,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores",{"_index":395,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores.foreach(async",{"_index":408,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stream",{"_index":222,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["string",{"_index":96,"title":{},"body":{"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["styles",{"_index":257,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["subject",{"_index":634,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":627,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":641,"title":{},"body":{"license.html":{}}}],["suitable",{"_index":569,"title":{},"body":{"index.html":{}}}],["suzuki",{"_index":604,"title":{},"body":{"license.html":{}}}],["t",{"_index":172,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["t,i",{"_index":526,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["tag",{"_index":581,"title":{},"body":{"index.html":{}}}],["taito",{"_index":603,"title":{},"body":{"license.html":{}}}],["target",{"_index":444,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["target.result",{"_index":446,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tbd",{"_index":586,"title":{},"body":{"index.html":{}}}],["template",{"_index":42,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["templateref",{"_index":20,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["then(resolve).catch(reject",{"_index":447,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.arrange(false",{"_index":78,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.arrange(true",{"_index":74,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.autofetchingbottom",{"_index":270,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autofetchingtop",{"_index":271,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autoloadscrollposition",{"_index":272,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom",{"_index":54,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom.emit",{"_index":302,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective",{"_index":277,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective.element",{"_index":301,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.constructor.name",{"_index":364,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.countperload",{"_index":268,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.load(this.provider.scrollid",{"_index":310,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.save",{"_index":323,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective",{"_index":284,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.bottom",{"_index":321,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.clear",{"_index":289,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.newcursor",{"_index":290,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.push(...datas",{"_index":312,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.top",{"_index":319,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.unshift(...datas",{"_index":332,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datas",{"_index":110,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.join(this.delimiter",{"_index":113,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.length",{"_index":112,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.map(v",{"_index":115,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas[i",{"_index":114,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datasmap",{"_index":44,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.clear",{"_index":55,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.has(cursor.tostring",{"_index":64,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.set(cursor.tostring",{"_index":73,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.db",{"_index":392,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.dbname",{"_index":375,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.delete(storename",{"_index":445,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.el.nativeelement",{"_index":183,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchbottom",{"_index":303,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchtop",{"_index":300,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.indexeddb",{"_index":376,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.indexeddb.open(this.dbname",{"_index":399,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.init",{"_index":274,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver",{"_index":292,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.disconnect",{"_index":293,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.bottomdirective.element",{"_index":308,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.topdirective.element",{"_index":309,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.iter",{"_index":461,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.max",{"_index":46,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.name",{"_index":363,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.newcursor",{"_index":48,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.newcursor(data",{"_index":63,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.provider",{"_index":286,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchbottom",{"_index":329,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchoninit(this.countperload).then(datas",{"_index":315,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchonload(cursorstoreinfo).then(datas",{"_index":311,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchtop",{"_index":330,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor",{"_index":291,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at",{"_index":338,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at).tostring",{"_index":336,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.bottom",{"_index":325,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top",{"_index":326,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top).tostring",{"_index":335,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.scrollid",{"_index":324,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottom",{"_index":316,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomoninit",{"_index":266,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrolltopat(topbeforeadded",{"_index":333,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.store",{"_index":128,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.delete(p",{"_index":143,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.get(p",{"_index":136,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.set(p",{"_index":134,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.top",{"_index":53,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.top.emit",{"_index":299,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective",{"_index":282,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective.element",{"_index":297,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.uniqid",{"_index":265,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.validdb",{"_index":418,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.viewcontainer.clear",{"_index":52,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":67,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.length",{"_index":58,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["three",{"_index":573,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":306,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["throw",{"_index":278,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top",{"_index":36,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["top.directive",{"_index":252,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top.directive.ts",{"_index":185,"title":{},"body":{"directives/MugenScrollTopDirective.html":{}}}],["topbeforeadded",{"_index":331,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["topcursor",{"_index":122,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topcursor.tostring",{"_index":133,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topdirective",{"_index":261,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tort",{"_index":662,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":92,"title":{},"body":{"classes/Cursor.html":{}}}],["transaction",{"_index":512,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["true",{"_index":65,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["tslib",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["tx",{"_index":419,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename",{"_index":431,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).getall",{"_index":486,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).index(indexname).opencursor(range",{"_index":476,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).put(arg",{"_index":424,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["undefined",{"_index":35,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["uniqid",{"_index":208,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unique",{"_index":227,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unshift(...datas",{"_index":75,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["until",{"_index":71,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["up",{"_index":562,"title":{},"body":{"index.html":{}}}],["usage",{"_index":564,"title":{},"body":{"index.html":{}}}],["use",{"_index":595,"title":{},"body":{"index.html":{},"license.html":{}}}],["used",{"_index":229,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["v",{"_index":40,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.keypath",{"_index":502,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.name",{"_index":501,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.unique",{"_index":503,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validate",{"_index":275,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["validdb",{"_index":391,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validtx",{"_index":545,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validtx(db",{"_index":420,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["value",{"_index":522,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["var",{"_index":339,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["variable",{"_index":579,"title":{},"body":{"index.html":{}}}],["version",{"_index":400,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["versionchange",{"_index":508,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["viewcontainer",{"_index":43,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["viewcontainerref",{"_index":21,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["visible",{"_index":583,"title":{},"body":{"index.html":{}}}],["void",{"_index":51,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["vref.context",{"_index":82,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["wait",{"_index":70,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["warranties",{"_index":648,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":643,"title":{},"body":{"license.html":{}}}],["whether",{"_index":211,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["window.indexeddb",{"_index":377,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["without",{"_index":618,"title":{},"body":{"license.html":{}}}],["yes",{"_index":547,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Ctx.html":{"url":"interfaces/Ctx.html","title":"interface - Ctx","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Ctx\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 100;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  /**\n   * @ignore\n   */\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cursor.html":{"url":"classes/Cursor.html","title":"class - Cursor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cursor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getItem\n                            \n                            \n                                getItems\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(datas: Array, delimiter: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        datas\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        delimiter\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItem\n                        \n                        \n                    \n                \n            \n            \n                \ngetItem(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItems\n                        \n                        \n                    \n                \n            \n            \n                \ngetItems()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/cursor.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export class Cursor {\n    private datas: Array;\n    constructor(\n        datas: Array,\n        private delimiter: string = '-',\n    ) {\n        this.datas = datas.map(v => v);\n    }\n    get length(): number { return this.datas.length; }\n    toString(): string {\n        return this.datas.join(this.delimiter);\n    }\n    getItem(i: number): number | string {\n        return this.datas[i];\n    }\n    getItems(): Array {\n        return this.datas.map(v => v);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CursorStoreInfo.html":{"url":"interfaces/CursorStoreInfo.html","title":"interface - CursorStoreInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CursorStoreInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomCursor\n                                \n                                \n                                        n\n                                \n                                \n                                        scrollTop\n                                \n                                \n                                        topCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomCursor\n                                    \n                                \n                                \n                                    \n                                        bottomCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        n\n                                    \n                                \n                                \n                                    \n                                        n:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topCursor\n                                    \n                                \n                                \n                                    \n                                        topCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CursorStoreService.html":{"url":"injectables/CursorStoreService.html","title":"injectable - CursorStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CursorStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                load\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor-store.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            load\n                        \n                        \n                    \n                \n            \n            \n                \nload(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottomCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scrollTop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataProvider.html":{"url":"interfaces/DataProvider.html","title":"interface - DataProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        scrollId\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fetchBottom\n                                \n                                \n                                    fetchOnInit\n                                \n                                \n                                    fetchOnLoad\n                                \n                                \n                                    fetchTop\n                                \n                                \n                                    newCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \nfetchBottom(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnInit(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnLoad\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnLoad(info: CursorStoreInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                                CursorStoreInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \nfetchTop(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            newCursor\n                        \n                        \n                    \n                \n            \n            \n                \nnewCursor(v: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Cursor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scrollId\n                                    \n                                \n                                \n                                    \n                                        scrollId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cursor } from './cursor';\nimport { CursorStoreInfo } from './cursor-store.service';\n\nexport interface DataProvider {\n    scrollId: string;\n    fetchBottom(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchTop(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchOnLoad(\n        info: CursorStoreInfo): Promise>;\n    fetchOnInit(n: number): Promise>;\n    newCursor(v: T): Cursor;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollBottomDirective.html":{"url":"directives/MugenScrollBottomDirective.html","title":"directive - MugenScrollBottomDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollBottomDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-bottom.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollBottom]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollBottom]'\n})\nexport class MugenScrollBottomDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) { }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollDataDirective.html":{"url":"directives/MugenScrollDataDirective.html","title":"directive - MugenScrollDataDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollDataDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollData]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 100;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  /**\n   * @ignore\n   */\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollTopDirective.html":{"url":"directives/MugenScrollTopDirective.html","title":"directive - MugenScrollTopDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollTopDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-top.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollTop]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollTop]'\n})\nexport class MugenScrollTopDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMugenScrollComponent.html":{"url":"components/NgxMugenScrollComponent.html","title":"component - NgxMugenScrollComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxMugenScrollComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/lib/ngx-mugen-scroll.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                lib-ngx-mugen-scroll\n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchBottom\n                            \n                            \n                                    Async\n                                fetchTop\n                            \n                            \n                                init\n                            \n                            \n                                saveScrollPosition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoFetchingBottom\n                            \n                            \n                                autoFetchingTop\n                            \n                            \n                                autoLoadScrollPosition\n                            \n                            \n                                countPerLoad\n                            \n                            \n                                provider\n                            \n                            \n                                scrollBottomOnInit\n                            \n                            \n                                uniqId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                bottom\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoFetchingBottom\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:59\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoFetchingTop\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:65\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to top.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoLoadScrollPosition\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:71\n                            \n                        \n                \n                    \n                        Whether the scroll position is loaded automatically.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        countPerLoad\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:53\n                            \n                        \n                \n                    \n                        The number of data fetched by provider when new data is requested.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        provider\n                    \n                \n                \n                    \n                        Type :         DataProvider | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:34\n                            \n                        \n                \n                    \n                        Provider of stream data\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollBottomOnInit\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:47\n                            \n                        \n                \n                    \n                        Whether scroll to bottom or not when stream is displayed initially.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        uniqId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:41\n                            \n                        \n                \n                    \n                        Unique id of stream.\nThis id is used to save scroll position.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        bottom\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:77\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:83\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to top.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchBottom()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:234\n                \n            \n\n\n            \n                \n                    Fetch data and appended to bottom.\nThe data is provided by fetchBottom method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchTop()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:256\n                \n            \n\n\n            \n                \n                    Fetch data and appended to top.\nThe data is provided by fetchTop method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:120\n                \n            \n\n\n            \n                \n                    Initialize stream. This method is also called in ngAfterViewInit.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveScrollPosition\n                        \n                        \n                    \n                \n            \n            \n                \nsaveScrollPosition()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:204\n                \n            \n\n\n            \n                \n                    Save current scroll position.\nScroll position is saved on memory and related to uniqId.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   */\n  @Input()\n  public countPerLoad: number;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 50;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    this.dataDirective.push(...datas);\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n    this.scrollTopAt(topBeforeAdded);\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i \n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'NgxMugenScrollComponent', 'selector': 'lib-ngx-mugen-scroll'}];\n    var DIRECTIVES = [{'name': 'MugenScrollBottomDirective', 'selector': '[libMugenScrollBottom]'},{'name': 'MugenScrollDataDirective', 'selector': '[libMugenScrollData]'},{'name': 'MugenScrollTopDirective', 'selector': '[libMugenScrollTop]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMugenScrollComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxMugenScrollModule.html":{"url":"modules/NgxMugenScrollModule.html","title":"module - NgxMugenScrollModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxMugenScrollModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxMugenScrollComponent } from './ngx-mugen-scroll.component';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n})\nexport class NgxMugenScrollModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundResourceError.html":{"url":"classes/NotFoundResourceError.html","title":"class - NotFoundResourceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundResourceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Error\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderedDataStoreIdxService.html":{"url":"injectables/OrderedDataStoreIdxService.html","title":"injectable - OrderedDataStoreIdxService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OrderedDataStoreIdxService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                clear\n                            \n                            \n                                    Async\n                                clearAll\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Public\n                                    Async\n                                filter\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getLargerN\n                            \n                            \n                                    Async\n                                getSmallerN\n                            \n                            \n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(storeName: string, ...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear(storeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearAll()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(storeName: string, key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    key\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            fetch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(base: OrderedDataStoreIdxService, store: OrderedDataStoreIdxServiceStore, key: string, index: string, fetcher: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                OrderedDataStoreIdxService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    store\n                                    \n                                                OrderedDataStoreIdxServiceStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fetcher\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            filter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filter(storeName: string, direction: \"next\" | \"prev\", cb: (v: T,i: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:293\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    direction\n                                    \n                                            \"next\" | \"prev\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(storeName: string, query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:113\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLargerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLargerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:198\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSmallerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSmallerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:225\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(version: number, stores: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stores\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceIndex.html":{"url":"interfaces/OrderedDataStoreIdxServiceIndex.html","title":"interface - OrderedDataStoreIdxServiceIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                                \n                                        unique\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unique\n                                    \n                                \n                                \n                                    \n                                        unique:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceStore.html":{"url":"interfaces/OrderedDataStoreIdxServiceStore.html","title":"interface - OrderedDataStoreIdxServiceStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        indices\n                                \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        indices\n                                    \n                                \n                                \n                                    \n                                        indices:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollBottomEvent.html":{"url":"interfaces/ScrollBottomEvent.html","title":"interface - ScrollBottomEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollBottomEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   */\n  @Input()\n  public countPerLoad: number;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 50;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    this.dataDirective.push(...datas);\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n    this.scrollTopAt(topBeforeAdded);\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollTopEvent.html":{"url":"interfaces/ScrollTopEvent.html","title":"interface - ScrollTopEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollTopEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   */\n  @Input()\n  public countPerLoad: number;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 50;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    this.dataDirective.push(...datas);\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n    this.scrollTopAt(topBeforeAdded);\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^11.0.9\n        \n            @angular/core : ^11.0.9\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            initStore   (src/.../ordered-data-store-idx.service.ts)\n                        \n                        \n                            validTx   (src/.../ordered-data-store-idx.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ordered-data-store-idx.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            initStore\n                        \n                        \n                    \n                \n            \n            \n                \ninitStore(db, storeName, keyPath, indecies)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keyPath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    indecies\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validTx\n                        \n                        \n                    \n                \n            \n            \n                \nvalidTx(db, storeName, mode?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IDBTransaction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nThe infinite scroll library for AngularJS\nNgxMugenScroll\nThis library was generated with Angular CLI version 11.0.9.\n\nAPI references\nlive demo1\n\nSet up\nYou need to import NgxMugenScrollModule.\nimport { NgxMugenScrollModule } from 'ngx-mugen-scroll';\n...\n@NgModule({\n  imports: [\n      ...\n    NgxMugenScrollModule,\n      ...\n  ],Usage\nOverview\nComponent\nThis library provides NgxMugenScrollComponent that implements infinite scroll.\nNgxMugenScrollComponent has provider that provides datas displayed on the component during scrolling.\nprovider is suitable for DataProvider interface.\nScroll position is saved automatically in memory. Saved position can be loaded when stream is redisplayed.\n\n      \n      \n            {{data.index}}\n            {{data.message}}\n      \n      \nNgxMugenScrollComponent must have three children.\n\nTop component\nThe component with libMugenScrollTop attribute represents top of the NgxMugenScrollComponent.\n\n\nBottom component\nThe component with libMugenScrollBottom attribute represents bottom of the NgxMugenScrollComponent.\n\n\nData component\nThe component with libMugenScrollData attribute represents row of the stream in NgxMugenScrollComponent.\nLocal variable data is provided by provider specified in lib-ngx-mugen-scroll tag.\n\n\n\nIf autoFetchingBottom(autoFetchingTop) is set to true and top component is visible, then next data is provided by provider and appended to the bottom(top) of stream.\nProvider\nThe class implementing Provider interface provides data on the stream.\nTBD\nScroll position store feature\nTBD\nAPI\n\nreference docs\n\nExample\nSimple infinite scroll\nIn left stream, data is fetched automatically when stream is located to bottom(top).\nIn Right stream, data is not fetched automatically when stream is located to bottom(top).\nWhen use click Read more ... button, the data is fetched.\nlive demo1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright 2021 Taito Suzuki\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxMugenScrollModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
