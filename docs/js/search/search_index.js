var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Ctx.html",[0,0.064,1,2.03]],["body/interfaces/Ctx.html",[0,0.07,1,4.01,2,1.094,3,0.341,4,0.341,5,0.341,6,1.713,7,0.616,8,2.605,9,0.616,10,2.013,11,1.429,12,2.611,13,0.784,14,0.044,15,0.533,16,1.799,17,1.612,18,3.852,19,3.44,20,3.44,21,0.47,22,0.885,23,1.22,24,2.224,25,0.341,26,0.224,27,1.22,28,0.885,29,2.605,30,2.562,31,2.168,32,1.544,33,1.362,34,1.317,35,1.362,36,2.605,37,0.814,38,2.224,39,1.612,40,0.541,41,1.22,42,1.524,43,2.605,44,2.605,45,1.036,46,2.605,47,2.605,48,2.605,49,2.605,50,1.362,51,1.544,52,2.605,53,2.493,54,2.493,55,2.605,56,2.224,57,0.851,58,3.44,59,2.605,60,1.036,61,2.605,62,1.364,63,4.098,64,3.44,65,1.16,66,2.013,67,3.44,68,3.44,69,3.44,70,3.44,71,3.44,72,3.44,73,3.44,74,2.605,75,2.605,76,2.605,77,1.296,78,2.605,79,2.605,80,0.878,81,3.44,82,3.44,83,3.44,84,0.023,85,0.03,86,0.023]],["title/classes/Cursor.html",[22,0.494,26,0.205]],["body/classes/Cursor.html",[3,0.423,4,0.423,5,0.423,9,0.765,13,1.188,14,0.044,22,0.819,25,0.423,26,0.279,28,0.819,37,1.095,39,1.849,40,0.819,56,3.638,57,0.921,60,1.393,84,0.028,85,0.035,86,0.028,87,2.408,88,3.95,89,2.064,90,4.822,91,5.421,92,5.421,93,4.822,94,3.95,95,5.206,96,1.411,97,2.132,98,3.95,99,1.849,100,1.331,101,1.849,102,2.493,103,4.822,104,3.95,105,1.996,106,3.95,107,3.95,108,3.95,109,3.95,110,3.95,111,3.95,112,3.95,113,3.95,114,3.95,115,3.95]],["title/interfaces/CursorStoreInfo.html",[0,0.064,116,1.114]],["body/interfaces/CursorStoreInfo.html",[0,0.084,2,1.314,3,0.409,4,0.409,5,0.409,9,0.74,10,2.262,13,1.32,14,0.044,15,0.599,21,0.564,22,1,25,0.506,26,0.269,28,0.649,30,2.879,34,1.264,37,1.112,40,0.649,45,0.941,51,1.457,57,0.871,62,0.941,84,0.027,85,0.034,86,0.027,96,1.32,116,2.055,117,3.126,118,3.126,119,4.591,120,2.433,121,4.653,122,4.591,123,1.812,124,1.829,125,1.178,126,1.635,127,1.465,128,3.126,129,3.126,130,3.126,131,3.866,132,3.126,133,3.126,134,3.126,135,3.126,136,3.866,137,3.126,138,3.126,139,3.126,140,3.126,141,3.126,142,3.126,143,3.126,144,3.126]],["title/injectables/CursorStoreService.html",[123,1.114,126,1.243]],["body/injectables/CursorStoreService.html",[0,0.078,3,0.377,4,0.377,5,0.377,9,0.683,13,1.283,14,0.044,15,0.57,21,0.521,22,0.989,25,0.481,26,0.249,28,0.599,30,2.739,34,1.325,37,1.095,40,0.84,45,0.869,51,1.606,57,0.84,62,0.869,84,0.025,85,0.032,86,0.025,89,1.923,96,1.435,97,2.062,99,1.997,100,1.437,101,1.997,105,1.997,116,2.062,117,4.5,118,2.887,119,4.401,120,2.353,121,4.5,122,4.401,123,1.723,124,1.689,125,1.088,126,1.923,127,1.352,128,2.887,129,3.678,130,2.887,131,4.5,132,2.887,133,2.887,134,2.887,135,3.678,136,3.678,137,2.887,138,2.887,139,2.887,140,2.887,141,2.887,142,3.678,143,2.887,144,3.678,145,2.465,146,2.418,147,2.418,148,2.418,149,3.527,150,3.527,151,3.527,152,3.527,153,3.527]],["title/interfaces/DataProvider.html",[0,0.064,154,1.243]],["body/interfaces/DataProvider.html",[0,0.082,2,1.28,3,0.543,4,0.398,5,0.398,6,3,9,0.721,10,2.226,13,1.373,14,0.043,15,0.589,22,1.007,25,0.398,37,1.116,38,3.249,39,1.427,80,1.538,84,0.027,85,0.033,86,0.027,89,1.989,96,1.249,97,2.096,99,2.096,100,1.508,101,2.096,105,2.096,116,2.036,120,2.42,154,1.989,155,3.722,156,5.309,157,2.728,158,4.648,159,5.069,160,2.728,161,3.722,162,3,163,3.722,164,1.762,165,4.648,166,3.722,167,3.722,168,3.722,169,3.722,170,3.722,171,4.648,172,2.728,173,3.722,174,2.003]],["title/interfaces/Logger.html",[0,0.064,175,1.391]],["body/interfaces/Logger.html",[0,0.098,2,1.539,3,0.587,4,0.479,5,0.479,9,0.866,13,1.102,14,0.042,25,0.479,51,1.602,60,1.352,84,0.032,85,0.037,86,0.032,89,2.223,97,1.716,99,1.716,100,1.235,101,1.716,105,1.716,175,2.487,176,4.475,177,5.194,178,4.475,179,2.408]],["title/directives/MugenScrollBottomDirective.html",[16,1.243,180,1.243]],["body/directives/MugenScrollBottomDirective.html",[3,0.469,4,0.469,5,0.469,6,2.357,7,0.848,14,0.043,15,0.555,16,2.195,17,1.967,21,0.647,23,1.967,25,0.469,26,0.309,28,0.744,31,1.967,40,0.744,41,1.679,57,0.744,84,0.031,85,0.037,86,0.031,180,2.195,181,2.357,182,4.38,183,2.67,184,4.198,185,2.097,186,2.097,187,2.097]],["title/directives/MugenScrollDataDirective.html",[16,1.243,27,1.114]],["body/directives/MugenScrollDataDirective.html",[0,0.071,1,3.988,3,0.343,4,0.343,5,0.343,6,1.726,7,0.621,8,2.625,11,1.406,12,2.499,14,0.044,15,0.536,16,1.808,17,1.62,18,3.867,19,3.458,20,3.458,21,0.474,22,0.887,23,1.62,24,2.953,25,0.343,26,0.226,27,1.62,28,0.887,29,2.625,30,2.575,31,2.171,32,1.548,33,1.372,34,1.32,35,1.372,36,2.625,37,0.818,38,2.241,39,1.62,40,0.545,41,1.23,42,1.536,43,2.625,44,2.625,45,1.041,46,2.625,47,2.625,48,2.625,49,2.625,50,1.372,51,1.548,52,2.625,53,2.499,54,2.499,55,2.625,56,2.241,57,0.853,58,3.458,59,2.625,60,1.041,61,2.625,62,1.366,63,4.11,64,3.458,65,1.166,66,2.023,67,3.458,68,3.458,69,3.458,70,3.458,71,3.458,72,3.458,73,3.458,74,2.625,75,2.625,76,2.625,77,1.303,78,2.625,79,2.625,80,0.885,81,3.458,82,3.458,83,3.458,84,0.023,85,0.03,86,0.023,181,1.726,183,1.955]],["title/directives/MugenScrollTopDirective.html",[16,1.243,188,1.243]],["body/directives/MugenScrollTopDirective.html",[3,0.469,4,0.469,5,0.469,6,2.357,7,0.848,14,0.043,15,0.555,16,2.195,17,1.967,21,0.647,23,1.967,25,0.469,26,0.309,28,0.744,31,1.967,40,0.744,41,1.679,57,0.744,84,0.031,85,0.037,86,0.031,181,2.357,183,2.67,185,2.097,186,2.097,187,2.097,188,2.195,189,4.38,190,3.585]],["title/components/NgxMugenScrollComponent.html",[191,1.243,192,1.243]],["body/components/NgxMugenScrollComponent.html",[0,0.056,3,0.172,4,0.172,5,0.172,7,1.026,9,0.311,11,1.326,12,0.769,13,1.158,14,0.044,15,0.558,17,0.978,21,0.237,22,0.434,23,1.609,25,0.34,26,0.18,27,1.217,28,0.85,31,1.511,32,1.485,33,2.103,34,1.441,35,2.011,37,0.7,40,0.273,41,0.978,42,1.222,45,1.357,50,0.688,51,1.542,53,0.769,54,0.769,57,0.862,60,0.782,62,1.083,65,1.088,77,0.978,80,1.259,84,0.012,85,0.018,86,0.012,89,1.092,96,0.629,97,1.946,100,0.876,102,1.222,105,1.386,116,0.978,125,0.495,126,1.358,147,0.865,148,1.945,154,1.358,157,2.258,160,2.258,164,1.215,174,0.865,175,2.009,180,1.358,181,0.865,183,0.979,185,0.769,186,0.769,187,1.887,188,1.358,190,1.123,191,1.092,192,1.546,193,2.551,194,2.767,195,1.68,196,0.979,197,1.091,198,1.934,199,1.934,200,1.934,201,1.708,202,0.978,203,1.686,204,1.945,205,2.202,206,2.551,207,1.934,208,1.934,209,1.934,210,1.934,211,2.645,212,1.934,213,2.402,214,2.551,215,1.607,216,2.456,217,2.258,218,2.258,219,2.781,220,1.607,221,1.607,222,2.456,223,1.373,224,2.402,225,2.402,226,2.402,227,1.607,228,1.555,229,2.202,230,1.934,231,1.934,232,1.607,233,2.456,234,1.607,235,1.373,236,1.555,237,1.607,238,0.978,239,2.202,240,1.555,241,2.681,242,1.607,243,1.243,244,2.202,245,1.607,246,1.607,247,1.386,248,1.945,249,1.73,250,2.557,251,1.607,252,1.607,253,1.555,254,1.555,255,1.934,256,1.607,257,1.386,258,1.373,259,1.373,260,1.555,261,0.979,262,2.865,263,1.934,264,0.979,265,1.555,266,0.865,267,0.865,268,0.865,269,0.865,270,0.865,271,1.373,272,1.555,273,0.979,274,0.979,275,0.979,276,0.979,277,0.979,278,0.979,279,0.979,280,0.979,281,1.934,282,0.979,283,0.979,284,0.979,285,1.555,286,1.511,287,2.781,288,1.555,289,1.555,290,1.555,291,1.934,292,0.865,293,1.555,294,1.934,295,1.555,296,0.979,297,0.979,298,0.979,299,0.979,300,0.979,301,0.979,302,1.934,303,1.555,304,1.972,305,1.555,306,3.257,307,3.257,308,1.555,309,1.555,310,2.681,311,2.557,312,2.402,313,2.202,314,0.979,315,0.865,316,0.979,317,0.979,318,0.979,319,0.979,320,1.934,321,0.979,322,0.979,323,0.979,324,1.555,325,0.979,326,1.555,327,0.979,328,0.979,329,0.979,330,0.979,331,0.979,332,0.979,333,0.979,334,0.979,335,0.979,336,0.979,337,0.979,338,0.979,339,0.979,340,1.934,341,1.555,342,0.979,343,0.979,344,0.979,345,0.979,346,0.979,347,1.555,348,1.555,349,0.979,350,0.979,351,2.202,352,0.979,353,1.934,354,0.979,355,0.979,356,0.979,357,1.555,358,1.555,359,0.979,360,0.978,361,0.979,362,0.979,363,0.978,364,1.386,365,1.555,366,1.555,367,0.979,368,0.978,369,1.555,370,1.555,371,0.979,372,0.979,373,0.979,374,0.979,375,0.979,376,0.979,377,0.979,378,1.555,379,0.979,380,0.979,381,0.979,382,0.979,383,0.979,384,0.979,385,0.979,386,0.979,387,0.979,388,3.613,389,1.607,390,1.607,391,1.607,392,1.607]],["title/modules/NgxMugenScrollModule.html",[393,2.377,394,1.771]],["body/modules/NgxMugenScrollModule.html",[3,0.45,4,0.45,5,0.45,7,1.035,14,0.043,15,0.717,21,0.621,25,0.45,26,0.296,27,2.168,84,0.03,85,0.036,86,0.03,180,2.42,188,2.42,192,2.42,194,2.261,195,1.744,202,1.296,266,2.261,267,2.261,268,2.261,394,3.051,395,2.937,396,4.202,397,5.006,398,5.006,399,4.097,400,4.202,401,3.439]],["title/classes/NotFoundResourceError.html",[26,0.205,402,1.563]],["body/classes/NotFoundResourceError.html",[0,0.062,3,0.195,4,0.195,5,0.195,7,0.352,9,0.892,10,1.346,11,1.251,13,0.847,14,0.044,15,0.356,21,0.269,22,0.809,25,0.414,26,0.198,28,0.71,32,1.06,34,0.847,37,0.892,39,0.697,40,0.478,45,1.251,57,0.928,60,1.251,62,1.427,65,0.776,66,2.001,77,1.06,80,1.067,84,0.025,85,0.02,86,0.013,87,1.108,96,1.415,97,1.318,99,0.697,100,1.22,101,0.697,120,1.972,123,1.078,124,0.871,125,0.561,127,1.977,146,0.979,162,2.378,164,1.611,172,1.849,179,0.979,195,0.561,197,0.967,202,0.561,203,1.977,238,1.078,243,1.89,247,0.697,257,1.318,286,1.078,304,1.318,360,1.695,363,1.695,364,1.913,368,1.695,402,1.513,403,2.081,404,0.979,405,1.713,406,2.357,407,2.808,408,1.819,409,2.811,410,1.819,411,1.108,412,1.108,413,1.108,414,0.979,415,2.081,416,1.513,417,1.108,418,1.513,419,1.108,420,1.108,421,2.811,422,2.694,423,1.108,424,1.108,425,1.108,426,1.108,427,1.108,428,1.108,429,2.357,430,1.713,431,1.108,432,2.095,433,2.095,434,1.713,435,2.095,436,1.108,437,1.108,438,1.108,439,1.108,440,1.108,441,2.548,442,1.108,443,1.108,444,1.108,445,1.108,446,1.108,447,0.979,448,1.108,449,3.349,450,2.548,451,2.095,452,1.108,453,1.713,454,1.108,455,1.108,456,1.108,457,1.108,458,1.108,459,1.713,460,2.808,461,1.108,462,1.108,463,2.808,464,2.977,465,2.48,466,2.957,467,2.357,468,1.108,469,1.108,470,1.108,471,1.713,472,1.713,473,1.713,474,1.713,475,2.095,476,2.095,477,2.357,478,2.548,479,1.713,480,1.108,481,2.548,482,1.108,483,2.548,484,1.108,485,1.108,486,1.713,487,1.108,488,1.108,489,1.108,490,1.108,491,1.108,492,1.108,493,1.108,494,1.108,495,1.108,496,1.108,497,1.108,498,1.108,499,2.548,500,2.357,501,2.808,502,1.108,503,1.713,504,2.357,505,1.713,506,1.713,507,2.25,508,1.108,509,1.108,510,2.095,511,1.108,512,2.694,513,1.108,514,1.108,515,1.108,516,1.108,517,1.108,518,1.108,519,1.713,520,1.713,521,1.108,522,1.108,523,1.108,524,2.095,525,1.108,526,1.108,527,1.108,528,1.108,529,1.108,530,1.108,531,1.108,532,1.108,533,1.108,534,1.108,535,1.108,536,1.108,537,1.108,538,1.108,539,1.713,540,0.979,541,0.979,542,1.108,543,1.108,544,1.108,545,1.108,546,1.108,547,1.108,548,1.108,549,1.108,550,1.108,551,1.108,552,1.513,553,1.108,554,0.979,555,1.108,556,1.108,557,1.108]],["title/classes/NullLogger.html",[26,0.205,271,1.563]],["body/classes/NullLogger.html",[0,0.063,3,0.373,4,0.199,5,0.199,7,0.972,9,0.36,11,1.237,12,0.891,13,0.458,14,0.044,15,0.589,17,1.097,21,0.275,22,0.486,23,0.713,25,0.373,26,0.202,27,1.097,28,0.881,31,1.62,32,1.548,33,1.808,34,1.454,35,1.675,37,0.675,40,0.316,41,1.097,42,0.891,45,1.379,50,0.796,51,1.575,53,0.891,54,0.891,57,0.892,60,1.041,62,1.145,65,1.166,77,1.075,80,1.08,84,0.013,85,0.021,86,0.013,87,1.134,89,1.224,96,0.458,97,0.713,99,0.713,100,0.514,101,0.713,102,1.37,105,0.713,116,1.097,125,0.574,126,1.492,147,1.001,148,1.54,154,1.224,157,1.54,160,1.54,164,1.075,174,1.001,175,2.224,180,1.224,185,0.891,186,0.891,187,2.022,188,1.224,191,1.224,192,0.796,194,1.54,195,1.432,196,1.134,197,1.199,198,1.744,199,1.744,200,1.744,201,1.001,202,0.574,203,1.337,204,1.001,205,1.134,207,1.134,208,1.134,209,1.134,210,1.134,211,2.273,212,1.134,213,1.744,216,2.106,217,1.876,218,1.876,219,2.385,222,2.106,223,1.001,224,2.125,225,2.125,226,2.125,228,1.134,229,2.125,230,1.744,231,1.744,233,2.106,235,1.001,236,1.134,238,0.713,239,1.744,240,1.134,241,2.575,243,0.984,244,1.744,247,1.097,248,1.54,249,1.37,250,2.125,253,1.134,254,1.134,255,1.744,257,1.337,258,1.001,259,1.001,260,1.134,261,1.134,262,2.998,263,2.125,264,1.134,265,1.744,266,1.001,267,1.001,268,1.001,269,1.001,270,1.001,271,1.876,272,2.125,273,1.134,274,1.134,275,1.134,276,1.134,277,1.134,278,1.134,279,1.134,280,1.134,281,2.125,282,1.134,283,1.134,284,1.134,285,1.744,286,1.62,287,2.923,288,1.744,289,1.744,290,1.744,291,2.125,292,1.001,293,1.744,294,2.125,295,1.744,296,1.134,297,1.134,298,1.134,299,1.134,300,1.134,301,1.134,302,2.125,303,1.744,304,2.035,305,1.744,306,3.341,307,3.341,308,1.744,309,1.744,310,2.831,311,2.718,312,2.575,313,2.385,314,1.134,315,1.001,316,1.134,317,1.134,318,1.134,319,1.134,320,2.125,321,1.134,322,1.134,323,1.134,324,1.744,325,1.134,326,1.744,327,1.134,328,1.134,329,1.134,330,1.134,331,1.134,332,1.134,333,1.134,334,1.134,335,1.134,336,1.134,337,1.134,338,1.134,339,1.134,340,2.125,341,1.744,342,1.134,343,1.134,344,1.134,345,1.134,346,1.134,347,1.744,348,1.744,349,1.134,350,1.134,351,2.385,352,1.134,353,2.125,354,1.134,355,1.134,356,1.134,357,1.744,358,1.744,359,1.134,360,1.097,361,1.134,362,1.134,363,1.097,364,1.501,365,1.744,366,1.744,367,1.134,368,1.097,369,1.744,370,1.744,371,1.134,372,1.134,373,1.134,374,1.134,375,1.134,376,1.134,377,1.134,378,1.744,379,1.134,380,1.134,381,1.134,382,1.134,383,1.134,384,1.134,385,1.134,386,1.134,387,1.134,558,1.861,559,1.861]],["title/injectables/OrderedDataStoreIdxService.html",[123,1.114,418,1.563]],["body/injectables/OrderedDataStoreIdxService.html",[0,0.053,3,0.159,4,0.159,5,0.159,7,0.287,9,0.963,11,1.307,13,1.258,14,0.044,15,0.303,21,0.219,22,0.877,25,0.369,26,0.169,28,0.643,32,0.927,34,0.741,37,1.019,39,0.917,40,0.511,45,1.183,50,1.023,51,0.737,57,0.894,60,1.258,62,1.398,65,0.66,66,1.812,77,0.927,80,1.223,84,0.022,85,0.017,86,0.011,89,1.023,96,1.444,97,1.842,99,1.959,100,1.351,101,1.754,105,1.801,120,2.055,123,0.917,124,0.71,125,0.457,127,2.074,145,1.036,146,1.618,162,2.528,164,1.677,172,2.462,179,1.618,195,0.457,197,0.51,202,0.457,203,2.159,204,1.287,238,0.917,243,1.824,247,1.153,257,1.633,286,1.323,304,1.153,360,1.552,363,1.552,364,1.801,368,1.552,402,0.798,403,2.634,404,0.798,405,0.903,406,0.903,407,2.307,411,0.903,412,0.903,413,0.903,414,0.798,415,1.857,416,1.857,417,0.903,418,2.037,419,0.903,420,0.903,421,2.677,422,2.467,423,0.903,424,0.903,425,0.903,426,0.903,427,1.832,428,1.458,429,2.7,430,2.103,431,0.903,432,1.832,433,1.832,434,1.458,435,1.832,436,0.903,437,0.903,438,0.903,439,0.903,440,0.903,441,2.307,442,0.903,443,1.458,444,1.832,445,0.903,446,0.903,447,1.287,448,0.903,449,3.232,450,2.307,451,1.832,452,0.903,453,1.458,454,0.903,455,0.903,456,0.903,457,0.903,458,0.903,459,1.458,460,2.595,461,0.903,462,1.458,463,2.595,464,2.788,465,2.291,466,2.968,467,2.103,468,0.903,469,0.903,470,1.832,471,2.467,472,2.467,473,2.467,474,2.467,475,2.595,476,1.832,477,2.103,478,2.927,479,1.458,480,0.903,481,2.307,482,0.903,483,2.307,484,0.903,485,0.903,486,1.458,487,0.903,488,0.903,489,0.903,490,0.903,491,0.903,492,0.903,493,0.903,494,1.458,495,0.903,496,2.103,497,0.903,498,0.903,499,2.788,500,2.7,501,2.595,502,0.903,503,1.458,504,2.103,505,1.458,506,1.458,507,2.291,508,1.832,509,0.903,510,2.307,511,0.903,512,2.7,513,0.903,514,0.903,515,0.903,516,0.903,517,0.903,518,0.903,519,1.458,520,1.458,521,0.903,522,0.903,523,0.903,524,1.832,525,0.903,526,0.903,527,0.903,528,1.832,529,1.832,530,0.903,531,0.903,532,0.903,533,0.903,534,0.903,535,0.903,536,0.903,537,0.903,538,0.903,539,2.103,540,0.798,541,0.798,542,0.903,543,0.903,544,0.903,545,0.903,546,0.903,547,0.903,548,0.903,549,0.903,550,0.903,551,0.903,552,1.287,553,0.903,554,0.798,555,0.903,556,0.903,557,0.903,560,2.391,561,2.391,562,1.482,563,1.482,564,1.482,565,1.482,566,1.482,567,1.482,568,3.45,569,3.45,570,1.482,571,1.482,572,1.482,573,1.482,574,1.482,575,1.482,576,1.482,577,1.482,578,1.482,579,1.482,580,1.482,581,1.482]],["title/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.064,414,1.563]],["body/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.062,2,0.632,3,0.197,4,0.197,5,0.197,7,0.356,9,0.895,10,1.357,11,1.176,13,0.852,14,0.044,15,0.359,21,0.271,22,0.811,25,0.416,26,0.2,28,0.714,32,0.566,34,0.852,37,0.895,39,0.704,40,0.312,45,1.255,57,0.929,60,1.29,62,1.428,65,0.782,66,2.011,77,1.066,80,1.225,84,0.025,85,0.02,86,0.013,96,1.417,100,1.225,120,1.979,123,1.086,124,0.88,125,0.566,127,1.879,146,0.989,162,2.388,164,1.614,172,1.861,179,0.989,195,0.566,197,0.632,202,0.566,203,1.982,238,1.61,243,1.893,247,0.704,257,1.326,286,1.086,304,1.326,360,1.702,363,1.702,364,1.919,368,1.702,402,0.989,403,0.989,404,0.989,405,1.12,406,1.12,407,2.56,411,1.12,412,1.12,413,1.12,414,1.525,415,2.489,416,1.525,417,1.12,418,1.525,419,1.12,420,1.12,421,2.818,422,2.705,423,1.12,424,1.12,425,1.12,426,1.12,427,1.12,428,1.12,429,2.369,430,1.727,431,1.12,432,2.108,433,2.108,434,1.727,435,2.108,436,1.12,437,1.12,438,1.12,439,1.12,440,1.12,441,2.56,442,1.12,443,1.12,444,1.12,445,1.12,446,1.12,447,0.989,448,1.12,449,3.354,450,2.56,451,2.108,452,1.12,453,1.727,454,1.12,455,1.12,456,1.12,457,1.12,458,1.12,459,1.727,460,2.819,461,1.12,462,1.12,463,2.819,464,2.986,465,2.489,466,2.962,467,2.369,468,1.12,469,1.12,470,1.12,471,1.727,472,1.727,473,1.727,474,1.727,475,2.108,476,2.108,477,2.369,478,2.56,479,1.727,480,1.12,481,2.56,482,1.12,483,2.56,484,1.12,485,1.12,486,1.727,487,1.12,488,1.12,489,1.12,490,1.12,491,1.12,492,1.12,493,1.12,494,1.12,495,1.12,496,1.12,497,1.12,498,1.12,499,2.56,500,2.369,501,2.819,502,1.12,503,1.727,504,2.369,505,1.727,506,1.727,507,2.26,508,1.12,509,1.12,510,2.108,511,1.12,512,2.705,513,1.12,514,1.12,515,1.12,516,1.12,517,1.12,518,1.12,519,1.727,520,1.727,521,1.12,522,1.12,523,1.12,524,2.108,525,1.12,526,1.12,527,1.12,528,1.12,529,1.12,530,1.12,531,1.12,532,1.12,533,1.12,534,1.12,535,1.12,536,1.12,537,1.12,538,1.12,539,1.727,540,0.989,541,0.989,542,1.12,543,1.12,544,1.12,545,1.12,546,1.12,547,1.12,548,1.12,549,1.12,550,1.12,551,1.12,552,1.525,553,1.12,554,0.989,555,1.12,556,1.12,557,1.12]],["title/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.064,416,1.563]],["body/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.062,2,0.632,3,0.197,4,0.197,5,0.197,7,0.356,9,0.895,10,1.357,11,1.176,13,0.852,14,0.044,15,0.359,21,0.271,22,0.811,25,0.416,26,0.2,28,0.714,32,0.566,34,0.852,37,0.895,39,0.704,40,0.312,45,1.255,57,0.929,60,1.317,62,1.428,65,0.782,66,2.011,77,1.066,80,1.073,84,0.025,85,0.02,86,0.013,96,1.417,100,1.225,120,1.979,123,1.086,124,0.88,125,0.566,127,1.879,146,0.989,162,2.388,164,1.614,172,1.861,179,0.989,195,0.566,197,0.632,202,0.566,203,1.982,238,1.086,243,1.893,247,0.704,257,1.326,286,1.086,304,1.326,360,1.702,363,1.702,364,1.919,368,1.702,402,0.989,403,0.989,404,0.989,405,1.12,406,1.12,407,2.56,411,1.12,412,1.12,413,1.12,414,0.989,415,2.489,416,1.861,417,2.369,418,1.525,419,1.12,420,1.12,421,2.818,422,2.705,423,1.12,424,1.12,425,1.12,426,1.12,427,1.12,428,1.12,429,2.369,430,1.727,431,1.12,432,2.108,433,2.108,434,1.727,435,2.108,436,1.12,437,1.12,438,1.12,439,1.12,440,1.12,441,2.56,442,1.12,443,1.12,444,1.12,445,1.12,446,1.12,447,0.989,448,1.12,449,3.354,450,2.56,451,2.108,452,1.12,453,1.727,454,1.12,455,1.12,456,1.12,457,1.12,458,1.12,459,1.727,460,2.819,461,1.12,462,1.12,463,2.819,464,2.986,465,2.489,466,2.962,467,2.369,468,1.12,469,1.12,470,1.12,471,1.727,472,1.727,473,1.727,474,1.727,475,2.108,476,2.108,477,2.369,478,2.56,479,1.727,480,1.12,481,2.56,482,1.12,483,2.56,484,1.12,485,1.12,486,1.727,487,1.12,488,1.12,489,1.12,490,1.12,491,1.12,492,1.12,493,1.12,494,1.12,495,1.12,496,1.12,497,1.12,498,1.12,499,2.56,500,2.369,501,2.819,502,1.12,503,1.727,504,2.369,505,1.727,506,1.727,507,2.26,508,1.12,509,1.12,510,2.108,511,1.12,512,2.705,513,1.12,514,1.12,515,1.12,516,1.12,517,1.12,518,1.12,519,1.727,520,1.727,521,1.12,522,1.12,523,1.12,524,2.108,525,1.12,526,1.12,527,1.12,528,1.12,529,1.12,530,1.12,531,1.12,532,1.12,533,1.12,534,1.12,535,1.12,536,1.12,537,1.12,538,1.12,539,1.727,540,0.989,541,0.989,542,1.12,543,1.12,544,1.12,545,1.12,546,1.12,547,1.12,548,1.12,549,1.12,550,1.12,551,1.12,552,1.525,553,1.12,554,0.989,555,1.12,556,1.12,557,1.12]],["title/interfaces/ScrollBottomEvent.html",[0,0.064,269,1.563]],["body/interfaces/ScrollBottomEvent.html",[0,0.064,2,0.65,3,0.202,4,0.202,5,0.202,7,0.976,11,1.242,12,0.904,14,0.044,15,0.592,17,1.11,21,0.279,22,0.492,23,0.724,25,0.377,26,0.204,27,1.11,28,0.884,31,1.631,32,1.554,33,1.82,34,1.456,35,1.688,37,0.681,40,0.321,41,1.11,42,0.904,45,1.382,50,0.808,51,1.554,53,0.904,54,0.904,57,0.895,60,0.867,62,1.151,65,1.174,77,1.085,80,1.089,84,0.014,85,0.021,86,0.014,96,0.465,102,1.386,116,1.11,125,0.582,126,1.506,147,1.016,148,1.558,154,1.238,157,1.558,160,1.558,164,1.085,174,1.016,175,2.148,180,1.238,185,0.904,186,0.904,187,2.036,188,1.238,191,1.238,192,0.808,194,1.016,195,1.383,196,1.151,197,0.995,198,1.764,199,1.764,200,1.764,201,1.016,202,0.582,203,1.349,204,1.016,205,1.151,207,1.151,208,1.151,209,1.151,210,1.151,211,2.289,212,1.151,213,1.764,216,2.123,217,1.894,218,1.894,219,2.404,222,2.123,223,1.016,224,2.145,225,2.145,226,2.145,228,1.151,229,2.145,230,1.764,231,1.764,233,2.123,235,1.016,236,1.151,238,0.724,239,1.764,240,1.151,241,2.592,243,0.995,244,1.764,247,1.11,248,1.558,249,1.386,250,2.145,253,1.151,254,1.151,255,1.764,257,1.349,258,1.016,259,1.016,260,1.151,261,1.151,262,3.011,263,2.145,264,1.151,265,1.764,266,1.016,267,1.016,268,1.016,269,1.558,270,1.016,271,1.558,272,1.764,273,1.151,274,1.151,275,1.151,276,1.151,277,1.151,278,1.151,279,1.151,280,1.151,281,2.145,282,1.151,283,1.151,284,1.151,285,1.764,286,1.631,287,2.937,288,1.764,289,1.764,290,1.764,291,2.145,292,1.016,293,1.764,294,2.145,295,1.764,296,1.151,297,1.151,298,1.151,299,1.151,300,1.151,301,1.151,302,2.145,303,1.764,304,2.041,305,1.764,306,3.349,307,3.349,308,1.764,309,1.764,310,2.846,311,2.735,312,2.592,313,2.404,314,1.151,315,1.016,316,1.151,317,1.151,318,1.151,319,1.151,320,2.145,321,1.151,322,1.151,323,1.151,324,1.764,325,1.151,326,1.764,327,1.151,328,1.151,329,1.151,330,1.151,331,1.151,332,1.151,333,1.151,334,1.151,335,1.151,336,1.151,337,1.151,338,1.151,339,1.151,340,2.145,341,1.764,342,1.151,343,1.151,344,1.151,345,1.151,346,1.151,347,1.764,348,1.764,349,1.151,350,1.151,351,2.404,352,1.151,353,2.145,354,1.151,355,1.151,356,1.151,357,1.764,358,1.764,359,1.151,360,1.11,361,1.151,362,1.151,363,1.11,364,1.512,365,1.764,366,1.764,367,1.151,368,1.11,369,1.764,370,1.764,371,1.151,372,1.151,373,1.151,374,1.151,375,1.151,376,1.151,377,1.151,378,1.764,379,1.151,380,1.151,381,1.151,382,1.151,383,1.151,384,1.151,385,1.151,386,1.151,387,1.151]],["title/interfaces/ScrollTopEvent.html",[0,0.064,270,1.563]],["body/interfaces/ScrollTopEvent.html",[0,0.064,2,0.65,3,0.202,4,0.202,5,0.202,7,0.976,11,1.242,12,0.904,14,0.044,15,0.592,17,1.11,21,0.279,22,0.492,23,0.724,25,0.377,26,0.204,27,1.11,28,0.884,31,1.631,32,1.554,33,1.82,34,1.456,35,1.688,37,0.681,40,0.321,41,1.11,42,0.904,45,1.382,50,0.808,51,1.554,53,0.904,54,0.904,57,0.895,60,0.867,62,1.151,65,1.174,77,1.085,80,1.089,84,0.014,85,0.021,86,0.014,96,0.465,102,1.386,116,1.11,125,0.582,126,1.506,147,1.016,148,1.558,154,1.238,157,1.558,160,1.558,164,1.085,174,1.016,175,2.148,180,1.238,185,0.904,186,0.904,187,2.036,188,1.238,191,1.238,192,0.808,194,1.016,195,1.383,196,1.151,197,0.995,198,1.764,199,1.764,200,1.764,201,1.016,202,0.582,203,1.349,204,1.016,205,1.151,207,1.151,208,1.151,209,1.151,210,1.151,211,2.289,212,1.151,213,1.764,216,2.123,217,1.894,218,1.894,219,2.404,222,2.123,223,1.016,224,2.145,225,2.145,226,2.145,228,1.151,229,2.145,230,1.764,231,1.764,233,2.123,235,1.016,236,1.151,238,0.724,239,1.764,240,1.151,241,2.592,243,0.995,244,1.764,247,1.11,248,1.558,249,1.386,250,2.145,253,1.151,254,1.151,255,1.764,257,1.349,258,1.016,259,1.016,260,1.151,261,1.151,262,3.011,263,2.145,264,1.151,265,1.764,266,1.016,267,1.016,268,1.016,269,1.016,270,1.558,271,1.558,272,1.764,273,1.151,274,1.151,275,1.151,276,1.151,277,1.151,278,1.151,279,1.151,280,1.151,281,2.145,282,1.151,283,1.151,284,1.151,285,1.764,286,1.631,287,2.937,288,1.764,289,1.764,290,1.764,291,2.145,292,1.016,293,1.764,294,2.145,295,1.764,296,1.151,297,1.151,298,1.151,299,1.151,300,1.151,301,1.151,302,2.145,303,1.764,304,2.041,305,1.764,306,3.349,307,3.349,308,1.764,309,1.764,310,2.846,311,2.735,312,2.592,313,2.404,314,1.151,315,1.016,316,1.151,317,1.151,318,1.151,319,1.151,320,2.145,321,1.151,322,1.151,323,1.151,324,1.764,325,1.151,326,1.764,327,1.151,328,1.151,329,1.151,330,1.151,331,1.151,332,1.151,333,1.151,334,1.151,335,1.151,336,1.151,337,1.151,338,1.151,339,1.151,340,2.145,341,1.764,342,1.151,343,1.151,344,1.151,345,1.151,346,1.151,347,1.764,348,1.764,349,1.151,350,1.151,351,2.404,352,1.151,353,2.145,354,1.151,355,1.151,356,1.151,357,1.764,358,1.764,359,1.151,360,1.11,361,1.151,362,1.151,363,1.11,364,1.512,365,1.764,366,1.764,367,1.151,368,1.11,369,1.764,370,1.764,371,1.151,372,1.151,373,1.151,374,1.151,375,1.151,376,1.151,377,1.151,378,1.764,379,1.151,380,1.151,381,1.151,382,1.151,383,1.151,384,1.151,385,1.151,386,1.151,387,1.151]],["title/dependencies.html",[582,2.431,583,2.857]],["body/dependencies.html",[14,0.042,21,0.683,84,0.033,85,0.038,86,0.033,583,4.333,584,4.624,585,4.624,586,4.624,587,4.624,588,4.333]],["title/miscellaneous/functions.html",[589,1.99,590,2.857]],["body/miscellaneous/functions.html",[9,0.847,11,1.339,14,0.042,84,0.031,85,0.037,86,0.031,99,1.965,100,1.415,101,1.965,105,1.965,127,2.085,164,1.348,403,2.354,404,2.926,415,2.758,421,2.758,465,2.354,466,3.018,540,2.758,541,2.758,552,2.758,554,2.354,589,3.579,590,3.579,591,5.125,592,5.125,593,4.373,594,4.373]],["title/index.html",[9,0.471,595,1.99,596,1.99]],["body/index.html",[0,0.102,7,1.094,11,1.392,14,0.041,15,0.588,24,2.594,26,0.262,33,1.986,35,2.167,65,1.025,84,0.027,85,0.033,86,0.027,102,1.777,127,1.423,154,1.589,184,3.038,190,2.594,191,2.466,192,2.384,195,1.431,197,1.277,201,1.998,202,1.431,211,2.998,217,2.725,218,2.725,222,2.725,223,1.998,233,3.075,235,1.998,248,1.998,249,2.222,258,2.498,259,1.998,394,3.086,399,3.038,401,3.038,447,1.998,507,1.998,588,3.038,597,5.063,598,5.063,599,3.712,600,3.712,601,3.712,602,3.712,603,3.712,604,4.641,605,3.712,606,4.641,607,4.641,608,4.641,609,3.712,610,3.712,611,3.712,612,2.594,613,5.063,614,3.712,615,3.712,616,3.712,617,3.712,618,3.712,619,3.712,620,3.712,621,3.712,622,5.063,623,5.063,624,3.712,625,3.712,626,3.712,627,3.712,628,3.712,629,3.712,630,3.712,631,5.063,632,3.712,633,4.641,634,3.712,635,3.712,636,3.712,637,3.712,638,3.712,639,3.712,640,4.641,641,3.712,642,3.038,643,3.712,644,3.712,645,3.712,646,3.712]],["title/license.html",[595,1.99,596,1.99,647,2.431]],["body/license.html",[14,0.035,84,0.03,85,0.035,86,0.03,216,2.213,243,1.414,249,1.969,642,4.044,648,5.298,649,4.113,650,4.113,651,4.113,652,4.942,653,4.113,654,4.113,655,4.113,656,4.113,657,4.113,658,4.113,659,4.942,660,5.861,661,4.113,662,4.113,663,4.113,664,4.113,665,5.298,666,4.113,667,4.942,668,4.113,669,4.113,670,4.113,671,4.113,672,4.113,673,4.113,674,4.113,675,4.113,676,4.113,677,4.942,678,4.113,679,4.113,680,4.113,681,4.113,682,4.113,683,4.113,684,4.113,685,4.942,686,4.942,687,4.113,688,4.113,689,4.113,690,4.113,691,4.113,692,4.113,693,4.113,694,4.113,695,4.113,696,4.113,697,4.113,698,4.113,699,4.113,700,4.113,701,4.113,702,4.113,703,4.113,704,4.113,705,4.113,706,4.113,707,4.113,708,4.113,709,4.113,710,4.113,711,4.113,712,4.113,713,4.113,714,4.113]],["title/modules.html",[395,2.763]],["body/modules.html",[14,0.038,84,0.034,85,0.038,86,0.034,394,2.86,395,3.279,715,4.692]],["title/overview.html",[612,2.763]],["body/overview.html",[2,1.588,14,0.038,84,0.033,85,0.038,86,0.033,87,2.814,145,3.227,181,2.485,191,1.976,292,2.846,315,2.846,393,3.779,612,3.227,716,4.617,717,4.617]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":77,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["0px",{"_index":333,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["1",{"_index":292,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["1.0",{"_index":335,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["10",{"_index":229,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["100",{"_index":231,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["11.0.9",{"_index":588,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":716,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":649,"title":{},"body":{"license.html":{}}}],["3",{"_index":315,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["30",{"_index":47,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["50",{"_index":230,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["8",{"_index":717,"title":{},"body":{"overview.html":{}}}],["9999999",{"_index":387,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["above",{"_index":684,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":93,"title":{},"body":{"classes/Cursor.html":{}}}],["action",{"_index":707,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":392,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["add",{"_index":560,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["add(storename",{"_index":462,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["afterviewinit",{"_index":199,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["and/or",{"_index":675,"title":{},"body":{"license.html":{}}}],["angular",{"_index":602,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":21,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{}}}],["angularjs",{"_index":599,"title":{},"body":{"index.html":{}}}],["any).result",{"_index":451,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["api",{"_index":604,"title":{},"body":{"index.html":{}}}],["appended",{"_index":248,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["args",{"_index":179,"title":{},"body":{"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["args.foreach((arg",{"_index":468,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arising",{"_index":711,"title":{},"body":{"license.html":{}}}],["arrange(deleteattop",{"_index":79,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["array",{"_index":60,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["array).foreach((v",{"_index":535,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybuffer",{"_index":473,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybufferview",{"_index":472,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["associated",{"_index":661,"title":{},"body":{"license.html":{}}}],["async",{"_index":203,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["attached",{"_index":72,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["attribute",{"_index":622,"title":{},"body":{"index.html":{}}}],["authors",{"_index":701,"title":{},"body":{"license.html":{}}}],["autofetchingbottom",{"_index":207,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autofetchingbottom(autofetchingtop",{"_index":629,"title":{},"body":{"index.html":{}}}],["autofetchingtop",{"_index":208,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autoloadscrollposition",{"_index":209,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["automatically",{"_index":218,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["await",{"_index":360,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["base",{"_index":428,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.add",{"_index":439,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.get",{"_index":431,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["big",{"_index":226,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["boolean",{"_index":80,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom",{"_index":33,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["bottom(top",{"_index":631,"title":{},"body":{"index.html":{}}}],["bottom.directive",{"_index":267,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom.directive.ts",{"_index":182,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{}}}],["bottombeforeadded",{"_index":362,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottomcursor",{"_index":119,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomcursor.tostring",{"_index":132,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomdirective",{"_index":275,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["break",{"_index":348,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["browse",{"_index":715,"title":{},"body":{"modules.html":{}}}],["button",{"_index":646,"title":{},"body":{"index.html":{}}}],["called",{"_index":254,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["case",{"_index":347,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["catch",{"_index":369,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cb",{"_index":529,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cb(v",{"_index":536,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["changes.countperloadmode",{"_index":299,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["changes.countperloadmode.currentvalue",{"_index":300,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["charge",{"_index":656,"title":{},"body":{"license.html":{}}}],["children",{"_index":621,"title":{},"body":{"index.html":{}}}],["claim",{"_index":704,"title":{},"body":{"license.html":{}}}],["class",{"_index":26,"title":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["classes",{"_index":87,"title":{},"body":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"overview.html":{}}}],["clear",{"_index":50,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["clear(storename",{"_index":494,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["clearall",{"_index":496,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cli",{"_index":603,"title":{},"body":{"index.html":{}}}],["click",{"_index":643,"title":{},"body":{"index.html":{}}}],["component",{"_index":191,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":389,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["components",{"_index":193,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["conditions",{"_index":683,"title":{},"body":{"license.html":{}}}],["connection",{"_index":713,"title":{},"body":{"license.html":{}}}],["console.error('mugenscrolldatadirective",{"_index":350,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.bottom",{"_index":354,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.top",{"_index":352,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('provider",{"_index":349,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error(ev",{"_index":459,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`fetch",{"_index":433,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`filter",{"_index":530,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`from",{"_index":515,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`load",{"_index":137,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["console.log(`save",{"_index":130,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["const",{"_index":62,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor(datas",{"_index":94,"title":{},"body":{"classes/Cursor.html":{}}}],["constructor(message",{"_index":408,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["constructor(public",{"_index":411,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["content",{"_index":307,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild",{"_index":261,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrollbottomdirective",{"_index":274,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolldatadirective",{"_index":278,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolltopdirective",{"_index":276,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contract",{"_index":708,"title":{},"body":{"license.html":{}}}],["copies",{"_index":677,"title":{},"body":{"license.html":{}}}],["copy",{"_index":659,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":648,"title":{},"body":{"license.html":{}}}],["countperload",{"_index":283,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["countperloadmode",{"_index":210,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ctx",{"_index":1,"title":{"interfaces/Ctx.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["ctx.data",{"_index":83,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["current",{"_index":257,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["current.getitems",{"_index":504,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["current.tostring",{"_index":514,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursor",{"_index":22,"title":{"classes/Cursor.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursor([v.tostring",{"_index":49,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["cursor.continue",{"_index":527,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursorstoreinfo",{"_index":116,"title":{"interfaces/CursorStoreInfo.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreinfo.scrolltop",{"_index":342,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreservice",{"_index":126,"title":{"injectables/CursorStoreService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["damages",{"_index":705,"title":{},"body":{"license.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data.directive",{"_index":268,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["data.directive.ts",{"_index":8,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["data.index",{"_index":618,"title":{},"body":{"index.html":{}}}],["data.message",{"_index":619,"title":{},"body":{"index.html":{}}}],["datadirective",{"_index":279,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["dataprovider",{"_index":154,"title":{"interfaces/DataProvider.html":{}},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas",{"_index":102,"title":{},"body":{"classes/Cursor.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas.foreach(data",{"_index":61,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datas.map(v",{"_index":111,"title":{},"body":{"classes/Cursor.html":{}}}],["datas.reverse().foreach(data",{"_index":76,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datasmap",{"_index":29,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["date",{"_index":471,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db",{"_index":421,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["db.createobjectstore",{"_index":543,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames",{"_index":498,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames.contains(storename",{"_index":542,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.transaction(storename",{"_index":555,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["dbname",{"_index":423,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["deal",{"_index":664,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":714,"title":{},"body":{"license.html":{}}}],["debug",{"_index":280,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["declarations",{"_index":397,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["default",{"_index":568,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["defined",{"_index":97,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["delete",{"_index":146,"title":{},"body":{"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["delete(p",{"_index":142,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["delete(storename",{"_index":566,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["delimiter",{"_index":95,"title":{},"body":{"classes/Cursor.html":{}}}],["demo1",{"_index":607,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":583,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["direction",{"_index":512,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["directive",{"_index":16,"title":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["directives",{"_index":181,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"overview.html":{}}}],["displayed",{"_index":235,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["distribute",{"_index":673,"title":{},"body":{"license.html":{}}}],["docs",{"_index":636,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":662,"title":{},"body":{"license.html":{}}}],["during",{"_index":614,"title":{},"body":{"index.html":{}}}],["el",{"_index":41,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["element",{"_index":185,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["elementref",{"_index":17,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["embeddedviewref",{"_index":18,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["emitted",{"_index":244,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["end",{"_index":500,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["end.getitems",{"_index":505,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["entities",{"_index":322,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entities.foreach(entity",{"_index":323,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.isintersecting",{"_index":326,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.target",{"_index":324,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["eof",{"_index":523,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["err",{"_index":370,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error",{"_index":405,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('db",{"_index":442,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('mugenscrollbottomdirective",{"_index":305,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolldatadirective",{"_index":311,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolltopdirective",{"_index":309,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('provider",{"_index":313,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error(`cannot",{"_index":556,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev",{"_index":449,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev.target",{"_index":450,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["event",{"_index":243,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["eventemitter",{"_index":241,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["example",{"_index":637,"title":{},"body":{"index.html":{}}}],["export",{"_index":25,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["exports",{"_index":398,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["express",{"_index":692,"title":{},"body":{"license.html":{}}}],["false",{"_index":286,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["feature",{"_index":634,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":247,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetch(base",{"_index":570,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["fetchbottom",{"_index":157,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchbottom(cursor",{"_index":161,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetched",{"_index":217,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["fetcher",{"_index":430,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fetchoninit",{"_index":158,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchoninit(n",{"_index":165,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload",{"_index":159,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload(info",{"_index":167,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchtop",{"_index":160,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchtop(cursor",{"_index":169,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["files",{"_index":663,"title":{},"body":{"license.html":{}}}],["filter",{"_index":528,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["filter(storename",{"_index":572,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["find",{"_index":437,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fitness",{"_index":697,"title":{},"body":{"license.html":{}}}],["following",{"_index":682,"title":{},"body":{"license.html":{}}}],["free",{"_index":655,"title":{},"body":{"license.html":{}}}],["function",{"_index":539,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["functions",{"_index":590,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":680,"title":{},"body":{"license.html":{}}}],["generated",{"_index":601,"title":{},"body":{"index.html":{}}}],["get(p",{"_index":144,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["get(storename",{"_index":575,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getitem",{"_index":90,"title":{},"body":{"classes/Cursor.html":{}}}],["getitem(i",{"_index":103,"title":{},"body":{"classes/Cursor.html":{}}}],["getitems",{"_index":91,"title":{},"body":{"classes/Cursor.html":{}}}],["getlargern",{"_index":561,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlargern(storename",{"_index":577,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlength",{"_index":108,"title":{},"body":{"classes/Cursor.html":{}}}],["getsmallern",{"_index":508,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["getsmallern(storename",{"_index":579,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getting",{"_index":595,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":654,"title":{},"body":{"license.html":{}}}],["hereby",{"_index":653,"title":{},"body":{"license.html":{}}}],["holders",{"_index":702,"title":{},"body":{"license.html":{}}}],["htmlelement",{"_index":186,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scroll(0",{"_index":341,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scrolltop",{"_index":359,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["i.bottomcursor.tostring",{"_index":138,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.n",{"_index":140,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.scrolltop",{"_index":141,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.topcursor.tostring",{"_index":139,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["id",{"_index":239,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["idbarraykey",{"_index":474,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbcursorwithvalue",{"_index":522,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbdatabase",{"_index":422,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbfactory",{"_index":420,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange",{"_index":475,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.bound",{"_index":503,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.lowerbound(current.getitems",{"_index":502,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.upperbound(current.getitems",{"_index":509,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbrequest",{"_index":533,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbtransaction",{"_index":554,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx",{"_index":477,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.get(query",{"_index":480,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.getkey(key",{"_index":487,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.service.ts",{"_index":404,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx.service.ts:105",{"_index":563,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:113",{"_index":576,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:138",{"_index":567,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:171",{"_index":564,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:186",{"_index":565,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:198",{"_index":578,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:225",{"_index":580,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:293",{"_index":574,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:31",{"_index":562,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:39",{"_index":571,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:6",{"_index":409,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:7",{"_index":410,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:75",{"_index":581,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["ignore",{"_index":31,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["implementing",{"_index":632,"title":{},"body":{"index.html":{}}}],["implements",{"_index":197,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["implied",{"_index":693,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["imports",{"_index":401,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["included",{"_index":687,"title":{},"body":{"license.html":{}}}],["includeequal",{"_index":162,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["including",{"_index":667,"title":{},"body":{"license.html":{}}}],["indecies",{"_index":541,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indecies.foreach(v",{"_index":544,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indexed",{"_index":435,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexeddb",{"_index":419,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexname",{"_index":499,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indices",{"_index":417,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["infinite",{"_index":597,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["info(...args",{"_index":177,"title":{},"body":{"interfaces/Logger.html":{}}}],["info(...msgs",{"_index":272,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init",{"_index":204,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init(version",{"_index":443,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["initialize",{"_index":253,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initially",{"_index":236,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initstore",{"_index":540,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["initstore(db",{"_index":593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":123,"title":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["injectables",{"_index":145,"title":{},"body":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{},"overview.html":{}}}],["input",{"_index":262,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["inputs",{"_index":206,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["intersectionobserver",{"_index":281,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["iter",{"_index":511,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key",{"_index":429,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2",{"_index":486,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onerror",{"_index":493,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onsuccess",{"_index":488,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["keypath",{"_index":415,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":691,"title":{},"body":{"license.html":{}}}],["left",{"_index":639,"title":{},"body":{"index.html":{}}}],["length",{"_index":56,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{}}}],["liability",{"_index":706,"title":{},"body":{"license.html":{}}}],["liable",{"_index":703,"title":{},"body":{"license.html":{}}}],["lib",{"_index":201,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["libmugenscrollbottom",{"_index":184,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"index.html":{}}}],["libmugenscrollbottom]'},{'name",{"_index":390,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolldata",{"_index":24,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"index.html":{}}}],["libmugenscrolldata]'},{'name",{"_index":391,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolltop",{"_index":190,"title":{},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"index.html":{}}}],["library",{"_index":598,"title":{},"body":{"index.html":{}}}],["license",{"_index":647,"title":{"license.html":{}},"body":{}}],["limitation",{"_index":668,"title":{},"body":{"license.html":{}}}],["limited",{"_index":694,"title":{},"body":{"license.html":{}}}],["live",{"_index":606,"title":{},"body":{"index.html":{}}}],["load",{"_index":147,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["load(p",{"_index":135,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["loaded",{"_index":223,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["local",{"_index":625,"title":{},"body":{"index.html":{}}}],["located",{"_index":640,"title":{},"body":{"index.html":{}}}],["logger",{"_index":175,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["map",{"_index":30,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{}}}],["matching",{"_index":85,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":36,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["memory",{"_index":259,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["merchantability",{"_index":696,"title":{},"body":{"license.html":{}}}],["merge",{"_index":671,"title":{},"body":{"license.html":{}}}],["message",{"_index":406,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["metadata",{"_index":183,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["method",{"_index":250,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["methods",{"_index":89,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["middle",{"_index":225,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["miscellaneous",{"_index":589,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":552,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["modify",{"_index":670,"title":{},"body":{"license.html":{}}}],["module",{"_index":393,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":395,"title":{"modules.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"modules.html":{}}}],["more",{"_index":645,"title":{},"body":{"index.html":{}}}],["msgs",{"_index":559,"title":{},"body":{"classes/NullLogger.html":{}}}],["mugen",{"_index":195,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["mugenscrollbottomdirective",{"_index":180,"title":{"directives/MugenScrollBottomDirective.html":{}},"body":{"directives/MugenScrollBottomDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolldatadirective",{"_index":27,"title":{"directives/MugenScrollDataDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolltopdirective",{"_index":188,"title":{"directives/MugenScrollTopDirective.html":{}},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["n",{"_index":120,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["name",{"_index":100,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":610,"title":{},"body":{"index.html":{}}}],["new",{"_index":45,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["newcursor",{"_index":38,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{}}}],["newcursor(v",{"_index":171,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["next",{"_index":507,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["ng",{"_index":306,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngafterviewinit",{"_index":255,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngmodule",{"_index":399,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":298,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngoninit",{"_index":296,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngx",{"_index":202,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscroll",{"_index":600,"title":{},"body":{"index.html":{}}}],["ngxmugenscrollcomponent",{"_index":192,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscrollmodule",{"_index":394,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{},"modules.html":{}}}],["noninfringement",{"_index":700,"title":{},"body":{"license.html":{}}}],["notfoundresourceerror",{"_index":402,"title":{"classes/NotFoundResourceError.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notfoundresourceerror(`cannot",{"_index":436,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notice",{"_index":685,"title":{},"body":{"license.html":{}}}],["null",{"_index":478,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["nulllogger",{"_index":271,"title":{"classes/NullLogger.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["number",{"_index":37,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["objectstorenames",{"_index":497,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["obtaining",{"_index":658,"title":{},"body":{"license.html":{}}}],["offset",{"_index":382,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["onchanges",{"_index":200,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["oninit",{"_index":198,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["optional",{"_index":101,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["ordereddatastoreidxservice",{"_index":418,"title":{"injectables/OrderedDataStoreIdxService.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxserviceindex",{"_index":414,"title":{"interfaces/OrderedDataStoreIdxServiceIndex.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxservicestore",{"_index":416,"title":{"interfaces/OrderedDataStoreIdxServiceStore.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["otherwise",{"_index":710,"title":{},"body":{"license.html":{}}}],["out",{"_index":712,"title":{},"body":{"license.html":{}}}],["output",{"_index":263,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["outputs",{"_index":214,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["overview",{"_index":612,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":131,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["package",{"_index":582,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":99,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":698,"title":{},"body":{"license.html":{}}}],["peer",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["permission",{"_index":652,"title":{},"body":{"license.html":{}}}],["permit",{"_index":678,"title":{},"body":{"license.html":{}}}],["person",{"_index":657,"title":{},"body":{"license.html":{}}}],["persons",{"_index":679,"title":{},"body":{"license.html":{}}}],["portions",{"_index":689,"title":{},"body":{"license.html":{}}}],["position",{"_index":222,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["prev",{"_index":510,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["previous",{"_index":316,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["private",{"_index":28,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["promise",{"_index":164,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":363,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["promise>((resolve",{"_index":520,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provided",{"_index":249,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":124,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provider",{"_index":211,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["provides",{"_index":613,"title":{},"body":{"index.html":{}}}],["public",{"_index":32,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["publish",{"_index":672,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":699,"title":{},"body":{"license.html":{}}}],["push(...datas",{"_index":59,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["query",{"_index":470,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r",{"_index":66,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.detectchanges",{"_index":69,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r.onerror",{"_index":483,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.onsuccess",{"_index":481,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.rootnodes[0].setattribute('_cursor",{"_index":68,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r2",{"_index":532,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r2.result",{"_index":534,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range",{"_index":501,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.lower",{"_index":516,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.upper",{"_index":517,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["read",{"_index":644,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":407,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["readwrite",{"_index":467,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["redisplayed",{"_index":617,"title":{},"body":{"index.html":{}}}],["ref",{"_index":81,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["reference",{"_index":635,"title":{},"body":{"index.html":{}}}],["references",{"_index":605,"title":{},"body":{"index.html":{}}}],["reflectiveinjector",{"_index":264,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["reject",{"_index":364,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["reject(ev",{"_index":460,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reject(r.error",{"_index":484,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["related",{"_index":260,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["remote",{"_index":438,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["represents",{"_index":623,"title":{},"body":{"index.html":{}}}],["request",{"_index":445,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onblocked",{"_index":458,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onerror",{"_index":461,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onsuccess",{"_index":448,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onupgradeneeded",{"_index":452,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["requested",{"_index":228,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["resolve",{"_index":368,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["resolve(r.result",{"_index":482,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resolve(ret",{"_index":524,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["restriction",{"_index":666,"title":{},"body":{"license.html":{}}}],["result",{"_index":84,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":86,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["resultsinitstore",{"_index":453,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resultsinitstore.push(initstore(db",{"_index":455,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret",{"_index":519,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(cursor.value",{"_index":525,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(v",{"_index":537,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(cursor.value",{"_index":526,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(v",{"_index":538,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["return",{"_index":57,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["returns",{"_index":105,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":641,"title":{},"body":{"index.html":{}}}],["rights",{"_index":669,"title":{},"body":{"license.html":{}}}],["root",{"_index":125,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["rootmargin",{"_index":332,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["row",{"_index":624,"title":{},"body":{"index.html":{}}}],["s",{"_index":378,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save",{"_index":148,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save(p",{"_index":129,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["saved",{"_index":258,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["savescrollposition",{"_index":205,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll",{"_index":7,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["scroll.component",{"_index":400,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.component.ts",{"_index":196,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll.component.ts:13",{"_index":558,"title":{},"body":{"classes/NullLogger.html":{}}}],["scroll.component.ts:151",{"_index":252,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:248",{"_index":256,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:278",{"_index":246,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:312",{"_index":251,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:39",{"_index":232,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:46",{"_index":237,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:52",{"_index":234,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:61",{"_index":227,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:67",{"_index":215,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:73",{"_index":220,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:79",{"_index":221,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:85",{"_index":242,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:91",{"_index":245,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.module.ts",{"_index":396,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.ts",{"_index":155,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:10",{"_index":168,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:12",{"_index":166,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:13",{"_index":173,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:6",{"_index":163,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:8",{"_index":170,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrollbottom",{"_index":386,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollbottomevent",{"_index":269,"title":{"interfaces/ScrollBottomEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollbottomoninit",{"_index":212,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolled",{"_index":219,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollid",{"_index":156,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrolling",{"_index":615,"title":{},"body":{"index.html":{}}}],["scrolltop",{"_index":121,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["scrolltopat(at",{"_index":375,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolltopevent",{"_index":270,"title":{"interfaces/ScrollTopEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["selector",{"_index":23,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["sell",{"_index":676,"title":{},"body":{"license.html":{}}}],["set",{"_index":608,"title":{},"body":{"index.html":{}}}],["setcountperload",{"_index":345,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["settimeout",{"_index":366,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["shall",{"_index":686,"title":{},"body":{"license.html":{}}}],["simple",{"_index":638,"title":{},"body":{"index.html":{}}}],["simplechanges",{"_index":265,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["small",{"_index":224,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["software",{"_index":660,"title":{},"body":{"license.html":{}}}],["sort",{"_index":518,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["specified",{"_index":627,"title":{},"body":{"index.html":{}}}],["src/.../ordered",{"_index":591,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/cursor",{"_index":117,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["src/lib/cursor.ts",{"_index":88,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:10",{"_index":107,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:13",{"_index":104,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:16",{"_index":106,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:2",{"_index":98,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:9",{"_index":109,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/logger.ts",{"_index":176,"title":{},"body":{"interfaces/Logger.html":{}}}],["src/lib/logger.ts:2",{"_index":178,"title":{},"body":{"interfaces/Logger.html":{}}}],["src/lib/mugen",{"_index":6,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["src/lib/ngx",{"_index":194,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["src/lib/ordered",{"_index":403,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":596,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":302,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["static",{"_index":427,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store",{"_index":127,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["store.clear",{"_index":495,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.createindex",{"_index":545,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.delete(key",{"_index":485,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.index(index",{"_index":479,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.indices",{"_index":457,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.keypath",{"_index":456,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name",{"_index":432,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name}.${index}.${key",{"_index":434,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.service",{"_index":174,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["store.service.ts",{"_index":118,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["store.service.ts:16",{"_index":149,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:22",{"_index":153,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:27",{"_index":152,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:36",{"_index":150,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:40",{"_index":151,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.transaction.onabort",{"_index":550,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.oncomplete",{"_index":549,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.onerror",{"_index":551,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["storename",{"_index":466,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["storename}.${indexname",{"_index":513,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores",{"_index":444,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores.foreach(async",{"_index":454,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stream",{"_index":233,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["string",{"_index":96,"title":{},"body":{"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["styles",{"_index":273,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["subject",{"_index":681,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":674,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":688,"title":{},"body":{"license.html":{}}}],["suitable",{"_index":616,"title":{},"body":{"index.html":{}}}],["suzuki",{"_index":651,"title":{},"body":{"license.html":{}}}],["switch",{"_index":346,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["t",{"_index":172,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["t,i",{"_index":573,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["tag",{"_index":628,"title":{},"body":{"index.html":{}}}],["taito",{"_index":650,"title":{},"body":{"license.html":{}}}],["target",{"_index":489,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["target.result",{"_index":491,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tbd",{"_index":633,"title":{},"body":{"index.html":{}}}],["template",{"_index":42,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["templateref",{"_index":19,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["then(resolve).catch(reject",{"_index":492,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.arrange(false",{"_index":78,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.arrange(true",{"_index":74,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.autofetchingbottom",{"_index":288,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autofetchingtop",{"_index":289,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autoloadscrollposition",{"_index":290,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom",{"_index":54,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom.emit",{"_index":330,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective",{"_index":303,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective.element",{"_index":329,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.constructor.name",{"_index":413,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.countperload",{"_index":287,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.countperloadmode",{"_index":294,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.load(this.provider.scrollid",{"_index":338,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.save",{"_index":355,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective",{"_index":310,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.bottom",{"_index":353,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.clear",{"_index":317,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.max",{"_index":314,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.newcursor",{"_index":318,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.push(...datas",{"_index":340,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.top",{"_index":351,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.unshift(...datas",{"_index":373,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datas",{"_index":110,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.join(this.delimiter",{"_index":113,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.length",{"_index":112,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.map(v",{"_index":115,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas[i",{"_index":114,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datasmap",{"_index":44,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.clear",{"_index":55,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.has(cursor.tostring",{"_index":64,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.set(cursor.tostring",{"_index":73,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.db",{"_index":441,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.dbname",{"_index":424,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.delete(storename",{"_index":490,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.el.nativeelement",{"_index":187,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchbottom",{"_index":331,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchtop",{"_index":328,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.indexeddb",{"_index":425,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.indexeddb.open(this.dbname",{"_index":446,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.info(`i",{"_index":380,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.info(`scroll",{"_index":384,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.init",{"_index":297,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver",{"_index":320,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.disconnect",{"_index":321,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.bottomdirective.element",{"_index":336,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.topdirective.element",{"_index":337,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.iter",{"_index":506,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.logger",{"_index":293,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.logger.info(...msgs",{"_index":385,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.max",{"_index":46,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.name",{"_index":412,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.newcursor",{"_index":48,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.newcursor(data",{"_index":63,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.provider",{"_index":312,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchbottom",{"_index":361,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchoninit(this.countperload).then(datas",{"_index":343,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchonload(cursorstoreinfo).then(datas",{"_index":339,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchtop",{"_index":371,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor",{"_index":319,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at",{"_index":379,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at).tostring",{"_index":377,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.bottom",{"_index":357,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top",{"_index":358,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top).tostring",{"_index":376,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.scrollid",{"_index":356,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottom",{"_index":344,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomat(bottombeforeadded",{"_index":367,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomoninit",{"_index":285,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrolltopat(topbeforeadded",{"_index":374,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.setcountperload",{"_index":295,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.store",{"_index":128,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.delete(p",{"_index":143,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.get(p",{"_index":136,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.set(p",{"_index":134,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.timeoutmillisecondsafterbinding",{"_index":291,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.top",{"_index":53,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.top.emit",{"_index":327,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective",{"_index":308,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective.element",{"_index":325,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.uniqid",{"_index":284,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.validdb",{"_index":463,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.viewcontainer.clear",{"_index":52,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":67,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.length",{"_index":58,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["three",{"_index":620,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":334,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["throw",{"_index":304,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["timeoutmillisecondsafterbinding",{"_index":282,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top",{"_index":35,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["top.directive",{"_index":266,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top.directive.ts",{"_index":189,"title":{},"body":{"directives/MugenScrollTopDirective.html":{}}}],["topbeforeadded",{"_index":372,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["topcursor",{"_index":122,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topcursor.tostring",{"_index":133,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topdirective",{"_index":277,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tort",{"_index":709,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":92,"title":{},"body":{"classes/Cursor.html":{}}}],["transaction",{"_index":557,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["true",{"_index":65,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["try",{"_index":365,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tslib",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["tx",{"_index":464,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename",{"_index":476,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).getall",{"_index":531,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).index(indexname).opencursor(range",{"_index":521,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).put(arg",{"_index":469,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["undefined",{"_index":34,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["uniqid",{"_index":213,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unique",{"_index":238,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unshift(...datas",{"_index":75,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["until",{"_index":71,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["up",{"_index":609,"title":{},"body":{"index.html":{}}}],["usage",{"_index":611,"title":{},"body":{"index.html":{}}}],["use",{"_index":642,"title":{},"body":{"index.html":{},"license.html":{}}}],["used",{"_index":240,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["v",{"_index":39,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.element",{"_index":381,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["v.keypath",{"_index":547,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.name",{"_index":546,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.offsetheight",{"_index":383,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["v.unique",{"_index":548,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validate",{"_index":301,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["validdb",{"_index":440,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validtx",{"_index":592,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validtx(db",{"_index":465,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["value",{"_index":569,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["var",{"_index":388,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["variable",{"_index":626,"title":{},"body":{"index.html":{}}}],["version",{"_index":447,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["versionchange",{"_index":553,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["viewcontainer",{"_index":43,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["viewcontainerref",{"_index":20,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["visible",{"_index":630,"title":{},"body":{"index.html":{}}}],["void",{"_index":51,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["vref.context",{"_index":82,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["wait",{"_index":70,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["warranties",{"_index":695,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":690,"title":{},"body":{"license.html":{}}}],["whether",{"_index":216,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["window.indexeddb",{"_index":426,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["without",{"_index":665,"title":{},"body":{"license.html":{}}}],["yes",{"_index":594,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Ctx.html":{"url":"interfaces/Ctx.html","title":"interface - Ctx","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Ctx\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 30;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  /**\n   * @ignore\n   */\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cursor.html":{"url":"classes/Cursor.html","title":"class - Cursor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cursor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getItem\n                            \n                            \n                                getItems\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(datas: Array, delimiter: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        datas\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        delimiter\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItem\n                        \n                        \n                    \n                \n            \n            \n                \ngetItem(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItems\n                        \n                        \n                    \n                \n            \n            \n                \ngetItems()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/cursor.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export class Cursor {\n    private datas: Array;\n    constructor(\n        datas: Array,\n        private delimiter: string = '-',\n    ) {\n        this.datas = datas.map(v => v);\n    }\n    get length(): number { return this.datas.length; }\n    toString(): string {\n        return this.datas.join(this.delimiter);\n    }\n    getItem(i: number): number | string {\n        return this.datas[i];\n    }\n    getItems(): Array {\n        return this.datas.map(v => v);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CursorStoreInfo.html":{"url":"interfaces/CursorStoreInfo.html","title":"interface - CursorStoreInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CursorStoreInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomCursor\n                                \n                                \n                                        n\n                                \n                                \n                                        scrollTop\n                                \n                                \n                                        topCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomCursor\n                                    \n                                \n                                \n                                    \n                                        bottomCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        n\n                                    \n                                \n                                \n                                    \n                                        n:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topCursor\n                                    \n                                \n                                \n                                    \n                                        topCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CursorStoreService.html":{"url":"injectables/CursorStoreService.html","title":"injectable - CursorStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CursorStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                load\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor-store.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            load\n                        \n                        \n                    \n                \n            \n            \n                \nload(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottomCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scrollTop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataProvider.html":{"url":"interfaces/DataProvider.html","title":"interface - DataProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        scrollId\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fetchBottom\n                                \n                                \n                                    fetchOnInit\n                                \n                                \n                                    fetchOnLoad\n                                \n                                \n                                    fetchTop\n                                \n                                \n                                    newCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \nfetchBottom(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnInit(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnLoad\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnLoad(info: CursorStoreInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                                CursorStoreInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \nfetchTop(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            newCursor\n                        \n                        \n                    \n                \n            \n            \n                \nnewCursor(v: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Cursor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scrollId\n                                    \n                                \n                                \n                                    \n                                        scrollId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cursor } from './cursor';\nimport { CursorStoreInfo } from './cursor-store.service';\n\nexport interface DataProvider {\n    scrollId: string;\n    fetchBottom(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchTop(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchOnLoad(\n        info: CursorStoreInfo): Promise>;\n    fetchOnInit(n: number): Promise>;\n    newCursor(v: T): Cursor;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    info\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            info\n                        \n                        \n                    \n                \n            \n            \n                \ninfo(...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface Logger {\n    info(...args: Array): void;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollBottomDirective.html":{"url":"directives/MugenScrollBottomDirective.html","title":"directive - MugenScrollBottomDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollBottomDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-bottom.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollBottom]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollBottom]'\n})\nexport class MugenScrollBottomDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) { }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollDataDirective.html":{"url":"directives/MugenScrollDataDirective.html","title":"directive - MugenScrollDataDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollDataDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollData]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 30;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  /**\n   * @ignore\n   */\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollTopDirective.html":{"url":"directives/MugenScrollTopDirective.html","title":"directive - MugenScrollTopDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollTopDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-top.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollTop]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollTop]'\n})\nexport class MugenScrollTopDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMugenScrollComponent.html":{"url":"components/NgxMugenScrollComponent.html","title":"component - NgxMugenScrollComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxMugenScrollComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/lib/ngx-mugen-scroll.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                lib-ngx-mugen-scroll\n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchBottom\n                            \n                            \n                                    Async\n                                fetchTop\n                            \n                            \n                                init\n                            \n                            \n                                saveScrollPosition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoFetchingBottom\n                            \n                            \n                                autoFetchingTop\n                            \n                            \n                                autoLoadScrollPosition\n                            \n                            \n                                countPerLoadMode\n                            \n                            \n                                provider\n                            \n                            \n                                scrollBottomOnInit\n                            \n                            \n                                uniqId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                bottom\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoFetchingBottom\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:67\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoFetchingTop\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:73\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to top.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoLoadScrollPosition\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:79\n                            \n                        \n                \n                    \n                        Whether the scroll position is loaded automatically.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        countPerLoadMode\n                    \n                \n                \n                    \n                        Type :     \"small\" | \"middle\" | \"big\"\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:61\n                            \n                        \n                \n                    \n                        The number of data fetched by provider when new data is requested.\nIf 'small' then 10.\nIf 'middle' then 50.\nIf 'big' then 100.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        provider\n                    \n                \n                \n                    \n                        Type :         DataProvider | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:39\n                            \n                        \n                \n                    \n                        Provider of stream data\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollBottomOnInit\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:52\n                            \n                        \n                \n                    \n                        Whether scroll to bottom or not when stream is displayed initially.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        uniqId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:46\n                            \n                        \n                \n                    \n                        Unique id of stream.\nThis id is used to save scroll position.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        bottom\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:85\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:91\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to top.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchBottom()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:278\n                \n            \n\n\n            \n                \n                    Fetch data and appended to bottom.\nThe data is provided by fetchBottom method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchTop()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:312\n                \n            \n\n\n            \n                \n                    Fetch data and appended to top.\nThe data is provided by fetchTop method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:151\n                \n            \n\n\n            \n                \n                    Initialize stream. This method is also called in ngAfterViewInit.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveScrollPosition\n                        \n                        \n                    \n                \n            \n            \n                \nsaveScrollPosition()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:248\n                \n            \n\n\n            \n                \n                    Save current scroll position.\nScroll position is saved on memory and related to uniqId.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ReflectiveInjector, SimpleChanges } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n  private countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    this.dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'NgxMugenScrollComponent', 'selector': 'lib-ngx-mugen-scroll'}];\n    var DIRECTIVES = [{'name': 'MugenScrollBottomDirective', 'selector': '[libMugenScrollBottom]'},{'name': 'MugenScrollDataDirective', 'selector': '[libMugenScrollData]'},{'name': 'MugenScrollTopDirective', 'selector': '[libMugenScrollTop]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMugenScrollComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxMugenScrollModule.html":{"url":"modules/NgxMugenScrollModule.html","title":"module - NgxMugenScrollModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxMugenScrollModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxMugenScrollComponent } from './ngx-mugen-scroll.component';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n})\nexport class NgxMugenScrollModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundResourceError.html":{"url":"classes/NotFoundResourceError.html","title":"class - NotFoundResourceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundResourceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Error\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NullLogger.html":{"url":"classes/NullLogger.html","title":"class - NullLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NullLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Logger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                info\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            info\n                        \n                        \n                    \n                \n            \n            \n                \ninfo(...msgs: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    msgs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ReflectiveInjector, SimpleChanges } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n  private countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    this.dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderedDataStoreIdxService.html":{"url":"injectables/OrderedDataStoreIdxService.html","title":"injectable - OrderedDataStoreIdxService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OrderedDataStoreIdxService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                clear\n                            \n                            \n                                    Async\n                                clearAll\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Public\n                                    Async\n                                filter\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getLargerN\n                            \n                            \n                                    Async\n                                getSmallerN\n                            \n                            \n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(storeName: string, ...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear(storeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearAll()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(storeName: string, key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    key\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            fetch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(base: OrderedDataStoreIdxService, store: OrderedDataStoreIdxServiceStore, key: string, index: string, fetcher: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                OrderedDataStoreIdxService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    store\n                                    \n                                                OrderedDataStoreIdxServiceStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fetcher\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            filter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filter(storeName: string, direction: \"next\" | \"prev\", cb: (v: T,i: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:293\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    direction\n                                    \n                                            \"next\" | \"prev\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(storeName: string, query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:113\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLargerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLargerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:198\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSmallerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSmallerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:225\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(version: number, stores: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stores\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceIndex.html":{"url":"interfaces/OrderedDataStoreIdxServiceIndex.html","title":"interface - OrderedDataStoreIdxServiceIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                                \n                                        unique\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unique\n                                    \n                                \n                                \n                                    \n                                        unique:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceStore.html":{"url":"interfaces/OrderedDataStoreIdxServiceStore.html","title":"interface - OrderedDataStoreIdxServiceStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        indices\n                                \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        indices\n                                    \n                                \n                                \n                                    \n                                        indices:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollBottomEvent.html":{"url":"interfaces/ScrollBottomEvent.html","title":"interface - ScrollBottomEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollBottomEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ReflectiveInjector, SimpleChanges } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n  private countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    this.dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollTopEvent.html":{"url":"interfaces/ScrollTopEvent.html","title":"interface - ScrollTopEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollTopEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, ReflectiveInjector, SimpleChanges } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  @ContentChild(MugenScrollBottomDirective)\n  private bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  private topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  private dataDirective: MugenScrollDataDirective | undefined;\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n\n  /**\n   * Unique id of stream.\n   * This id is used to save scroll position.\n   */\n  @Input()\n  public uniqId: string;\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n  private timeoutMillisecondsAfterBinding: number;\n  private countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    this.dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `uniqId`.\n   */\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this.dataDirective.bottom;\n    this.dataDirective.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject();\n      }\n    });\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i  = [];\n    for (let i = 0; i  {\n      this.info(`i: ${i}, element: ${v.element}, offset: ${v.offsetHeight}`);\n    });\n    this.info(`scroll: ${s}`);\n  }\n\n  private info(...msgs: Array): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  private scrollBottom(): void {\n    (this.el.nativeElement as HTMLElement).scroll(0, 9999999);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^11.0.9\n        \n            @angular/core : ^11.0.9\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            initStore   (src/.../ordered-data-store-idx.service.ts)\n                        \n                        \n                            validTx   (src/.../ordered-data-store-idx.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ordered-data-store-idx.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            initStore\n                        \n                        \n                    \n                \n            \n            \n                \ninitStore(db, storeName, keyPath, indecies)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keyPath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    indecies\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validTx\n                        \n                        \n                    \n                \n            \n            \n                \nvalidTx(db, storeName, mode?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IDBTransaction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nThe infinite scroll library for AngularJS\nNgxMugenScroll\nThis library was generated with Angular CLI version 11.0.9.\n\nAPI references\nlive demo1\n\nSet up\nYou need to import NgxMugenScrollModule.\nimport { NgxMugenScrollModule } from 'ngx-mugen-scroll';\n...\n@NgModule({\n  imports: [\n      ...\n    NgxMugenScrollModule,\n      ...\n  ],Usage\nOverview\nComponent\nThis library provides NgxMugenScrollComponent that implements infinite scroll.\nNgxMugenScrollComponent has provider that provides datas displayed on the component during scrolling.\nprovider is suitable for DataProvider interface.\nScroll position is saved automatically in memory. Saved position can be loaded when stream is redisplayed.\n\n      \n      \n            {{data.index}}\n            {{data.message}}\n      \n      \nNgxMugenScrollComponent must have three children.\n\nTop component\nThe component with libMugenScrollTop attribute represents top of the NgxMugenScrollComponent.\n\n\nBottom component\nThe component with libMugenScrollBottom attribute represents bottom of the NgxMugenScrollComponent.\n\n\nData component\nThe component with libMugenScrollData attribute represents row of the stream in NgxMugenScrollComponent.\nLocal variable data is provided by provider specified in lib-ngx-mugen-scroll tag.\n\n\n\nIf autoFetchingBottom(autoFetchingTop) is set to true and top component is visible, then next data is provided by provider and appended to the bottom(top) of stream.\nProvider\nThe class implementing Provider interface provides data on the stream.\nTBD\nScroll position store feature\nTBD\nAPI\n\nreference docs\n\nExample\nSimple infinite scroll\nIn left stream, data is fetched automatically when stream is located to bottom(top).\nIn Right stream, data is not fetched automatically when stream is located to bottom(top).\nWhen use click Read more ... button, the data is fetched.\nlive demo1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright 2021 Taito Suzuki\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxMugenScrollModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
