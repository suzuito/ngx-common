var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Ctx.html",[0,0.064,1,2.03]],["body/interfaces/Ctx.html",[0,0.069,1,4.002,2,1.081,3,0.336,4,0.336,5,0.336,6,1.692,7,0.609,8,2.572,9,0.464,10,1.599,11,1.426,12,2.603,13,0.609,14,0.044,15,0.529,16,1.784,17,1.205,18,3.829,19,3.412,20,3.412,21,0.464,22,0.881,23,1.205,24,2.196,25,0.336,26,0.222,27,1.205,28,0.795,29,2.572,30,2.541,31,2.181,32,1.643,33,1.345,34,1.313,35,1.345,36,2.572,37,0.807,38,2.196,39,1.599,40,0.534,41,1.505,42,2.572,43,2.572,44,1.027,45,3.829,46,2.572,47,2.572,48,2.572,49,1.345,50,1.599,51,2.572,52,2.482,53,2.482,54,2.572,55,1.692,56,0.847,57,3.829,58,1.505,59,1.027,60,2.572,61,1.39,62,4.078,63,3.412,64,1.151,65,1.996,66,3.412,67,3.412,68,3.412,69,3.412,70,3.412,71,3.412,72,3.412,73,1.505,74,2.572,75,1.153,76,2.572,77,1.434,78,3.412,79,3.412,80,3.412,81,2.572,82,0.023,83,0.03,84,0.023]],["title/classes/Cursor.html",[22,0.494,26,0.205]],["body/classes/Cursor.html",[3,0.423,4,0.423,5,0.423,9,0.584,13,0.934,14,0.044,22,0.82,25,0.423,26,0.279,28,0.82,37,1.095,39,1.85,40,0.82,55,2.803,56,0.921,59,1.394,82,0.028,83,0.035,84,0.028,85,2.41,86,3.953,87,2.065,88,4.825,89,5.423,90,5.423,91,3.949,92,3.953,93,5.208,94,2.196,95,2.132,96,3.953,97,1.85,98,1.332,99,1.85,100,2.493,101,4.825,102,3.953,103,1.997,104,3.953,105,3.953,106,3.236,107,3.953,108,3.953,109,3.953,110,3.953,111,3.953,112,3.953,113,3.953]],["title/interfaces/CursorStoreInfo.html",[0,0.064,114,1.114]],["body/interfaces/CursorStoreInfo.html",[0,0.085,2,1.325,3,0.412,4,0.412,5,0.412,9,0.569,10,1.822,13,1.069,14,0.044,15,0.602,21,0.569,22,0.992,25,0.508,26,0.272,28,0.655,30,2.895,34,1.17,37,1.141,40,0.655,44,0.95,50,1.465,55,2.074,56,0.875,61,0.95,75,0.95,77,1.933,82,0.028,83,0.034,84,0.028,94,1.975,114,1.975,115,3.154,116,3.154,117,4.601,118,4.518,119,4.601,120,4.601,121,1.822,122,1.845,123,1.188,124,1.649,125,1.478,126,3.154,127,3.154,128,3.154,129,3.154,130,3.154,131,3.154,132,3.154,133,3.154]],["title/injectables/CursorStoreService.html",[121,1.114,124,1.243]],["body/injectables/CursorStoreService.html",[0,0.08,3,0.388,4,0.388,5,0.388,9,0.536,13,0.97,14,0.044,15,0.58,21,0.536,22,0.982,25,0.49,26,0.256,28,0.617,30,2.788,34,1.234,37,1.119,40,0.851,44,0.894,50,1.622,55,2.697,56,0.851,61,0.894,75,0.894,77,1.865,82,0.026,83,0.033,84,0.026,87,1.958,91,3.744,94,2.201,95,2.08,97,1.921,98,1.383,99,1.921,103,1.921,106,2.97,114,1.921,115,4.532,116,2.97,117,4.439,118,3.744,119,4.439,120,4.439,121,1.754,122,1.737,123,1.119,124,1.958,125,1.391,126,2.97,127,3.744,128,2.97,129,3.744,130,2.97,131,3.744,132,2.97,133,2.97,134,2.536,135,2.462,136,2.462,137,2.191,138,3.628,139,3.628,140,5.011,141,3.628,142,3.628,143,3.628]],["title/interfaces/DataProvider.html",[0,0.064,144,1.243]],["body/interfaces/DataProvider.html",[0,0.082,2,1.281,3,0.543,4,0.399,5,0.399,6,3,9,0.55,10,1.784,13,1.079,14,0.043,15,0.59,22,1.007,25,0.399,37,1.116,38,3.251,39,1.429,77,1.945,82,0.027,83,0.033,84,0.027,87,1.991,94,1.945,95,2.096,97,2.096,98,1.509,99,2.096,103,2.096,114,2.037,144,1.991,145,3.726,146,5.312,147,2.729,148,4.652,149,5.072,150,2.729,151,3.726,152,3,153,1.917,154,3.726,155,1.763,156,4.652,157,3.726,158,3.726,159,3.726,160,3.726,161,3.726,162,4.652,163,2.729,164,3.726,165,2.005]],["title/interfaces/Logger.html",[0,0.064,166,1.391]],["body/interfaces/Logger.html",[0,0.098,2,1.539,3,0.587,4,0.479,5,0.479,9,0.661,13,0.867,14,0.042,25,0.479,50,1.602,59,1.352,82,0.032,83,0.037,84,0.032,87,2.223,95,1.716,97,1.716,98,1.235,99,1.716,103,1.716,166,2.487,167,4.476,168,5.195,169,4.476,170,2.409]],["title/directives/MugenScrollBottomDirective.html",[16,1.243,171,1.243]],["body/directives/MugenScrollBottomDirective.html",[3,0.469,4,0.469,5,0.469,6,2.358,7,0.848,14,0.043,15,0.555,16,2.196,17,1.967,21,0.647,23,1.967,25,0.469,26,0.309,28,0.744,31,1.967,40,0.744,56,0.744,82,0.031,83,0.037,84,0.031,171,2.196,172,2.358,173,4.382,174,2.671,175,4.199,176,2.098,177,2.098,178,2.098,179,2.098]],["title/directives/MugenScrollDataDirective.html",[16,1.243,27,1.114]],["body/directives/MugenScrollDataDirective.html",[0,0.07,1,3.98,3,0.339,4,0.339,5,0.339,6,1.704,7,0.613,8,2.592,11,1.403,12,2.489,14,0.044,15,0.531,16,1.793,17,1.214,18,3.843,19,3.429,20,3.429,21,0.468,22,0.883,23,1.607,24,2.928,25,0.339,26,0.223,27,1.607,28,0.798,29,2.592,30,2.554,31,2.184,32,1.647,33,1.355,34,1.316,35,1.355,36,2.592,37,0.811,38,2.213,39,1.607,40,0.538,41,1.516,42,2.592,43,2.592,44,1.032,45,3.843,46,2.592,47,2.592,48,2.592,49,1.355,50,1.603,51,2.592,52,2.489,53,2.489,54,2.592,55,1.704,56,0.849,57,3.843,58,1.516,59,1.032,60,2.592,61,1.392,62,4.09,63,3.429,64,1.156,65,2.006,66,3.429,67,3.429,68,3.429,69,3.429,70,3.429,71,3.429,72,3.429,73,1.516,74,2.592,75,1.157,76,2.592,77,1.441,78,3.429,79,3.429,80,3.429,81,2.592,82,0.023,83,0.03,84,0.023,172,1.704,174,1.93]],["title/directives/MugenScrollTopDirective.html",[16,1.243,180,1.243]],["body/directives/MugenScrollTopDirective.html",[3,0.469,4,0.469,5,0.469,6,2.358,7,0.848,14,0.043,15,0.555,16,2.196,17,1.967,21,0.647,23,1.967,25,0.469,26,0.309,28,0.744,31,1.967,40,0.744,56,0.744,82,0.031,83,0.037,84,0.031,172,2.358,174,2.671,176,2.098,177,2.098,178,2.098,179,2.098,180,2.196,181,4.382,182,3.586]],["title/components/NgxMugenScrollComponent.html",[183,1.114,184,1.243]],["body/components/NgxMugenScrollComponent.html",[0,0.056,3,0.172,4,0.172,5,0.172,7,1.007,9,0.238,11,1.326,12,0.771,13,0.911,14,0.044,15,0.558,17,0.98,21,0.238,22,0.434,23,1.61,25,0.34,26,0.18,27,1.387,28,0.819,31,1.973,32,1.635,33,2.105,34,1.389,35,2.013,37,0.813,40,0.274,41,1.224,44,1.282,49,0.689,50,1.566,52,0.771,53,0.771,56,0.908,58,0.771,59,0.891,61,1.035,64,1.159,73,0.771,75,0.891,82,0.012,83,0.018,84,0.012,87,1.094,95,1.947,98,0.877,100,1.889,103,1.387,114,0.98,123,0.497,124,1.36,136,0.867,137,1.224,144,1.548,147,2.26,150,2.26,153,1.657,155,1.357,165,0.867,166,2.011,171,1.548,172,0.867,174,0.982,176,0.771,177,0.771,178,1.224,179,1.224,180,1.548,182,1.125,183,0.98,184,1.689,185,2.556,186,2.463,187,1.505,188,0.867,189,1.093,190,1.937,191,2.405,192,1.937,193,1.71,194,0.98,195,1.848,196,2.26,197,2.205,198,2.556,199,1.937,200,1.937,201,1.937,202,1.937,203,1.937,204,2.647,205,1.937,206,2.556,207,1.61,208,2.594,209,2.26,210,2.26,211,2.783,212,1.61,213,1.61,214,1.558,215,1.219,216,1.61,217,2.26,218,1.376,219,2.405,220,2.405,221,2.405,222,1.61,223,1.558,224,2.205,225,1.937,226,1.937,227,1.61,228,2.26,229,1.61,230,1.376,231,1.558,232,2.683,233,1.61,234,1.244,235,2.205,236,1.61,237,1.61,238,1.387,239,1.947,240,1.732,241,2.56,242,1.61,243,1.61,244,1.558,245,1.558,246,1.937,247,1.61,248,1.219,249,1.376,250,1.376,251,1.558,252,1.558,253,0.982,254,2.867,255,1.937,256,1.558,257,0.867,258,0.867,259,0.867,260,0.867,261,2.205,262,0.867,263,1.376,264,0.982,265,0.867,266,1.71,267,0.982,268,0.982,269,0.982,270,1.61,271,0.982,272,1.558,273,1.558,274,0.982,275,0.982,276,1.558,277,0.982,278,1.558,279,0.982,280,1.558,281,0.982,282,1.513,283,0.982,284,0.982,285,0.982,286,0.982,287,0.982,288,0.982,289,0.982,290,0.982,291,0.982,292,1.558,293,0.982,294,0.982,295,0.982,296,0.982,297,1.558,298,0.982,299,0.982,300,0.982,301,0.982,302,1.558,303,0.982,304,0.982,305,1.558,306,0.982,307,0.982,308,1.937,309,0.982,310,0.982,311,0.982,312,1.558,313,1.937,314,1.558,315,0.982,316,0.982,317,1.558,318,2.683,319,0.982,320,0.982,321,1.558,322,1.937,323,0.867,324,1.558,325,1.937,326,1.558,327,1.558,328,0.982,329,1.558,330,0.982,331,1.513,332,0.982,333,0.982,334,0.982,335,0.982,336,1.937,337,0.867,338,0.982,339,1.558,340,0.982,341,0.982,342,0.982,343,1.937,344,0.982,345,0.982,346,0.982,347,0.982,348,0.982,349,0.982,350,0.982,351,0.982,352,0.982,353,0.982,354,1.937,355,1.937,356,0.982,357,0.982,358,0.982,359,0.982,360,0.982,361,0.982,362,1.558,363,1.558,364,2.205,365,1.937,366,0.982,367,0.982,368,1.558,369,1.558,370,1.937,371,0.982,372,0.982,373,0.982,374,0.98,375,0.98,376,1.558,377,1.558,378,0.982,379,0.98,380,1.558,381,1.558,382,1.558,383,0.982,384,0.982,385,0.982,386,0.982,387,0.982,388,0.982,389,0.982,390,0.982,391,0.982,392,0.982,393,0.982,394,0.982,395,0.982,396,0.982,397,0.982,398,0.982,399,0.982,400,0.982,401,0.982,402,3.618,403,1.61,404,1.61,405,1.61,406,1.61]],["title/modules/NgxMugenScrollModule.html",[407,2.377,408,1.771]],["body/modules/NgxMugenScrollModule.html",[3,0.45,4,0.45,5,0.45,7,1.035,14,0.043,15,0.717,21,0.621,25,0.45,26,0.297,27,2.169,82,0.03,83,0.036,84,0.03,171,2.42,180,2.42,184,2.42,186,2.013,187,1.561,194,1.296,257,2.263,258,2.263,259,2.263,408,3.052,409,2.938,410,4.205,411,5.007,412,5.007,413,4.098,414,4.205,415,3.441]],["title/classes/NotFoundResourceError.html",[26,0.205,416,1.563]],["body/classes/NotFoundResourceError.html",[0,0.062,3,0.195,4,0.195,5,0.195,7,0.353,9,0.681,10,1.081,11,1.252,13,0.667,14,0.044,15,0.357,21,0.269,22,0.81,25,0.414,26,0.199,28,0.711,32,1.062,34,0.848,37,0.893,39,0.7,40,0.479,44,1.252,56,0.928,59,1.252,61,1.427,64,0.778,65,2.004,75,0.848,77,1.586,82,0.025,83,0.02,84,0.013,85,1.112,94,2.203,95,1.32,97,0.7,98,1.221,99,0.7,121,1.081,122,0.873,123,0.563,125,1.979,135,0.982,152,2.381,153,1.332,155,1.612,163,1.853,170,0.982,187,0.504,189,0.969,194,0.563,195,1.979,215,1.081,234,1.891,238,0.7,248,1.32,270,1.32,282,1.081,331,1.697,374,1.697,375,1.915,379,1.697,416,1.517,417,2.084,418,0.982,419,1.718,420,2.36,421,2.811,422,1.824,423,2.818,424,1.824,425,1.112,426,1.112,427,1.112,428,0.982,429,2.084,430,1.718,431,1.517,432,1.112,433,1.517,434,1.112,435,1.112,436,2.813,437,2.697,438,1.112,439,1.112,440,1.112,441,1.112,442,1.112,443,1.112,444,2.36,445,1.718,446,1.112,447,2.099,448,2.099,449,1.718,450,2.099,451,1.112,452,1.112,453,1.112,454,1.112,455,1.112,456,2.551,457,1.112,458,1.112,459,1.112,460,1.112,461,1.112,462,0.982,463,1.112,464,3.351,465,2.551,466,2.099,467,1.112,468,1.718,469,1.112,470,1.112,471,1.112,472,1.112,473,1.112,474,1.718,475,2.811,476,1.112,477,1.112,478,2.811,479,2.98,480,2.482,481,2.958,482,2.36,483,1.112,484,1.112,485,1.112,486,1.718,487,1.718,488,1.718,489,1.718,490,2.099,491,2.099,492,2.36,493,2.551,494,1.718,495,1.112,496,2.551,497,1.112,498,2.551,499,1.112,500,1.112,501,1.718,502,1.112,503,1.112,504,1.112,505,1.112,506,1.112,507,1.112,508,1.112,509,1.112,510,1.112,511,1.112,512,1.112,513,1.112,514,2.551,515,2.36,516,2.811,517,1.112,518,1.718,519,2.36,520,1.718,521,1.718,522,2.253,523,1.112,524,1.112,525,2.099,526,1.112,527,2.697,528,1.112,529,1.112,530,1.112,531,1.112,532,1.112,533,1.112,534,1.718,535,1.718,536,1.112,537,1.112,538,1.112,539,2.099,540,1.112,541,1.112,542,1.112,543,1.112,544,1.112,545,1.112,546,1.112,547,1.112,548,1.112,549,1.112,550,1.112,551,1.112,552,1.112,553,1.112,554,0.982,555,0.982,556,1.112,557,1.112,558,1.112,559,1.112,560,1.112,561,1.112,562,1.112,563,1.112,564,1.112,565,1.112,566,1.517,567,1.112,568,0.982,569,1.112,570,1.112,571,1.112]],["title/classes/NullLogger.html",[26,0.205,263,1.563]],["body/classes/NullLogger.html",[0,0.063,3,0.373,4,0.199,5,0.199,7,0.953,9,0.275,11,1.237,12,0.892,13,0.361,14,0.044,15,0.589,17,1.098,21,0.275,22,0.487,23,0.714,25,0.373,26,0.202,27,1.338,28,0.853,31,2.036,32,1.679,33,1.809,34,1.408,35,1.676,37,0.818,40,0.317,41,0.892,44,1.308,49,0.797,50,1.619,52,0.892,53,0.892,56,0.931,58,0.892,59,1.099,61,1.099,64,1.232,73,0.892,75,0.965,82,0.013,83,0.021,84,0.013,85,1.135,87,1.225,95,0.714,97,0.714,98,0.514,99,0.714,100,2.024,103,0.714,114,1.098,123,0.574,124,1.493,136,1.003,137,0.892,144,1.493,147,1.541,150,1.541,153,1.453,155,1.207,165,1.003,166,2.225,171,1.493,176,0.892,177,0.892,178,1.371,179,1.371,180,1.493,183,1.098,184,1.225,186,1.371,187,1.283,188,1.003,189,1.2,190,1.745,191,2.126,192,1.745,193,1.003,194,0.574,195,1.501,196,1.541,197,1.135,199,1.135,200,1.135,201,1.135,202,1.135,203,1.135,204,2.274,205,1.135,208,2.274,209,1.877,210,1.877,211,2.387,214,1.135,215,1.098,217,1.877,218,1.003,219,2.126,220,2.126,221,2.126,223,1.135,224,2.126,225,1.745,226,1.745,228,1.877,230,1.003,231,1.135,232,2.576,234,0.985,235,1.745,238,1.098,239,1.541,240,1.371,241,2.126,244,1.135,245,1.135,246,1.745,248,1.098,249,1.003,250,1.003,251,1.135,252,1.135,253,1.135,254,2.999,255,2.126,256,1.745,257,1.003,258,1.003,259,1.003,260,1.003,261,2.387,262,1.003,263,1.877,264,1.745,265,1.003,266,1.877,267,1.135,268,1.135,269,1.135,270,1.711,271,1.135,272,1.745,273,1.745,274,1.135,275,1.135,276,1.745,277,1.135,278,1.745,279,1.135,280,1.745,281,1.135,282,1.621,283,1.135,284,1.135,285,1.135,286,1.135,287,1.135,288,1.135,289,1.135,290,1.135,291,1.135,292,1.745,293,1.135,294,1.135,295,1.135,296,1.135,297,1.745,298,1.135,299,1.135,300,1.135,301,1.135,302,1.745,303,1.135,304,1.135,305,1.745,306,1.135,307,1.135,308,2.126,309,1.135,310,1.135,311,1.135,312,1.745,313,2.126,314,1.745,315,1.135,316,1.135,317,1.745,318,2.833,319,1.135,320,1.135,321,1.745,322,2.126,323,1.003,324,1.745,325,2.126,326,1.745,327,1.745,328,1.135,329,1.745,330,1.135,331,1.621,332,1.135,333,1.135,334,1.135,335,1.135,336,2.126,337,1.003,338,1.135,339,1.745,340,1.135,341,1.135,342,1.135,343,2.126,344,1.135,345,1.135,346,1.135,347,1.135,348,1.135,349,1.135,350,1.135,351,1.135,352,1.135,353,1.135,354,2.126,355,2.126,356,1.135,357,1.135,358,1.135,359,1.135,360,1.135,361,1.135,362,1.745,363,1.745,364,2.387,365,2.126,366,1.135,367,1.135,368,1.745,369,1.745,370,2.126,371,1.135,372,1.135,373,1.135,374,1.098,375,1.098,376,1.745,377,1.745,378,1.135,379,1.098,380,1.745,381,1.745,382,1.745,383,1.135,384,1.135,385,1.135,386,1.135,387,1.135,388,1.135,389,1.135,390,1.135,391,1.135,392,1.135,393,1.135,394,1.135,395,1.135,396,1.135,397,1.135,398,1.135,399,1.135,400,1.135,401,1.135,572,1.863,573,1.863]],["title/injectables/OrderedDataStoreIdxService.html",[121,1.114,433,1.563]],["body/injectables/OrderedDataStoreIdxService.html",[0,0.053,3,0.159,4,0.159,5,0.159,7,0.288,9,0.735,11,1.307,13,0.99,14,0.044,15,0.304,21,0.22,22,0.878,25,0.37,26,0.169,28,0.644,32,0.929,34,0.742,37,1.019,39,0.92,40,0.512,44,1.184,49,1.026,50,0.739,56,0.895,59,1.259,61,1.399,64,0.662,65,1.815,75,0.742,77,1.653,82,0.022,83,0.017,84,0.011,87,1.026,94,2.249,95,1.843,97,1.96,98,1.352,99,1.756,103,1.803,121,0.92,122,0.712,123,0.459,125,2.075,134,1.039,135,1.622,152,2.531,153,1.526,155,1.678,163,2.465,170,1.622,187,0.41,189,0.511,194,0.459,195,2.16,196,1.291,215,1.326,234,1.825,238,1.155,248,1.635,270,1.155,282,1.326,331,1.554,374,1.554,375,1.803,379,1.554,416,0.8,417,2.636,418,0.8,419,0.906,420,0.906,421,2.311,425,0.906,426,0.906,427,0.906,428,0.8,429,1.86,430,1.462,431,1.86,432,0.906,433,2.041,434,0.906,435,0.906,436,2.679,437,2.471,438,0.906,439,0.906,440,0.906,441,0.906,442,1.837,443,1.462,444,2.704,445,2.107,446,0.906,447,1.837,448,1.837,449,1.462,450,1.837,451,0.906,452,0.906,453,0.906,454,0.906,455,0.906,456,2.311,457,0.906,458,1.462,459,1.837,460,0.906,461,0.906,462,1.291,463,0.906,464,3.234,465,2.311,466,1.837,467,0.906,468,1.462,469,0.906,470,0.906,471,0.906,472,0.906,473,0.906,474,1.462,475,2.599,476,0.906,477,1.462,478,2.599,479,2.792,480,2.295,481,2.97,482,2.107,483,0.906,484,0.906,485,1.837,486,2.471,487,2.471,488,2.471,489,2.471,490,2.599,491,1.837,492,2.107,493,2.93,494,1.462,495,0.906,496,2.311,497,0.906,498,2.311,499,0.906,500,0.906,501,1.462,502,0.906,503,0.906,504,0.906,505,0.906,506,0.906,507,0.906,508,0.906,509,1.462,510,0.906,511,2.107,512,0.906,513,0.906,514,2.792,515,2.704,516,2.599,517,0.906,518,1.462,519,2.107,520,1.462,521,1.462,522,2.295,523,1.837,524,0.906,525,2.311,526,0.906,527,2.704,528,0.906,529,0.906,530,0.906,531,0.906,532,0.906,533,0.906,534,1.462,535,1.462,536,0.906,537,0.906,538,0.906,539,1.837,540,0.906,541,0.906,542,0.906,543,1.837,544,1.837,545,0.906,546,0.906,547,0.906,548,0.906,549,0.906,550,0.906,551,0.906,552,0.906,553,0.906,554,0.8,555,0.8,556,0.906,557,0.906,558,0.906,559,0.906,560,0.906,561,0.906,562,0.906,563,0.906,564,0.906,565,0.906,566,1.291,567,0.906,568,0.8,569,0.906,570,0.906,571,0.906,574,2.398,575,2.398,576,1.487,577,1.487,578,1.487,579,1.487,580,1.487,581,1.487,582,3.457,583,3.457,584,1.487,585,1.487,586,1.487,587,1.487,588,1.487,589,1.487,590,1.487,591,1.487,592,1.487,593,1.487,594,1.487,595,1.487]],["title/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.064,428,1.563]],["body/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.062,2,0.634,3,0.197,4,0.197,5,0.197,7,0.357,9,0.684,10,1.089,11,1.178,13,0.671,14,0.044,15,0.36,21,0.272,22,0.812,25,0.417,26,0.2,28,0.715,32,0.568,34,0.854,37,0.896,39,0.707,40,0.313,44,1.256,56,0.93,59,1.291,61,1.429,64,0.784,65,2.014,75,0.854,77,1.592,82,0.025,83,0.02,84,0.013,94,2.206,98,1.226,121,1.089,122,0.882,123,0.568,125,1.881,135,0.992,152,2.391,153,1.528,155,1.615,163,1.865,170,0.992,187,0.509,189,0.634,194,0.568,195,1.983,215,1.089,234,1.894,238,0.707,248,1.329,270,1.329,282,1.089,331,1.704,374,1.704,375,1.92,379,1.704,416,0.992,417,0.992,418,0.992,419,1.123,420,1.123,421,2.563,425,1.123,426,1.123,427,1.123,428,1.528,429,2.491,430,2.563,431,1.528,432,1.123,433,1.528,434,1.123,435,1.123,436,2.819,437,2.708,438,1.123,439,1.123,440,1.123,441,1.123,442,1.123,443,1.123,444,2.373,445,1.731,446,1.123,447,2.112,448,2.112,449,1.731,450,2.112,451,1.123,452,1.123,453,1.123,454,1.123,455,1.123,456,2.563,457,1.123,458,1.123,459,1.123,460,1.123,461,1.123,462,0.992,463,1.123,464,3.356,465,2.563,466,2.112,467,1.123,468,1.731,469,1.123,470,1.123,471,1.123,472,1.123,473,1.123,474,1.731,475,2.822,476,1.123,477,1.123,478,2.822,479,2.989,480,2.491,481,2.963,482,2.373,483,1.123,484,1.123,485,1.123,486,1.731,487,1.731,488,1.731,489,1.731,490,2.112,491,2.112,492,2.373,493,2.563,494,1.731,495,1.123,496,2.563,497,1.123,498,2.563,499,1.123,500,1.123,501,1.731,502,1.123,503,1.123,504,1.123,505,1.123,506,1.123,507,1.123,508,1.123,509,1.123,510,1.123,511,1.123,512,1.123,513,1.123,514,2.563,515,2.373,516,2.822,517,1.123,518,1.731,519,2.373,520,1.731,521,1.731,522,2.263,523,1.123,524,1.123,525,2.112,526,1.123,527,2.708,528,1.123,529,1.123,530,1.123,531,1.123,532,1.123,533,1.123,534,1.731,535,1.731,536,1.123,537,1.123,538,1.123,539,2.112,540,1.123,541,1.123,542,1.123,543,1.123,544,1.123,545,1.123,546,1.123,547,1.123,548,1.123,549,1.123,550,1.123,551,1.123,552,1.123,553,1.123,554,0.992,555,0.992,556,1.123,557,1.123,558,1.123,559,1.123,560,1.123,561,1.123,562,1.123,563,1.123,564,1.123,565,1.123,566,1.528,567,1.123,568,0.992,569,1.123,570,1.123,571,1.123]],["title/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.064,431,1.563]],["body/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.062,2,0.634,3,0.197,4,0.197,5,0.197,7,0.357,9,0.684,10,1.089,11,1.178,13,0.671,14,0.044,15,0.36,21,0.272,22,0.812,25,0.417,26,0.2,28,0.715,32,0.568,34,0.854,37,0.896,39,0.707,40,0.313,44,1.256,56,0.93,59,1.318,61,1.429,64,0.784,65,2.014,75,0.854,77,1.592,82,0.025,83,0.02,84,0.013,94,2.206,98,1.226,121,1.089,122,0.882,123,0.568,125,1.881,135,0.992,152,2.391,153,1.339,155,1.615,163,1.865,170,0.992,187,0.509,189,0.634,194,0.568,195,1.983,215,1.089,234,1.894,238,0.707,248,1.329,270,1.329,282,1.089,331,1.704,374,1.704,375,1.92,379,1.704,416,0.992,417,0.992,418,0.992,419,1.123,420,1.123,421,2.563,425,1.123,426,1.123,427,1.123,428,0.992,429,2.491,430,1.731,431,1.865,432,2.373,433,1.528,434,1.123,435,1.123,436,2.819,437,2.708,438,1.123,439,1.123,440,1.123,441,1.123,442,1.123,443,1.123,444,2.373,445,1.731,446,1.123,447,2.112,448,2.112,449,1.731,450,2.112,451,1.123,452,1.123,453,1.123,454,1.123,455,1.123,456,2.563,457,1.123,458,1.123,459,1.123,460,1.123,461,1.123,462,0.992,463,1.123,464,3.356,465,2.563,466,2.112,467,1.123,468,1.731,469,1.123,470,1.123,471,1.123,472,1.123,473,1.123,474,1.731,475,2.822,476,1.123,477,1.123,478,2.822,479,2.989,480,2.491,481,2.963,482,2.373,483,1.123,484,1.123,485,1.123,486,1.731,487,1.731,488,1.731,489,1.731,490,2.112,491,2.112,492,2.373,493,2.563,494,1.731,495,1.123,496,2.563,497,1.123,498,2.563,499,1.123,500,1.123,501,1.731,502,1.123,503,1.123,504,1.123,505,1.123,506,1.123,507,1.123,508,1.123,509,1.123,510,1.123,511,1.123,512,1.123,513,1.123,514,2.563,515,2.373,516,2.822,517,1.123,518,1.731,519,2.373,520,1.731,521,1.731,522,2.263,523,1.123,524,1.123,525,2.112,526,1.123,527,2.708,528,1.123,529,1.123,530,1.123,531,1.123,532,1.123,533,1.123,534,1.731,535,1.731,536,1.123,537,1.123,538,1.123,539,2.112,540,1.123,541,1.123,542,1.123,543,1.123,544,1.123,545,1.123,546,1.123,547,1.123,548,1.123,549,1.123,550,1.123,551,1.123,552,1.123,553,1.123,554,0.992,555,0.992,556,1.123,557,1.123,558,1.123,559,1.123,560,1.123,561,1.123,562,1.123,563,1.123,564,1.123,565,1.123,566,1.528,567,1.123,568,0.992,569,1.123,570,1.123,571,1.123]],["title/interfaces/ScrollBottomEvent.html",[0,0.064,260,1.563]],["body/interfaces/ScrollBottomEvent.html",[0,0.063,2,0.646,3,0.201,4,0.201,5,0.201,7,0.955,9,0.277,10,1.105,11,1.24,12,0.899,13,0.364,14,0.044,15,0.591,17,1.105,21,0.277,22,0.49,23,0.72,25,0.375,26,0.203,27,1.345,28,0.855,31,2.039,32,1.681,33,1.815,34,1.409,35,1.683,37,0.902,40,0.319,41,0.899,44,1.31,49,0.804,50,1.602,52,0.899,53,0.899,56,0.933,58,0.899,59,0.969,61,1.103,64,1.236,73,0.899,75,0.969,82,0.013,83,0.021,84,0.013,100,2.031,114,1.105,123,0.579,124,1.501,136,1.011,137,0.899,144,1.501,147,1.551,150,1.551,153,1.459,155,1.213,165,1.011,166,2.144,171,1.501,176,0.899,177,0.899,178,1.38,179,1.38,180,1.501,183,1.105,184,1.233,186,0.899,187,1.236,188,1.011,189,0.991,190,1.757,191,2.137,192,1.757,193,1.011,194,0.579,195,1.508,196,1.551,197,1.145,199,1.145,200,1.145,201,1.145,202,1.145,203,1.145,204,2.283,205,1.145,208,2.283,209,1.887,210,1.887,211,2.397,214,1.145,215,1.105,217,1.887,218,1.011,219,2.137,220,2.137,221,2.137,223,1.145,224,2.137,225,1.757,226,1.757,228,1.887,230,1.011,231,1.145,232,2.586,234,0.991,235,1.757,238,1.105,239,1.551,240,1.38,241,2.137,244,1.145,245,1.145,246,1.757,248,1.105,249,1.011,250,1.011,251,1.145,252,1.145,253,1.145,254,3.006,255,2.137,256,1.757,257,1.011,258,1.011,259,1.011,260,1.551,261,2.841,262,1.011,263,1.551,264,1.145,265,1.011,266,1.887,267,1.145,268,1.145,269,1.145,270,1.717,271,1.145,272,1.757,273,1.757,274,1.145,275,1.145,276,1.757,277,1.145,278,1.757,279,1.145,280,1.757,281,1.145,282,1.627,283,1.145,284,1.145,285,1.145,286,1.145,287,1.145,288,1.145,289,1.145,290,1.145,291,1.145,292,1.757,293,1.145,294,1.145,295,1.145,296,1.145,297,1.757,298,1.145,299,1.145,300,1.145,301,1.145,302,1.757,303,1.145,304,1.145,305,1.757,306,1.145,307,1.145,308,2.137,309,1.145,310,1.145,311,1.145,312,1.757,313,2.137,314,1.757,315,1.145,316,1.145,317,1.757,318,2.841,319,1.145,320,1.145,321,1.757,322,2.137,323,1.011,324,1.757,325,2.137,326,1.757,327,1.757,328,1.145,329,1.757,330,1.145,331,1.627,332,1.145,333,1.145,334,1.145,335,1.145,336,2.137,337,1.011,338,1.145,339,1.757,340,1.145,341,1.145,342,1.145,343,2.137,344,1.145,345,1.145,346,1.145,347,1.145,348,1.145,349,1.145,350,1.145,351,1.145,352,1.145,353,1.145,354,2.137,355,2.137,356,1.145,357,1.145,358,1.145,359,1.145,360,1.145,361,1.145,362,1.757,363,1.757,364,2.397,365,2.137,366,1.145,367,1.145,368,1.757,369,1.757,370,2.137,371,1.145,372,1.145,373,1.145,374,1.105,375,1.105,376,1.757,377,1.757,378,1.145,379,1.105,380,1.757,381,1.757,382,1.757,383,1.145,384,1.145,385,1.145,386,1.145,387,1.145,388,1.145,389,1.145,390,1.145,391,1.145,392,1.145,393,1.145,394,1.145,395,1.145,396,1.145,397,1.145,398,1.145,399,1.145,400,1.145,401,1.145]],["title/interfaces/ScrollTopEvent.html",[0,0.064,262,1.563]],["body/interfaces/ScrollTopEvent.html",[0,0.063,2,0.646,3,0.201,4,0.201,5,0.201,7,0.955,9,0.277,10,1.105,11,1.24,12,0.899,13,0.364,14,0.044,15,0.591,17,1.105,21,0.277,22,0.49,23,0.72,25,0.375,26,0.203,27,1.345,28,0.855,31,2.039,32,1.681,33,1.815,34,1.409,35,1.683,37,0.902,40,0.319,41,0.899,44,1.31,49,0.804,50,1.602,52,0.899,53,0.899,56,0.933,58,0.899,59,0.969,61,1.103,64,1.236,73,0.899,75,0.969,82,0.013,83,0.021,84,0.013,100,2.031,114,1.105,123,0.579,124,1.501,136,1.011,137,0.899,144,1.501,147,1.551,150,1.551,153,1.459,155,1.213,165,1.011,166,2.144,171,1.501,176,0.899,177,0.899,178,1.38,179,1.38,180,1.501,183,1.105,184,1.233,186,0.899,187,1.236,188,1.011,189,0.991,190,1.757,191,2.137,192,1.757,193,1.011,194,0.579,195,1.508,196,1.551,197,1.145,199,1.145,200,1.145,201,1.145,202,1.145,203,1.145,204,2.283,205,1.145,208,2.283,209,1.887,210,1.887,211,2.397,214,1.145,215,1.105,217,1.887,218,1.011,219,2.137,220,2.137,221,2.137,223,1.145,224,2.137,225,1.757,226,1.757,228,1.887,230,1.011,231,1.145,232,2.586,234,0.991,235,1.757,238,1.105,239,1.551,240,1.38,241,2.137,244,1.145,245,1.145,246,1.757,248,1.105,249,1.011,250,1.011,251,1.145,252,1.145,253,1.145,254,3.006,255,2.137,256,1.757,257,1.011,258,1.011,259,1.011,260,1.011,261,2.841,262,1.551,263,1.551,264,1.145,265,1.011,266,1.887,267,1.145,268,1.145,269,1.145,270,1.717,271,1.145,272,1.757,273,1.757,274,1.145,275,1.145,276,1.757,277,1.145,278,1.757,279,1.145,280,1.757,281,1.145,282,1.627,283,1.145,284,1.145,285,1.145,286,1.145,287,1.145,288,1.145,289,1.145,290,1.145,291,1.145,292,1.757,293,1.145,294,1.145,295,1.145,296,1.145,297,1.757,298,1.145,299,1.145,300,1.145,301,1.145,302,1.757,303,1.145,304,1.145,305,1.757,306,1.145,307,1.145,308,2.137,309,1.145,310,1.145,311,1.145,312,1.757,313,2.137,314,1.757,315,1.145,316,1.145,317,1.757,318,2.841,319,1.145,320,1.145,321,1.757,322,2.137,323,1.011,324,1.757,325,2.137,326,1.757,327,1.757,328,1.145,329,1.757,330,1.145,331,1.627,332,1.145,333,1.145,334,1.145,335,1.145,336,2.137,337,1.011,338,1.145,339,1.757,340,1.145,341,1.145,342,1.145,343,2.137,344,1.145,345,1.145,346,1.145,347,1.145,348,1.145,349,1.145,350,1.145,351,1.145,352,1.145,353,1.145,354,2.137,355,2.137,356,1.145,357,1.145,358,1.145,359,1.145,360,1.145,361,1.145,362,1.757,363,1.757,364,2.397,365,2.137,366,1.145,367,1.145,368,1.757,369,1.757,370,2.137,371,1.145,372,1.145,373,1.145,374,1.105,375,1.105,376,1.757,377,1.757,378,1.145,379,1.105,380,1.757,381,1.757,382,1.757,383,1.145,384,1.145,385,1.145,386,1.145,387,1.145,388,1.145,389,1.145,390,1.145,391,1.145,392,1.145,393,1.145,394,1.145,395,1.145,396,1.145,397,1.145,398,1.145,399,1.145,400,1.145,401,1.145]],["title/dependencies.html",[596,2.431,597,2.857]],["body/dependencies.html",[14,0.042,21,0.683,82,0.033,83,0.038,84,0.033,597,4.333,598,4.625,599,4.625,600,4.625,601,4.625,602,4.333]],["title/miscellaneous/functions.html",[603,1.99,604,2.857]],["body/miscellaneous/functions.html",[9,0.63,11,1.326,14,0.042,82,0.031,83,0.036,84,0.031,97,2.063,98,1.485,99,2.063,103,2.063,125,2.063,155,1.315,183,1.636,186,2.043,187,1.394,188,2.718,265,2.296,266,2.296,417,2.296,418,2.896,429,2.718,436,2.718,480,2.296,481,2.994,554,2.718,555,2.718,566,2.718,568,2.296,603,3.492,604,3.492,605,5.051,606,4.266,607,5.051,608,5.051,609,4.266,610,4.266]],["title/index.html",[9,0.359,611,1.99,612,1.99]],["body/index.html",[0,0.102,7,1.105,11,1.391,14,0.041,15,0.586,24,2.581,26,0.26,33,1.98,35,2.162,64,1.019,82,0.027,83,0.033,84,0.027,100,1.768,125,1.416,137,1.768,144,1.58,175,3.022,182,2.581,183,2.208,184,2.381,187,1.277,189,1.27,193,1.987,194,1.426,204,2.994,209,2.718,210,2.718,217,2.849,218,1.987,228,3.072,230,1.987,239,1.987,240,2.215,249,2.49,250,1.987,408,3.079,413,3.022,415,3.022,462,1.987,522,1.987,602,3.022,613,5.051,614,5.051,615,3.693,616,3.693,617,3.693,618,3.693,619,3.693,620,4.626,621,3.693,622,5.051,623,4.626,624,4.626,625,3.693,626,3.693,627,3.693,628,2.581,629,5.051,630,3.693,631,3.693,632,3.693,633,3.693,634,3.693,635,3.693,636,3.693,637,3.693,638,5.051,639,5.051,640,3.693,641,3.693,642,3.693,643,3.693,644,3.693,645,3.693,646,3.693,647,5.051,648,3.693,649,4.626,650,3.693,651,3.693,652,3.693,653,3.693,654,3.693,655,3.693,656,4.626,657,3.693,658,3.022,659,3.693,660,3.693,661,3.693,662,3.693,663,3.693]],["title/license.html",[611,1.99,612,1.99,664,2.431]],["body/license.html",[14,0.036,82,0.03,83,0.036,84,0.03,208,2.215,234,1.415,240,1.97,658,4.046,665,5.299,666,4.115,667,4.115,668,4.115,669,4.944,670,4.115,671,4.115,672,4.115,673,4.115,674,4.115,675,4.115,676,4.944,677,5.861,678,4.115,679,4.115,680,4.115,681,4.115,682,5.299,683,4.115,684,4.944,685,4.115,686,4.115,687,4.115,688,4.115,689,4.115,690,4.115,691,4.115,692,4.115,693,4.115,694,4.944,695,4.115,696,4.115,697,4.115,698,4.115,699,4.115,700,4.115,701,4.115,702,4.944,703,4.944,704,4.115,705,4.115,706,4.115,707,4.115,708,4.115,709,4.115,710,4.115,711,4.115,712,4.115,713,4.115,714,4.115,715,4.115,716,4.115,717,4.115,718,4.115,719,4.115,720,4.115,721,4.115,722,4.115,723,4.115,724,4.115,725,4.115,726,4.115,727,4.115,728,4.115,729,4.115,730,4.115,731,4.115]],["title/modules.html",[409,2.763]],["body/modules.html",[14,0.038,82,0.034,83,0.038,84,0.034,408,2.86,409,3.279,732,4.692]],["title/overview.html",[628,2.763]],["body/overview.html",[2,1.588,14,0.038,82,0.033,83,0.038,84,0.033,85,2.815,134,3.227,172,2.485,183,1.771,323,2.847,337,2.847,407,3.779,628,3.227,733,4.618,734,4.618]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":75,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["0px",{"_index":347,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["1",{"_index":323,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["1.0",{"_index":349,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["10",{"_index":224,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["100",{"_index":226,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["11.0.9",{"_index":602,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["2",{"_index":733,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":666,"title":{},"body":{"license.html":{}}}],["3",{"_index":337,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["30",{"_index":46,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["50",{"_index":225,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["8",{"_index":734,"title":{},"body":{"overview.html":{}}}],["9999999",{"_index":396,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["_bottomdirective",{"_index":291,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["_datadirective",{"_index":301,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["_provider",{"_index":304,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["_topdirective",{"_index":296,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["above",{"_index":701,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":91,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{}}}],["action",{"_index":724,"title":{},"body":{"license.html":{}}}],["actual_component",{"_index":406,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["add",{"_index":574,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["add(storename",{"_index":477,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["afterviewinit",{"_index":191,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["and/or",{"_index":692,"title":{},"body":{"license.html":{}}}],["angular",{"_index":618,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":21,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{}}}],["angularjs",{"_index":615,"title":{},"body":{"index.html":{}}}],["any).result",{"_index":466,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["api",{"_index":620,"title":{},"body":{"index.html":{}}}],["appended",{"_index":239,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["args",{"_index":170,"title":{},"body":{"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["args.foreach((arg",{"_index":483,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arising",{"_index":728,"title":{},"body":{"license.html":{}}}],["arrangeafterpush",{"_index":76,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["arrangeafterunshift",{"_index":81,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["array",{"_index":59,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["array).foreach((v",{"_index":550,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybuffer",{"_index":488,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybufferview",{"_index":487,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["associated",{"_index":678,"title":{},"body":{"license.html":{}}}],["async",{"_index":195,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["attached",{"_index":71,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["attribute",{"_index":638,"title":{},"body":{"index.html":{}}}],["authors",{"_index":718,"title":{},"body":{"license.html":{}}}],["autofetchingbottom",{"_index":199,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autofetchingbottom(autofetchingtop",{"_index":645,"title":{},"body":{"index.html":{}}}],["autofetchingtop",{"_index":200,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autoinitafterviewinit",{"_index":201,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autoloadscrollposition",{"_index":202,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["automatically",{"_index":210,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["await",{"_index":331,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["base",{"_index":443,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.add",{"_index":454,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.get",{"_index":446,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["big",{"_index":221,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["boolean",{"_index":153,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom",{"_index":33,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["bottom(top",{"_index":647,"title":{},"body":{"index.html":{}}}],["bottom.directive",{"_index":258,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom.directive.ts",{"_index":173,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{}}}],["bottombeforeadded",{"_index":373,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottomcursor",{"_index":117,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomdirective",{"_index":290,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["break",{"_index":363,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["browse",{"_index":732,"title":{},"body":{"modules.html":{}}}],["button",{"_index":662,"title":{},"body":{"index.html":{}}}],["call",{"_index":214,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["callback",{"_index":312,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["callbackintersectionobserver",{"_index":605,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callbackintersectionobserver(component",{"_index":265,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["callbackintersectionobserver(this",{"_index":345,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["called",{"_index":245,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["case",{"_index":362,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["catch",{"_index":380,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cb",{"_index":544,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cb(v",{"_index":551,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["changes.countperloadmode",{"_index":334,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["changes.countperloadmode.currentvalue",{"_index":335,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["charge",{"_index":673,"title":{},"body":{"license.html":{}}}],["children",{"_index":637,"title":{},"body":{"index.html":{}}}],["claim",{"_index":721,"title":{},"body":{"license.html":{}}}],["class",{"_index":26,"title":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["classes",{"_index":85,"title":{},"body":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"overview.html":{}}}],["clear",{"_index":49,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["clear(storename",{"_index":509,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["clearall",{"_index":511,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cli",{"_index":619,"title":{},"body":{"index.html":{}}}],["click",{"_index":659,"title":{},"body":{"index.html":{}}}],["component",{"_index":183,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["component.autofetchingbottom",{"_index":286,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.autofetchingtop",{"_index":281,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.bottom.emit",{"_index":285,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.bottomdirective",{"_index":269,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.bottomdirective.element",{"_index":284,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.fetchbottom",{"_index":287,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.fetchtop",{"_index":283,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.top.emit",{"_index":279,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.topdirective",{"_index":274,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component.topdirective.element",{"_index":277,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["component_template",{"_index":403,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["components",{"_index":185,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["conditions",{"_index":700,"title":{},"body":{"license.html":{}}}],["connection",{"_index":730,"title":{},"body":{"license.html":{}}}],["console.error(ev",{"_index":474,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log('foo",{"_index":315,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.log('hello",{"_index":390,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.log(`fetch",{"_index":448,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`filter",{"_index":545,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`from",{"_index":530,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["const",{"_index":61,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor(datas",{"_index":92,"title":{},"body":{"classes/Cursor.html":{}}}],["constructor(message",{"_index":422,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["constructor(public",{"_index":425,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["content",{"_index":273,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild",{"_index":253,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrollbottomdirective",{"_index":289,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolldatadirective",{"_index":299,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolltopdirective",{"_index":294,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contract",{"_index":725,"title":{},"body":{"license.html":{}}}],["copies",{"_index":694,"title":{},"body":{"license.html":{}}}],["copy",{"_index":676,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":665,"title":{},"body":{"license.html":{}}}],["countperload",{"_index":310,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["countperloadmode",{"_index":203,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ctx",{"_index":1,"title":{"interfaces/Ctx.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["ctx.data",{"_index":80,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["current",{"_index":248,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["current.getitems",{"_index":519,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["current.tostring",{"_index":529,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursor",{"_index":22,"title":{"classes/Cursor.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursor([v.tostring",{"_index":48,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["cursor.continue",{"_index":542,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursorstoreinfo",{"_index":114,"title":{"interfaces/CursorStoreInfo.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreinfo.scrolly",{"_index":356,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreservice",{"_index":124,"title":{"injectables/CursorStoreService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["damages",{"_index":722,"title":{},"body":{"license.html":{}}}],["data",{"_index":11,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["data.directive",{"_index":259,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["data.directive.ts",{"_index":8,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["data.index",{"_index":634,"title":{},"body":{"index.html":{}}}],["data.message",{"_index":635,"title":{},"body":{"index.html":{}}}],["datadirective",{"_index":300,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["dataprovider",{"_index":144,"title":{"interfaces/DataProvider.html":{}},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas",{"_index":100,"title":{},"body":{"classes/Cursor.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["datas.foreach(data",{"_index":60,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datas.map(v",{"_index":109,"title":{},"body":{"classes/Cursor.html":{}}}],["datas.reverse().foreach(data",{"_index":74,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datasmap",{"_index":29,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["date",{"_index":486,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db",{"_index":436,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["db.createobjectstore",{"_index":557,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames",{"_index":513,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames.contains(storename",{"_index":556,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.transaction(storename",{"_index":569,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["dbname",{"_index":438,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["deal",{"_index":681,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":731,"title":{},"body":{"license.html":{}}}],["debug",{"_index":307,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["declarations",{"_index":411,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["default",{"_index":582,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["defined",{"_index":95,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["delete",{"_index":135,"title":{},"body":{"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["delete(p",{"_index":131,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["delete(storename",{"_index":580,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["delimiter",{"_index":93,"title":{},"body":{"classes/Cursor.html":{}}}],["demo1",{"_index":623,"title":{},"body":{"index.html":{}}}],["demo2",{"_index":663,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":597,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["direction",{"_index":527,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["directive",{"_index":16,"title":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["directives",{"_index":172,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"overview.html":{}}}],["displayed",{"_index":230,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["distribute",{"_index":690,"title":{},"body":{"license.html":{}}}],["docs",{"_index":652,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":679,"title":{},"body":{"license.html":{}}}],["during",{"_index":630,"title":{},"body":{"index.html":{}}}],["el",{"_index":176,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["element",{"_index":177,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["elementref",{"_index":17,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["embeddedviewref",{"_index":18,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["emitted",{"_index":235,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["end",{"_index":515,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["end.getitems",{"_index":520,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["entities",{"_index":267,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entities.foreach(entity",{"_index":268,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.intersectionratio",{"_index":280,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.isintersecting",{"_index":278,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.target",{"_index":276,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["eof",{"_index":538,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["err",{"_index":381,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error",{"_index":419,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('bottomdirective",{"_index":293,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('datadirective",{"_index":303,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('db",{"_index":457,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('mugenscrollbottomdirective",{"_index":271,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolltopdirective",{"_index":275,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('provider",{"_index":306,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('topdirective",{"_index":298,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error(`cannot",{"_index":570,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev",{"_index":464,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev.target",{"_index":465,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["event",{"_index":234,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["eventemitter",{"_index":232,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["example",{"_index":653,"title":{},"body":{"index.html":{}}}],["export",{"_index":25,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["exports",{"_index":412,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["express",{"_index":709,"title":{},"body":{"license.html":{}}}],["false",{"_index":282,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["feature",{"_index":650,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":238,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetch(base",{"_index":584,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["fetchbottom",{"_index":147,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchbottom(cursor",{"_index":151,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetched",{"_index":209,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["fetcher",{"_index":445,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fetchoninit",{"_index":148,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchoninit(n",{"_index":156,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload",{"_index":149,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload(info",{"_index":158,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchtop",{"_index":150,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchtop(cursor",{"_index":160,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["files",{"_index":680,"title":{},"body":{"license.html":{}}}],["filter",{"_index":543,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["filter(storename",{"_index":586,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["find",{"_index":452,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fitness",{"_index":714,"title":{},"body":{"license.html":{}}}],["following",{"_index":699,"title":{},"body":{"license.html":{}}}],["free",{"_index":672,"title":{},"body":{"license.html":{}}}],["function",{"_index":215,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["functions",{"_index":604,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":697,"title":{},"body":{"license.html":{}}}],["generated",{"_index":617,"title":{},"body":{"index.html":{}}}],["get(storename",{"_index":589,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getitem",{"_index":88,"title":{},"body":{"classes/Cursor.html":{}}}],["getitem(i",{"_index":101,"title":{},"body":{"classes/Cursor.html":{}}}],["getitems",{"_index":89,"title":{},"body":{"classes/Cursor.html":{}}}],["getlargern",{"_index":575,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlargern(storename",{"_index":591,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlength",{"_index":106,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{}}}],["getsmallern",{"_index":523,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["getsmallern(storename",{"_index":593,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getting",{"_index":611,"title":{"index.html":{},"license.html":{}},"body":{}}],["granted",{"_index":671,"title":{},"body":{"license.html":{}}}],["hereby",{"_index":670,"title":{},"body":{"license.html":{}}}],["holders",{"_index":719,"title":{},"body":{"license.html":{}}}],["htmlelement",{"_index":178,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["idbarraykey",{"_index":489,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbcursorwithvalue",{"_index":537,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbdatabase",{"_index":437,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbfactory",{"_index":435,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange",{"_index":490,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.bound",{"_index":518,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.lowerbound(current.getitems",{"_index":517,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.upperbound(current.getitems",{"_index":524,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbrequest",{"_index":548,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbtransaction",{"_index":568,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx",{"_index":492,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.get(query",{"_index":495,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.getkey(key",{"_index":502,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.service.ts",{"_index":418,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["idx.service.ts:105",{"_index":577,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:113",{"_index":590,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:138",{"_index":581,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:171",{"_index":578,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:186",{"_index":579,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:198",{"_index":592,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:225",{"_index":594,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:293",{"_index":588,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:31",{"_index":576,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:39",{"_index":585,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:6",{"_index":423,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:7",{"_index":424,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:75",{"_index":595,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["ignore",{"_index":31,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["implementing",{"_index":648,"title":{},"body":{"index.html":{}}}],["implements",{"_index":189,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["implied",{"_index":710,"title":{},"body":{"license.html":{}}}],["import",{"_index":15,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["imports",{"_index":415,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["included",{"_index":704,"title":{},"body":{"license.html":{}}}],["includeequal",{"_index":152,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["including",{"_index":684,"title":{},"body":{"license.html":{}}}],["indecies",{"_index":555,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indecies.foreach(v",{"_index":558,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["indexed",{"_index":450,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexeddb",{"_index":434,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexname",{"_index":514,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indices",{"_index":432,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["infinite",{"_index":613,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["info(...args",{"_index":168,"title":{},"body":{"interfaces/Logger.html":{}}}],["info(...msgs",{"_index":264,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init",{"_index":196,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init(version",{"_index":458,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["initialize",{"_index":244,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initially",{"_index":231,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["initstore",{"_index":554,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["initstore(db",{"_index":609,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":121,"title":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["injectables",{"_index":134,"title":{},"body":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{},"overview.html":{}}}],["input",{"_index":254,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["inputs",{"_index":198,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["intersectionobserver",{"_index":308,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["intersectionobserver(callback",{"_index":328,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["intersectionobservercallback",{"_index":266,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["intersectionobserverinit",{"_index":314,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["intersectionratio",{"_index":261,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["iter",{"_index":526,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key",{"_index":444,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2",{"_index":501,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onerror",{"_index":508,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onsuccess",{"_index":503,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["keypath",{"_index":429,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":708,"title":{},"body":{"license.html":{}}}],["left",{"_index":655,"title":{},"body":{"index.html":{}}}],["length",{"_index":55,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{}}}],["liability",{"_index":723,"title":{},"body":{"license.html":{}}}],["liable",{"_index":720,"title":{},"body":{"license.html":{}}}],["lib",{"_index":193,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["libmugenscrollbottom",{"_index":175,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"index.html":{}}}],["libmugenscrollbottom]'},{'name",{"_index":404,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolldata",{"_index":24,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"index.html":{}}}],["libmugenscrolldata]'},{'name",{"_index":405,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolltop",{"_index":182,"title":{},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"index.html":{}}}],["library",{"_index":614,"title":{},"body":{"index.html":{}}}],["license",{"_index":664,"title":{"license.html":{}},"body":{}}],["limitation",{"_index":685,"title":{},"body":{"license.html":{}}}],["limited",{"_index":711,"title":{},"body":{"license.html":{}}}],["live",{"_index":622,"title":{},"body":{"index.html":{}}}],["load",{"_index":136,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["load(p",{"_index":129,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["loaded",{"_index":218,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["local",{"_index":641,"title":{},"body":{"index.html":{}}}],["located",{"_index":656,"title":{},"body":{"index.html":{}}}],["logger",{"_index":166,"title":{"interfaces/Logger.html":{}},"body":{"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["map",{"_index":30,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{}}}],["matching",{"_index":83,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":36,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["memory",{"_index":250,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["merchantability",{"_index":713,"title":{},"body":{"license.html":{}}}],["merge",{"_index":688,"title":{},"body":{"license.html":{}}}],["message",{"_index":420,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["metadata",{"_index":174,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["method",{"_index":241,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["methods",{"_index":87,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["middle",{"_index":220,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["miscellaneous",{"_index":603,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":566,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["modify",{"_index":687,"title":{},"body":{"license.html":{}}}],["module",{"_index":407,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":409,"title":{"modules.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"modules.html":{}}}],["more",{"_index":661,"title":{},"body":{"index.html":{}}}],["msgs",{"_index":573,"title":{},"body":{"classes/NullLogger.html":{}}}],["mugen",{"_index":187,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mugenscrollbottomdirective",{"_index":171,"title":{"directives/MugenScrollBottomDirective.html":{}},"body":{"directives/MugenScrollBottomDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolldatadirective",{"_index":27,"title":{"directives/MugenScrollDataDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["mugenscrolltopdirective",{"_index":180,"title":{"directives/MugenScrollTopDirective.html":{}},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["n",{"_index":77,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["name",{"_index":98,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":626,"title":{},"body":{"index.html":{}}}],["new",{"_index":44,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["newcursor",{"_index":38,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{}}}],["newcursor(v",{"_index":162,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["newintersectionobserver",{"_index":311,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["next",{"_index":522,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["ng",{"_index":272,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngafterviewinit",{"_index":246,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngmodule",{"_index":413,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{}}}],["ngonchanges(changes",{"_index":333,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngoninit",{"_index":330,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngx",{"_index":194,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscroll",{"_index":616,"title":{},"body":{"index.html":{}}}],["ngxmugenscrollcomponent",{"_index":184,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["ngxmugenscrollmodule",{"_index":408,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"index.html":{},"modules.html":{}}}],["noninfringement",{"_index":717,"title":{},"body":{"license.html":{}}}],["notfoundresourceerror",{"_index":416,"title":{"classes/NotFoundResourceError.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notfoundresourceerror(`cannot",{"_index":451,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["notice",{"_index":702,"title":{},"body":{"license.html":{}}}],["null",{"_index":493,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["nulllogger",{"_index":263,"title":{"classes/NullLogger.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["number",{"_index":37,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["object",{"_index":12,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["objectstorenames",{"_index":512,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["obtaining",{"_index":675,"title":{},"body":{"license.html":{}}}],["onchanges",{"_index":192,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["oninit",{"_index":190,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["optional",{"_index":99,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":313,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ordereddatastoreidxservice",{"_index":433,"title":{"injectables/OrderedDataStoreIdxService.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxserviceindex",{"_index":428,"title":{"interfaces/OrderedDataStoreIdxServiceIndex.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ordereddatastoreidxservicestore",{"_index":431,"title":{"interfaces/OrderedDataStoreIdxServiceStore.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["otherwise",{"_index":727,"title":{},"body":{"license.html":{}}}],["out",{"_index":729,"title":{},"body":{"license.html":{}}}],["output",{"_index":255,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["outputs",{"_index":206,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["overview",{"_index":628,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":140,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["package",{"_index":596,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":97,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["particular",{"_index":715,"title":{},"body":{"license.html":{}}}],["peer",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["permission",{"_index":669,"title":{},"body":{"license.html":{}}}],["permit",{"_index":695,"title":{},"body":{"license.html":{}}}],["person",{"_index":674,"title":{},"body":{"license.html":{}}}],["persons",{"_index":696,"title":{},"body":{"license.html":{}}}],["portions",{"_index":706,"title":{},"body":{"license.html":{}}}],["position",{"_index":217,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["prev",{"_index":525,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["previous",{"_index":338,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["private",{"_index":28,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["promise",{"_index":155,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":374,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["promise>((resolve",{"_index":535,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["provided",{"_index":240,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":122,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provider",{"_index":204,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["provider.scrollid",{"_index":252,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["provides",{"_index":629,"title":{},"body":{"index.html":{}}}],["public",{"_index":32,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["publish",{"_index":689,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":716,"title":{},"body":{"license.html":{}}}],["push(...datas",{"_index":58,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["query",{"_index":485,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r",{"_index":65,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.detectchanges",{"_index":68,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r.onerror",{"_index":498,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.onsuccess",{"_index":496,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.rootnodes[0].setattribute('_cursor",{"_index":67,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r2",{"_index":547,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r2.result",{"_index":549,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range",{"_index":516,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.lower",{"_index":531,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.upper",{"_index":532,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["read",{"_index":660,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":421,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["readwrite",{"_index":482,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["redisplayed",{"_index":633,"title":{},"body":{"index.html":{}}}],["ref",{"_index":78,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["reference",{"_index":651,"title":{},"body":{"index.html":{}}}],["references",{"_index":621,"title":{},"body":{"index.html":{}}}],["reject",{"_index":375,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["reject(err",{"_index":382,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["reject(ev",{"_index":475,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reject(r.error",{"_index":499,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["related",{"_index":251,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["remote",{"_index":453,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["represents",{"_index":639,"title":{},"body":{"index.html":{}}}],["request",{"_index":460,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onblocked",{"_index":473,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onerror",{"_index":476,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onsuccess",{"_index":463,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onupgradeneeded",{"_index":467,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["requested",{"_index":223,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["resolve",{"_index":379,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["resolve(r.result",{"_index":497,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resolve(ret",{"_index":539,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["restriction",{"_index":683,"title":{},"body":{"license.html":{}}}],["result",{"_index":82,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":84,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{}}}],["resultsinitstore",{"_index":468,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resultsinitstore.push(initstore(db",{"_index":470,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret",{"_index":534,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(cursor.value",{"_index":540,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(v",{"_index":552,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(cursor.value",{"_index":541,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(v",{"_index":553,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["return",{"_index":56,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["returns",{"_index":103,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["right",{"_index":657,"title":{},"body":{"index.html":{}}}],["rights",{"_index":686,"title":{},"body":{"license.html":{}}}],["root",{"_index":123,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["rootmargin",{"_index":346,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["row",{"_index":640,"title":{},"body":{"index.html":{}}}],["s",{"_index":392,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save",{"_index":137,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["save(p",{"_index":127,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["saved",{"_index":249,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["savescrollposition",{"_index":197,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll",{"_index":7,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["scroll.component",{"_index":414,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.component.ts",{"_index":188,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["scroll.component.ts:108",{"_index":227,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:120",{"_index":229,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:129",{"_index":222,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:135",{"_index":207,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:141",{"_index":212,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:147",{"_index":216,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:153",{"_index":213,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:159",{"_index":233,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:165",{"_index":236,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:24",{"_index":572,"title":{},"body":{"classes/NullLogger.html":{}}}],["scroll.component.ts:249",{"_index":243,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:305",{"_index":247,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:322",{"_index":237,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:350",{"_index":242,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.module.ts",{"_index":410,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.ts",{"_index":145,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:10",{"_index":159,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:12",{"_index":157,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:13",{"_index":164,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:6",{"_index":154,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:8",{"_index":161,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrollbottom",{"_index":395,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollbottomevent",{"_index":260,"title":{"interfaces/ScrollBottomEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollbottomoninit",{"_index":205,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolled",{"_index":211,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollid",{"_index":146,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrolling",{"_index":631,"title":{},"body":{"index.html":{}}}],["scrolltop",{"_index":397,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolltopat(at",{"_index":387,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolltopevent",{"_index":262,"title":{"interfaces/ScrollTopEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollx",{"_index":118,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["scrolly",{"_index":119,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["selector",{"_index":23,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["sell",{"_index":693,"title":{},"body":{"license.html":{}}}],["set",{"_index":624,"title":{},"body":{"index.html":{}}}],["setcountperload",{"_index":360,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["settimeout",{"_index":377,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["shall",{"_index":703,"title":{},"body":{"license.html":{}}}],["simple",{"_index":654,"title":{},"body":{"index.html":{}}}],["simplechanges",{"_index":256,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["small",{"_index":219,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["software",{"_index":677,"title":{},"body":{"license.html":{}}}],["sort",{"_index":533,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["specified",{"_index":643,"title":{},"body":{"index.html":{}}}],["src/.../ngx",{"_index":606,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../ordered",{"_index":607,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/cursor",{"_index":115,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["src/lib/cursor.ts",{"_index":86,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:10",{"_index":105,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:13",{"_index":102,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:16",{"_index":104,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:2",{"_index":96,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/cursor.ts:9",{"_index":107,"title":{},"body":{"classes/Cursor.html":{}}}],["src/lib/logger.ts",{"_index":167,"title":{},"body":{"interfaces/Logger.html":{}}}],["src/lib/logger.ts:2",{"_index":169,"title":{},"body":{"interfaces/Logger.html":{}}}],["src/lib/mugen",{"_index":6,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["src/lib/ngx",{"_index":186,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["src/lib/ordered",{"_index":417,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":612,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":339,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["static",{"_index":442,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store",{"_index":125,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["store.clear",{"_index":510,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.createindex",{"_index":559,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.delete(key",{"_index":500,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.index(index",{"_index":494,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.indices",{"_index":472,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.keypath",{"_index":471,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name",{"_index":447,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name}.${index}.${key",{"_index":449,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.service",{"_index":165,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["store.service.ts",{"_index":116,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["store.service.ts:17",{"_index":138,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:23",{"_index":142,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:27",{"_index":141,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:35",{"_index":139,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:39",{"_index":143,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.transaction.onabort",{"_index":564,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.oncomplete",{"_index":563,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.onerror",{"_index":565,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["storename",{"_index":481,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["storename}.${indexname",{"_index":528,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores",{"_index":459,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores.foreach(async",{"_index":469,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stream",{"_index":228,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["string",{"_index":94,"title":{},"body":{"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["styles",{"_index":288,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["subject",{"_index":698,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":691,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":705,"title":{},"body":{"license.html":{}}}],["suitable",{"_index":632,"title":{},"body":{"index.html":{}}}],["suzuki",{"_index":668,"title":{},"body":{"license.html":{}}}],["switch",{"_index":361,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["t",{"_index":163,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["t,i",{"_index":587,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["tag",{"_index":644,"title":{},"body":{"index.html":{}}}],["taito",{"_index":667,"title":{},"body":{"license.html":{}}}],["target",{"_index":504,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["target.result",{"_index":506,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tbd",{"_index":649,"title":{},"body":{"index.html":{}}}],["template",{"_index":41,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["templateref",{"_index":19,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["then(resolve).catch(reject",{"_index":507,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this._datadirective.arrangeafterpush",{"_index":399,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.arrangeafterunshift",{"_index":401,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.bottom",{"_index":365,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.clear",{"_index":340,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.length",{"_index":370,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.max",{"_index":336,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.newcursor",{"_index":341,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.push(...datas",{"_index":398,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.top",{"_index":364,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._datadirective.unshift(...datas",{"_index":400,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.fetchbottom",{"_index":372,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.fetchoninit(this.countperload",{"_index":357,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.fetchonload(cursorstoreinfo",{"_index":353,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.fetchtop",{"_index":383,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.newcursor",{"_index":342,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.newcursor(at",{"_index":393,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.newcursor(at).tostring",{"_index":389,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.newcursor(this._datadirective.bottom",{"_index":368,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.newcursor(this._datadirective.top",{"_index":369,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.newcursor(this._datadirective.top).tostring",{"_index":388,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this._provider.scrollid",{"_index":367,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autofetchingbottom",{"_index":319,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autofetchingtop",{"_index":320,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autoinitafterviewinit",{"_index":326,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autoloadscrollposition",{"_index":321,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom",{"_index":53,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective",{"_index":292,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.constructor.name",{"_index":427,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.countperload",{"_index":318,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.countperloadmode",{"_index":325,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.load(this._provider.scrollid",{"_index":352,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.save",{"_index":366,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective",{"_index":302,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datas",{"_index":108,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.join(this.delimiter",{"_index":111,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.length",{"_index":110,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.map(v",{"_index":113,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas[i",{"_index":112,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datasmap",{"_index":43,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.clear",{"_index":54,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.has(cursor.tostring",{"_index":63,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.set(cursor.tostring",{"_index":72,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.db",{"_index":456,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.dbname",{"_index":439,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.delete(storename",{"_index":505,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.el",{"_index":316,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.el.nativeelement",{"_index":179,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.element.children",{"_index":391,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.element.scroll(0",{"_index":355,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.element.scrolltop",{"_index":371,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.indexeddb",{"_index":440,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.indexeddb.open(this.dbname",{"_index":461,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.init",{"_index":332,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver",{"_index":343,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.disconnect",{"_index":344,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this._bottomdirective.element",{"_index":350,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this._topdirective.element",{"_index":351,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.iter",{"_index":521,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.logger",{"_index":324,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.logger.info(...msgs",{"_index":394,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.max",{"_index":45,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.name",{"_index":426,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.newcursor",{"_index":47,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.newcursor(data",{"_index":62,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.newintersectionobserver",{"_index":327,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider",{"_index":305,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.push(...datas",{"_index":354,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottom",{"_index":358,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomat(bottombeforeadded",{"_index":378,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomoninit",{"_index":317,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrolltop",{"_index":359,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrolltopat(topbeforeadded",{"_index":386,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.setcountperload",{"_index":329,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.store",{"_index":126,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.delete(p",{"_index":132,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.get(p",{"_index":130,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.set(p",{"_index":128,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.size",{"_index":133,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.timeoutmillisecondsafterbinding",{"_index":322,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.top",{"_index":52,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective",{"_index":297,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.unshift(...datas",{"_index":385,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.validdb",{"_index":478,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.viewcontainer.clear",{"_index":51,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":66,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.length",{"_index":57,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["three",{"_index":636,"title":{},"body":{"index.html":{}}}],["threshold",{"_index":348,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["throw",{"_index":270,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["timeoutmillisecondsafterbinding",{"_index":309,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top",{"_index":35,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["top.directive",{"_index":257,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top.directive.ts",{"_index":181,"title":{},"body":{"directives/MugenScrollTopDirective.html":{}}}],["topbeforeadded",{"_index":384,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["topcursor",{"_index":120,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topdirective",{"_index":295,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tort",{"_index":726,"title":{},"body":{"license.html":{}}}],["tostring",{"_index":90,"title":{},"body":{"classes/Cursor.html":{}}}],["transaction",{"_index":571,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["true",{"_index":64,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["try",{"_index":376,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tslib",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["tx",{"_index":479,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename",{"_index":491,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).getall",{"_index":546,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).index(indexname).opencursor(range",{"_index":536,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).put(arg",{"_index":484,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"interfaces/Logger.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["undefined",{"_index":34,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unique",{"_index":430,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["unshift(...datas",{"_index":73,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["until",{"_index":70,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["up",{"_index":625,"title":{},"body":{"index.html":{}}}],["usage",{"_index":627,"title":{},"body":{"index.html":{}}}],["use",{"_index":658,"title":{},"body":{"index.html":{},"license.html":{}}}],["v",{"_index":39,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.keypath",{"_index":561,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.name",{"_index":560,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.unique",{"_index":562,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validdb",{"_index":455,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validtx",{"_index":608,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validtx(db",{"_index":480,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["value",{"_index":583,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["var",{"_index":402,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["variable",{"_index":642,"title":{},"body":{"index.html":{}}}],["version",{"_index":462,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"index.html":{}}}],["versionchange",{"_index":567,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["viewcontainer",{"_index":42,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["viewcontainerref",{"_index":20,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["visible",{"_index":646,"title":{},"body":{"index.html":{}}}],["void",{"_index":50,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/Logger.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["vref.context",{"_index":79,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["wait",{"_index":69,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["warranties",{"_index":712,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":707,"title":{},"body":{"license.html":{}}}],["whether",{"_index":208,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NullLogger.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"license.html":{}}}],["window.indexeddb",{"_index":441,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["without",{"_index":682,"title":{},"body":{"license.html":{}}}],["yes",{"_index":610,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Ctx.html":{"url":"interfaces/Ctx.html","title":"interface - Ctx","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Ctx\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 30;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public arrangeAfterPush(): void {\n    const n = this.viewContainer.length - this.max;\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.top = ctx.data;\n    }\n    return;\n  }\n\n  /**\n   * @ignore\n   */\n  public arrangeAfterUnshift(): void {\n    const n = this.viewContainer.length - this.max;\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cursor.html":{"url":"classes/Cursor.html","title":"class - Cursor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cursor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getItem\n                            \n                            \n                                getItems\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(datas: Array, delimiter: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        datas\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        delimiter\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItem\n                        \n                        \n                    \n                \n            \n            \n                \ngetItem(i: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItems\n                        \n                        \n                    \n                \n            \n            \n                \ngetItems()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/cursor.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export class Cursor {\n    private datas: Array;\n    constructor(\n        datas: Array,\n        private delimiter: string = '-',\n    ) {\n        this.datas = datas.map(v => v);\n    }\n    get length(): number { return this.datas.length; }\n    toString(): string {\n        return this.datas.join(this.delimiter);\n    }\n    getItem(i: number): number | string {\n        return this.datas[i];\n    }\n    getItems(): Array {\n        return this.datas.map(v => v);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CursorStoreInfo.html":{"url":"interfaces/CursorStoreInfo.html","title":"interface - CursorStoreInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CursorStoreInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomCursor\n                                \n                                \n                                        n\n                                \n                                \n                                        scrollX\n                                \n                                \n                                        scrollY\n                                \n                                \n                                        topCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomCursor\n                                    \n                                \n                                \n                                    \n                                        bottomCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        n\n                                    \n                                \n                                \n                                    \n                                        n:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollX\n                                    \n                                \n                                \n                                    \n                                        scrollX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollY\n                                    \n                                \n                                \n                                    \n                                        scrollY:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topCursor\n                                    \n                                \n                                \n                                    \n                                        topCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollY: number;\n  scrollX: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollY: number): void {\n    this.store.set(p, { bottomCursor, topCursor, n, scrollY, scrollX: 0 });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get length(): number {\n    return this.store.size;\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CursorStoreService.html":{"url":"injectables/CursorStoreService.html","title":"injectable - CursorStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CursorStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cursor-store.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                load\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/cursor-store.service.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            load\n                        \n                        \n                    \n                \n            \n            \n                \nload(p: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollY: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cursor-store.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottomCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scrollY\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in src/lib/cursor-store.service.ts:39\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollY: number;\n  scrollX: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollY: number): void {\n    this.store.set(p, { bottomCursor, topCursor, n, scrollY, scrollX: 0 });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get length(): number {\n    return this.store.size;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataProvider.html":{"url":"interfaces/DataProvider.html","title":"interface - DataProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        scrollId\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fetchBottom\n                                \n                                \n                                    fetchOnInit\n                                \n                                \n                                    fetchOnLoad\n                                \n                                \n                                    fetchTop\n                                \n                                \n                                    newCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \nfetchBottom(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnInit(n: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnLoad\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnLoad(info: CursorStoreInfo)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                                CursorStoreInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \nfetchTop(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            newCursor\n                        \n                        \n                    \n                \n            \n            \n                \nnewCursor(v: T)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/mugen-scroll.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Cursor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scrollId\n                                    \n                                \n                                \n                                    \n                                        scrollId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cursor } from './cursor';\nimport { CursorStoreInfo } from './cursor-store.service';\n\nexport interface DataProvider {\n    scrollId: string;\n    fetchBottom(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchTop(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchOnLoad(\n        info: CursorStoreInfo): Promise>;\n    fetchOnInit(n: number): Promise>;\n    newCursor(v: T): Cursor;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Logger.html":{"url":"interfaces/Logger.html","title":"interface - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    info\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            info\n                        \n                        \n                    \n                \n            \n            \n                \ninfo(...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface Logger {\n    info(...args: Array): void;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollBottomDirective.html":{"url":"directives/MugenScrollBottomDirective.html","title":"directive - MugenScrollBottomDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollBottomDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-bottom.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollBottom]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollBottom]'\n})\nexport class MugenScrollBottomDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) { }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollDataDirective.html":{"url":"directives/MugenScrollDataDirective.html","title":"directive - MugenScrollDataDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollDataDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollData]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n\n  /**\n   * @ignore\n   */\n  public bottom: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public top: object | undefined;\n\n  /**\n   * @ignore\n   */\n  public max: number;\n\n  /**\n   * @ignore\n   */\n  public newCursor: (v: object) => Cursor;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 30;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  /**\n   * @ignore\n   */\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  /**\n   * @ignore\n   */\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  /**\n   * @ignore\n   */\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  public arrangeAfterPush(): void {\n    const n = this.viewContainer.length - this.max;\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.top = ctx.data;\n    }\n    return;\n  }\n\n  /**\n   * @ignore\n   */\n  public arrangeAfterUnshift(): void {\n    const n = this.viewContainer.length - this.max;\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollTopDirective.html":{"url":"directives/MugenScrollTopDirective.html","title":"directive - MugenScrollTopDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollTopDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/mugen-scroll-top.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollTop]\n                    \n\n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollTop]'\n})\nexport class MugenScrollTopDirective {\n\n  /**\n   * @ignore\n   */\n  constructor(\n    private el: ElementRef,\n  ) {\n  }\n\n  /**\n   * @ignore\n   */\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMugenScrollComponent.html":{"url":"components/NgxMugenScrollComponent.html","title":"component - NgxMugenScrollComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxMugenScrollComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n    File\n\n\n    src/lib/ngx-mugen-scroll.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                lib-ngx-mugen-scroll\n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchBottom\n                            \n                            \n                                    Async\n                                fetchTop\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                saveScrollPosition\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoFetchingBottom\n                            \n                            \n                                autoFetchingTop\n                            \n                            \n                                autoInitAfterViewInit\n                            \n                            \n                                autoLoadScrollPosition\n                            \n                            \n                                countPerLoadMode\n                            \n                            \n                                provider\n                            \n                            \n                                scrollBottomOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                bottom\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoFetchingBottom\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:135\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoFetchingTop\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:141\n                            \n                        \n                \n                    \n                        Whether the data is fetched automatically when scrolled to top.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoInitAfterViewInit\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:153\n                            \n                        \n                \n                    \n                        Whether call init function on afterViewInit\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autoLoadScrollPosition\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:147\n                            \n                        \n                \n                    \n                        Whether the scroll position is loaded automatically.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        countPerLoadMode\n                    \n                \n                \n                    \n                        Type :     \"small\" | \"middle\" | \"big\"\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:129\n                            \n                        \n                \n                    \n                        The number of data fetched by provider when new data is requested.\nIf 'small' then 10.\nIf 'middle' then 50.\nIf 'big' then 100.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        provider\n                    \n                \n                \n                    \n                        Type :         DataProvider | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:108\n                            \n                        \n                \n                    \n                        Provider of stream data\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollBottomOnInit\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:120\n                            \n                        \n                \n                    \n                        Whether scroll to bottom or not when stream is displayed initially.\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        bottom\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:159\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to bottom.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/ngx-mugen-scroll.component.ts:165\n                            \n                        \n                \n                    \n                        Event emitted when scrolled to top.\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchBottom()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:322\n                \n            \n\n\n            \n                \n                    Fetch data and appended to bottom.\nThe data is provided by fetchBottom method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchTop()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:350\n                \n            \n\n\n            \n                \n                    Fetch data and appended to top.\nThe data is provided by fetchTop method of the provider.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:249\n                \n            \n\n\n            \n                \n                    Initialize stream. This method is also called in ngAfterViewInit.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveScrollPosition\n                        \n                        \n                    \n                \n            \n            \n                \nsaveScrollPosition()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:305\n                \n            \n\n\n            \n                \n                    Save current scroll position.\nScroll position is saved on memory and related to provider.scrollId.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter, Input, OnChanges, OnInit, Output,\n  SimpleChanges\n} from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent {\n  intersectionRatio: number;\n}\nexport interface ScrollTopEvent {\n  intersectionRatio: number;\n}\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\nfunction callbackIntersectionObserver(component: NgxMugenScrollComponent): IntersectionObserverCallback {\n  return (entities: Array): void => {\n    entities.forEach(entity => {\n      if (component.bottomDirective === undefined) {\n        throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n      }\n      if (component.topDirective === undefined) {\n        throw new Error('MugenScrollTopDirective is undefined in ng-content');\n      }\n      if (entity.target === component.topDirective.element && entity.isIntersecting === true) {\n        component.top.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingTop === false) {\n          return;\n        }\n        component.fetchTop();\n      }\n      if (entity.target === component.bottomDirective.element && entity.isIntersecting === true) {\n        component.bottom.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingBottom === false) {\n          return;\n        }\n        component.fetchBottom();\n      }\n    });\n  };\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollBottomDirective)\n  public bottomDirective: MugenScrollBottomDirective | undefined;\n  private get _bottomDirective(): MugenScrollBottomDirective {\n    if (this.bottomDirective === undefined) {\n      throw new Error('bottomDirective is undefined');\n    }\n    return this.bottomDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollTopDirective)\n  public topDirective: MugenScrollTopDirective | undefined;\n  private get _topDirective(): MugenScrollTopDirective {\n    if (this.topDirective === undefined) {\n      throw new Error('topDirective is undefined');\n    }\n    return this.topDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollDataDirective)\n  public dataDirective: MugenScrollDataDirective | undefined;\n  private get _dataDirective(): MugenScrollDataDirective {\n    if (this.dataDirective === undefined) {\n      throw new Error('dataDirective is undefined');\n    }\n    return this.dataDirective;\n  }\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n  private get _provider(): DataProvider {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined');\n    }\n    return this.provider;\n  }\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Whether call init function on afterViewInit\n   */\n  @Input()\n  public autoInitAfterViewInit: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  /**\n   * @ignore\n   */\n  public intersectionObserver: IntersectionObserver | undefined;\n\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  public countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  public newIntersectionObserver:\n    (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => IntersectionObserver;\n\n  private get element(): HTMLElement {\n    return this.el.nativeElement as HTMLElement;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(\n    public el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    console.log('foo', this.el);\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.autoInitAfterViewInit = true;\n    this.newIntersectionObserver = (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => {\n      return new IntersectionObserver(callback, options);\n    };\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    if (this.autoInitAfterViewInit) {\n      await this.init();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  async init(): Promise {\n    this._dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this._dataDirective.clear();\n    this._dataDirective.newCursor = this._provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = this.newIntersectionObserver(\n      callbackIntersectionObserver(this),\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this._bottomDirective.element);\n    this.intersectionObserver.observe(this._topDirective.element);\n    // Load data\n    let datas = [];\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this._provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        datas = await this._provider.fetchOnLoad(cursorStoreInfo);\n        this.push(...datas);\n        this.element.scroll(0, cursorStoreInfo.scrollY);\n        return;\n      }\n    }\n    datas = await this._provider.fetchOnInit(this.countPerLoad);\n    this.push(...datas);\n    if (this.scrollBottomOnInit) {\n      this.scrollBottom();\n      return;\n    }\n    this.scrollTop();\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `provider.scrollId`.\n   */\n  saveScrollPosition(): void {\n    if (this._dataDirective.top === undefined || this._dataDirective.bottom === undefined) {\n      return;\n    }\n    this.cursorStoreService.save(\n      this._provider.scrollId,\n      this._provider.newCursor(this._dataDirective.bottom),\n      this._provider.newCursor(this._dataDirective.top),\n      this._dataDirective.length,\n      this.element.scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this._dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchBottom(\n      this._provider.newCursor(this._dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this._dataDirective.bottom;\n    this.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this._dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchTop(\n      this._provider.newCursor(this._dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this._dataDirective.top;\n    this.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTopAt(at: object): void {\n    if (this._dataDirective.top !== undefined) {\n      if (this._provider.newCursor(this._dataDirective.top).toString() === this._provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    console.log('hello', this.element.children);\n    let s = 0;\n    const cursor = this._provider.newCursor(at);\n    for (let i = 0; i  = [];\n    for (let i = 0; i ): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollBottom(): void {\n    this.element.scroll(0, 9999999);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTop(): void {\n    this.element.scroll(0, 0);\n  }\n\n  private push(...datas: Array): void {\n    this._dataDirective.push(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterPush();\n    }\n  }\n\n  private unshift(...datas: Array): void {\n    this._dataDirective.unshift(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterUnshift();\n    }\n  }\n}\n\n    \n\n\n\n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'NgxMugenScrollComponent', 'selector': 'lib-ngx-mugen-scroll'}];\n    var DIRECTIVES = [{'name': 'MugenScrollBottomDirective', 'selector': '[libMugenScrollBottom]'},{'name': 'MugenScrollDataDirective', 'selector': '[libMugenScrollData]'},{'name': 'MugenScrollTopDirective', 'selector': '[libMugenScrollTop]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMugenScrollComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxMugenScrollModule.html":{"url":"modules/NgxMugenScrollModule.html","title":"module - NgxMugenScrollModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxMugenScrollModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxMugenScrollComponent } from './ngx-mugen-scroll.component';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n})\nexport class NgxMugenScrollModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundResourceError.html":{"url":"classes/NotFoundResourceError.html","title":"class - NotFoundResourceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundResourceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Error\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NullLogger.html":{"url":"classes/NullLogger.html","title":"class - NullLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NullLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Logger\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                info\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            info\n                        \n                        \n                    \n                \n            \n            \n                \ninfo(...msgs: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ngx-mugen-scroll.component.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    msgs\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  AfterViewInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter, Input, OnChanges, OnInit, Output,\n  SimpleChanges\n} from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent {\n  intersectionRatio: number;\n}\nexport interface ScrollTopEvent {\n  intersectionRatio: number;\n}\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\nfunction callbackIntersectionObserver(component: NgxMugenScrollComponent): IntersectionObserverCallback {\n  return (entities: Array): void => {\n    entities.forEach(entity => {\n      if (component.bottomDirective === undefined) {\n        throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n      }\n      if (component.topDirective === undefined) {\n        throw new Error('MugenScrollTopDirective is undefined in ng-content');\n      }\n      if (entity.target === component.topDirective.element && entity.isIntersecting === true) {\n        component.top.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingTop === false) {\n          return;\n        }\n        component.fetchTop();\n      }\n      if (entity.target === component.bottomDirective.element && entity.isIntersecting === true) {\n        component.bottom.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingBottom === false) {\n          return;\n        }\n        component.fetchBottom();\n      }\n    });\n  };\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollBottomDirective)\n  public bottomDirective: MugenScrollBottomDirective | undefined;\n  private get _bottomDirective(): MugenScrollBottomDirective {\n    if (this.bottomDirective === undefined) {\n      throw new Error('bottomDirective is undefined');\n    }\n    return this.bottomDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollTopDirective)\n  public topDirective: MugenScrollTopDirective | undefined;\n  private get _topDirective(): MugenScrollTopDirective {\n    if (this.topDirective === undefined) {\n      throw new Error('topDirective is undefined');\n    }\n    return this.topDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollDataDirective)\n  public dataDirective: MugenScrollDataDirective | undefined;\n  private get _dataDirective(): MugenScrollDataDirective {\n    if (this.dataDirective === undefined) {\n      throw new Error('dataDirective is undefined');\n    }\n    return this.dataDirective;\n  }\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n  private get _provider(): DataProvider {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined');\n    }\n    return this.provider;\n  }\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Whether call init function on afterViewInit\n   */\n  @Input()\n  public autoInitAfterViewInit: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  /**\n   * @ignore\n   */\n  public intersectionObserver: IntersectionObserver | undefined;\n\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  public countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  public newIntersectionObserver:\n    (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => IntersectionObserver;\n\n  private get element(): HTMLElement {\n    return this.el.nativeElement as HTMLElement;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(\n    public el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    console.log('foo', this.el);\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.autoInitAfterViewInit = true;\n    this.newIntersectionObserver = (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => {\n      return new IntersectionObserver(callback, options);\n    };\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    if (this.autoInitAfterViewInit) {\n      await this.init();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  async init(): Promise {\n    this._dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this._dataDirective.clear();\n    this._dataDirective.newCursor = this._provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = this.newIntersectionObserver(\n      callbackIntersectionObserver(this),\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this._bottomDirective.element);\n    this.intersectionObserver.observe(this._topDirective.element);\n    // Load data\n    let datas = [];\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this._provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        datas = await this._provider.fetchOnLoad(cursorStoreInfo);\n        this.push(...datas);\n        this.element.scroll(0, cursorStoreInfo.scrollY);\n        return;\n      }\n    }\n    datas = await this._provider.fetchOnInit(this.countPerLoad);\n    this.push(...datas);\n    if (this.scrollBottomOnInit) {\n      this.scrollBottom();\n      return;\n    }\n    this.scrollTop();\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `provider.scrollId`.\n   */\n  saveScrollPosition(): void {\n    if (this._dataDirective.top === undefined || this._dataDirective.bottom === undefined) {\n      return;\n    }\n    this.cursorStoreService.save(\n      this._provider.scrollId,\n      this._provider.newCursor(this._dataDirective.bottom),\n      this._provider.newCursor(this._dataDirective.top),\n      this._dataDirective.length,\n      this.element.scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this._dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchBottom(\n      this._provider.newCursor(this._dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this._dataDirective.bottom;\n    this.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this._dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchTop(\n      this._provider.newCursor(this._dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this._dataDirective.top;\n    this.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTopAt(at: object): void {\n    if (this._dataDirective.top !== undefined) {\n      if (this._provider.newCursor(this._dataDirective.top).toString() === this._provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    console.log('hello', this.element.children);\n    let s = 0;\n    const cursor = this._provider.newCursor(at);\n    for (let i = 0; i  = [];\n    for (let i = 0; i ): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollBottom(): void {\n    this.element.scroll(0, 9999999);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTop(): void {\n    this.element.scroll(0, 0);\n  }\n\n  private push(...datas: Array): void {\n    this._dataDirective.push(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterPush();\n    }\n  }\n\n  private unshift(...datas: Array): void {\n    this._dataDirective.unshift(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterUnshift();\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderedDataStoreIdxService.html":{"url":"injectables/OrderedDataStoreIdxService.html","title":"injectable - OrderedDataStoreIdxService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OrderedDataStoreIdxService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                clear\n                            \n                            \n                                    Async\n                                clearAll\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Public\n                                    Async\n                                filter\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getLargerN\n                            \n                            \n                                    Async\n                                getSmallerN\n                            \n                            \n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/ordered-data-store-idx.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(storeName: string, ...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear(storeName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearAll()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(storeName: string, key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    key\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            fetch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(base: OrderedDataStoreIdxService, store: OrderedDataStoreIdxServiceStore, key: string, index: string, fetcher: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                OrderedDataStoreIdxService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    store\n                                    \n                                                OrderedDataStoreIdxServiceStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fetcher\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            filter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filter(storeName: string, direction: \"next\" | \"prev\", cb: (v: T,i: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:293\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    direction\n                                    \n                                            \"next\" | \"prev\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(storeName: string, query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:113\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLargerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLargerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:198\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSmallerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSmallerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:225\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(version: number, stores: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ordered-data-store-idx.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stores\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceIndex.html":{"url":"interfaces/OrderedDataStoreIdxServiceIndex.html","title":"interface - OrderedDataStoreIdxServiceIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                                \n                                        unique\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unique\n                                    \n                                \n                                \n                                    \n                                        unique:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceStore.html":{"url":"interfaces/OrderedDataStoreIdxServiceStore.html","title":"interface - OrderedDataStoreIdxServiceStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        indices\n                                \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        indices\n                                    \n                                \n                                \n                                    \n                                        indices:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollBottomEvent.html":{"url":"interfaces/ScrollBottomEvent.html","title":"interface - ScrollBottomEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollBottomEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        intersectionRatio\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        intersectionRatio\n                                    \n                                \n                                \n                                    \n                                        intersectionRatio:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  AfterViewInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter, Input, OnChanges, OnInit, Output,\n  SimpleChanges\n} from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent {\n  intersectionRatio: number;\n}\nexport interface ScrollTopEvent {\n  intersectionRatio: number;\n}\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\nfunction callbackIntersectionObserver(component: NgxMugenScrollComponent): IntersectionObserverCallback {\n  return (entities: Array): void => {\n    entities.forEach(entity => {\n      if (component.bottomDirective === undefined) {\n        throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n      }\n      if (component.topDirective === undefined) {\n        throw new Error('MugenScrollTopDirective is undefined in ng-content');\n      }\n      if (entity.target === component.topDirective.element && entity.isIntersecting === true) {\n        component.top.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingTop === false) {\n          return;\n        }\n        component.fetchTop();\n      }\n      if (entity.target === component.bottomDirective.element && entity.isIntersecting === true) {\n        component.bottom.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingBottom === false) {\n          return;\n        }\n        component.fetchBottom();\n      }\n    });\n  };\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollBottomDirective)\n  public bottomDirective: MugenScrollBottomDirective | undefined;\n  private get _bottomDirective(): MugenScrollBottomDirective {\n    if (this.bottomDirective === undefined) {\n      throw new Error('bottomDirective is undefined');\n    }\n    return this.bottomDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollTopDirective)\n  public topDirective: MugenScrollTopDirective | undefined;\n  private get _topDirective(): MugenScrollTopDirective {\n    if (this.topDirective === undefined) {\n      throw new Error('topDirective is undefined');\n    }\n    return this.topDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollDataDirective)\n  public dataDirective: MugenScrollDataDirective | undefined;\n  private get _dataDirective(): MugenScrollDataDirective {\n    if (this.dataDirective === undefined) {\n      throw new Error('dataDirective is undefined');\n    }\n    return this.dataDirective;\n  }\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n  private get _provider(): DataProvider {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined');\n    }\n    return this.provider;\n  }\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Whether call init function on afterViewInit\n   */\n  @Input()\n  public autoInitAfterViewInit: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  /**\n   * @ignore\n   */\n  public intersectionObserver: IntersectionObserver | undefined;\n\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  public countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  public newIntersectionObserver:\n    (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => IntersectionObserver;\n\n  private get element(): HTMLElement {\n    return this.el.nativeElement as HTMLElement;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(\n    public el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    console.log('foo', this.el);\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.autoInitAfterViewInit = true;\n    this.newIntersectionObserver = (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => {\n      return new IntersectionObserver(callback, options);\n    };\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    if (this.autoInitAfterViewInit) {\n      await this.init();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  async init(): Promise {\n    this._dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this._dataDirective.clear();\n    this._dataDirective.newCursor = this._provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = this.newIntersectionObserver(\n      callbackIntersectionObserver(this),\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this._bottomDirective.element);\n    this.intersectionObserver.observe(this._topDirective.element);\n    // Load data\n    let datas = [];\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this._provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        datas = await this._provider.fetchOnLoad(cursorStoreInfo);\n        this.push(...datas);\n        this.element.scroll(0, cursorStoreInfo.scrollY);\n        return;\n      }\n    }\n    datas = await this._provider.fetchOnInit(this.countPerLoad);\n    this.push(...datas);\n    if (this.scrollBottomOnInit) {\n      this.scrollBottom();\n      return;\n    }\n    this.scrollTop();\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `provider.scrollId`.\n   */\n  saveScrollPosition(): void {\n    if (this._dataDirective.top === undefined || this._dataDirective.bottom === undefined) {\n      return;\n    }\n    this.cursorStoreService.save(\n      this._provider.scrollId,\n      this._provider.newCursor(this._dataDirective.bottom),\n      this._provider.newCursor(this._dataDirective.top),\n      this._dataDirective.length,\n      this.element.scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this._dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchBottom(\n      this._provider.newCursor(this._dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this._dataDirective.bottom;\n    this.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this._dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchTop(\n      this._provider.newCursor(this._dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this._dataDirective.top;\n    this.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTopAt(at: object): void {\n    if (this._dataDirective.top !== undefined) {\n      if (this._provider.newCursor(this._dataDirective.top).toString() === this._provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    console.log('hello', this.element.children);\n    let s = 0;\n    const cursor = this._provider.newCursor(at);\n    for (let i = 0; i  = [];\n    for (let i = 0; i ): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollBottom(): void {\n    this.element.scroll(0, 9999999);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTop(): void {\n    this.element.scroll(0, 0);\n  }\n\n  private push(...datas: Array): void {\n    this._dataDirective.push(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterPush();\n    }\n  }\n\n  private unshift(...datas: Array): void {\n    this._dataDirective.unshift(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterUnshift();\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollTopEvent.html":{"url":"interfaces/ScrollTopEvent.html","title":"interface - ScrollTopEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollTopEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        intersectionRatio\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        intersectionRatio\n                                    \n                                \n                                \n                                    \n                                        intersectionRatio:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  AfterViewInit,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter, Input, OnChanges, OnInit, Output,\n  SimpleChanges\n} from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\nimport { Logger } from './logger';\n\nexport interface ScrollBottomEvent {\n  intersectionRatio: number;\n}\nexport interface ScrollTopEvent {\n  intersectionRatio: number;\n}\n\nclass NullLogger implements Logger {\n  info(...msgs: Array): void { }\n}\n\nfunction callbackIntersectionObserver(component: NgxMugenScrollComponent): IntersectionObserverCallback {\n  return (entities: Array): void => {\n    entities.forEach(entity => {\n      if (component.bottomDirective === undefined) {\n        throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n      }\n      if (component.topDirective === undefined) {\n        throw new Error('MugenScrollTopDirective is undefined in ng-content');\n      }\n      if (entity.target === component.topDirective.element && entity.isIntersecting === true) {\n        component.top.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingTop === false) {\n          return;\n        }\n        component.fetchTop();\n      }\n      if (entity.target === component.bottomDirective.element && entity.isIntersecting === true) {\n        component.bottom.emit({\n          intersectionRatio: entity.intersectionRatio,\n        });\n        if (component.autoFetchingBottom === false) {\n          return;\n        }\n        component.fetchBottom();\n      }\n    });\n  };\n}\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit, OnChanges {\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollBottomDirective)\n  public bottomDirective: MugenScrollBottomDirective | undefined;\n  private get _bottomDirective(): MugenScrollBottomDirective {\n    if (this.bottomDirective === undefined) {\n      throw new Error('bottomDirective is undefined');\n    }\n    return this.bottomDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollTopDirective)\n  public topDirective: MugenScrollTopDirective | undefined;\n  private get _topDirective(): MugenScrollTopDirective {\n    if (this.topDirective === undefined) {\n      throw new Error('topDirective is undefined');\n    }\n    return this.topDirective;\n  }\n\n  /**\n   * @ignore\n   */\n  @ContentChild(MugenScrollDataDirective)\n  public dataDirective: MugenScrollDataDirective | undefined;\n  private get _dataDirective(): MugenScrollDataDirective {\n    if (this.dataDirective === undefined) {\n      throw new Error('dataDirective is undefined');\n    }\n    return this.dataDirective;\n  }\n\n  /**\n   * Provider of stream data\n   */\n  @Input()\n  public provider: DataProvider | undefined;\n  private get _provider(): DataProvider {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined');\n    }\n    return this.provider;\n  }\n\n  /**\n   * Whether scroll to bottom or not when stream is displayed initially.\n   */\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  /**\n   * The number of data fetched by provider when new data is requested.\n   * If 'small' then 10.\n   * If 'middle' then 50.\n   * If 'big' then 100.\n   */\n  @Input()\n  public countPerLoadMode: 'small' | 'middle' | 'big';\n\n  /**\n   * Whether the data is fetched automatically when scrolled to bottom.\n   */\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  /**\n   * Whether the data is fetched automatically when scrolled to top.\n   */\n  @Input()\n  public autoFetchingTop: boolean;\n\n  /**\n   * Whether the scroll position is loaded automatically.\n   */\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  /**\n   * Whether call init function on afterViewInit\n   */\n  @Input()\n  public autoInitAfterViewInit: boolean;\n\n  /**\n   * Event emitted when scrolled to bottom.\n   */\n  @Output()\n  public bottom: EventEmitter;\n\n  /**\n   * Event emitted when scrolled to top.\n   */\n  @Output()\n  public top: EventEmitter;\n\n  /**\n   * @ignore\n   * Logger for debug\n   */\n  @Input()\n  public logger: Logger;\n\n  /**\n   * @ignore\n   */\n  public intersectionObserver: IntersectionObserver | undefined;\n\n  private timeoutMillisecondsAfterBinding: number;\n\n  /**\n   * @ignore\n   */\n  public countPerLoad: number;\n\n  /**\n   * @ignore\n   */\n  public newIntersectionObserver:\n    (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => IntersectionObserver;\n\n  private get element(): HTMLElement {\n    return this.el.nativeElement as HTMLElement;\n  }\n\n  /**\n   * @ignore\n   */\n  constructor(\n    public el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    console.log('foo', this.el);\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 10;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n    this.timeoutMillisecondsAfterBinding = 1;\n    this.logger = new NullLogger();\n    this.countPerLoadMode = 'small';\n    this.autoInitAfterViewInit = true;\n    this.newIntersectionObserver = (callback: IntersectionObserverCallback, options?: IntersectionObserverInit | undefined) => {\n      return new IntersectionObserver(callback, options);\n    };\n    this.setCountPerLoad();\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit(): void {\n  }\n\n  /**\n   * @ignore\n   */\n  async ngAfterViewInit(): Promise {\n    if (this.autoInitAfterViewInit) {\n      await this.init();\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.countPerLoadMode) {\n      this.countPerLoadMode = changes.countPerLoadMode.currentValue;\n      this.setCountPerLoad();\n    }\n  }\n\n  /**\n   * Initialize stream. This method is also called in `ngAfterViewInit`.\n   */\n  async init(): Promise {\n    this._dataDirective.max = this.countPerLoad * 3;\n    // Clear previous state\n    this._dataDirective.clear();\n    this._dataDirective.newCursor = this._provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = this.newIntersectionObserver(\n      callbackIntersectionObserver(this),\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this._bottomDirective.element);\n    this.intersectionObserver.observe(this._topDirective.element);\n    // Load data\n    let datas = [];\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this._provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        datas = await this._provider.fetchOnLoad(cursorStoreInfo);\n        this.push(...datas);\n        this.element.scroll(0, cursorStoreInfo.scrollY);\n        return;\n      }\n    }\n    datas = await this._provider.fetchOnInit(this.countPerLoad);\n    this.push(...datas);\n    if (this.scrollBottomOnInit) {\n      this.scrollBottom();\n      return;\n    }\n    this.scrollTop();\n  }\n\n  private setCountPerLoad(): void {\n    this.countPerLoad = 10;\n    switch (this.countPerLoadMode) {\n      case 'middle':\n        this.countPerLoad = 50;\n        break;\n      case 'big':\n        this.countPerLoad = 100;\n        break;\n    }\n  }\n\n  /**\n   * Save current scroll position.\n   * Scroll position is saved on memory and related to `provider.scrollId`.\n   */\n  saveScrollPosition(): void {\n    if (this._dataDirective.top === undefined || this._dataDirective.bottom === undefined) {\n      return;\n    }\n    this.cursorStoreService.save(\n      this._provider.scrollId,\n      this._provider.newCursor(this._dataDirective.bottom),\n      this._provider.newCursor(this._dataDirective.top),\n      this._dataDirective.length,\n      this.element.scrollTop,\n    );\n  }\n\n  /**\n   * Fetch data and appended to bottom.\n   * The data is provided by `fetchBottom` method of the `provider`.\n   */\n  async fetchBottom(): Promise {\n    if (this._dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchBottom(\n      this._provider.newCursor(this._dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    const bottomBeforeAdded = this._dataDirective.bottom;\n    this.push(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollBottomAt(bottomBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Fetch data and appended to top.\n   * The data is provided by `fetchTop` method of the `provider`.\n   */\n  async fetchTop(): Promise {\n    if (this._dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this._provider.fetchTop(\n      this._provider.newCursor(this._dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this._dataDirective.top;\n    this.unshift(...datas);\n\n    return new Promise((resolve, reject) => {\n      try {\n        setTimeout(() => {\n          this.scrollTopAt(topBeforeAdded);\n          resolve();\n        }, this.timeoutMillisecondsAfterBinding);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTopAt(at: object): void {\n    if (this._dataDirective.top !== undefined) {\n      if (this._provider.newCursor(this._dataDirective.top).toString() === this._provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    console.log('hello', this.element.children);\n    let s = 0;\n    const cursor = this._provider.newCursor(at);\n    for (let i = 0; i  = [];\n    for (let i = 0; i ): void {\n    if (this.logger === undefined) {\n      return;\n    }\n    this.logger.info(...msgs);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollBottom(): void {\n    this.element.scroll(0, 9999999);\n  }\n\n  /**\n   * @ignore\n   */\n  scrollTop(): void {\n    this.element.scroll(0, 0);\n  }\n\n  private push(...datas: Array): void {\n    this._dataDirective.push(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterPush();\n    }\n  }\n\n  private unshift(...datas: Array): void {\n    this._dataDirective.unshift(...datas);\n    if (this._dataDirective.length > this._dataDirective.max) {\n      this._dataDirective.arrangeAfterUnshift();\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^11.0.9\n        \n            @angular/core : ^11.0.9\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            callbackIntersectionObserver   (src/.../ngx-mugen-scroll.component.ts)\n                        \n                        \n                            initStore   (src/.../ordered-data-store-idx.service.ts)\n                        \n                        \n                            validTx   (src/.../ordered-data-store-idx.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ngx-mugen-scroll.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            callbackIntersectionObserver\n                        \n                        \n                    \n                \n            \n            \n                \ncallbackIntersectionObserver(component)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    component\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IntersectionObserverCallback\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/lib/ordered-data-store-idx.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            initStore\n                        \n                        \n                    \n                \n            \n            \n                \ninitStore(db, storeName, keyPath, indecies)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keyPath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    indecies\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validTx\n                        \n                        \n                    \n                \n            \n            \n                \nvalidTx(db, storeName, mode?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IDBTransaction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nThe infinite scroll library for AngularJS\nNgxMugenScroll\nThis library was generated with Angular CLI version 11.0.9.\n\nAPI references\nlive demo1\n\nSet up\nYou need to import NgxMugenScrollModule.\nimport { NgxMugenScrollModule } from 'ngx-mugen-scroll';\n...\n@NgModule({\n  imports: [\n      ...\n    NgxMugenScrollModule,\n      ...\n  ],Usage\nOverview\nComponent\nThis library provides NgxMugenScrollComponent that implements infinite scroll.\nNgxMugenScrollComponent has provider that provides datas displayed on the component during scrolling.\nprovider is suitable for DataProvider interface.\nScroll position is saved automatically in memory. Saved position can be loaded when stream is redisplayed.\n\n      \n      \n            {{data.index}}\n            {{data.message}}\n      \n      \nNgxMugenScrollComponent must have three children.\n\nTop component\nThe component with libMugenScrollTop attribute represents top of the NgxMugenScrollComponent.\n\n\nBottom component\nThe component with libMugenScrollBottom attribute represents bottom of the NgxMugenScrollComponent.\n\n\nData component\nThe component with libMugenScrollData attribute represents row of the stream in NgxMugenScrollComponent.\nLocal variable data is provided by provider specified in lib-ngx-mugen-scroll tag.\n\n\n\nIf autoFetchingBottom(autoFetchingTop) is set to true and top component is visible, then next data is provided by provider and appended to the bottom(top) of stream.\nProvider\nThe class implementing Provider interface provides data on the stream.\nTBD\nScroll position store feature\nTBD\nAPI\n\nreference docs\n\nExample\nSimple infinite scroll\nIn left stream, data is fetched automatically when stream is located to bottom(top).\nIn Right stream, data is not fetched automatically when stream is located to bottom(top).\nWhen use click Read more ... button, the data is fetched.\nlive demo1\nSave scroll position\nlive demo2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCopyright 2021 Taito Suzuki\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxMugenScrollModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
