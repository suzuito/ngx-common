var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/Ctx.html",[0,0.118,1,1.675]],["body/interfaces/Ctx.html",[0,0.134,1,3.34,2,1.156,3,0.386,4,0.386,5,0.317,6,0.253,7,0.192,8,1.468,9,0.536,10,2.187,11,0.458,12,1.054,13,1.433,14,2.791,15,0.536,16,0.048,17,0.6,18,1.344,19,1.302,20,3.762,21,1.662,22,3.374,23,3.374,24,0.458,25,0.737,26,1.302,27,2.578,28,0.386,29,0.253,30,1.027,31,0.83,32,2.578,33,2.481,34,1.59,35,1.662,36,1.327,37,1.662,38,2.578,39,0.81,40,2.187,41,1.514,42,0.536,43,1.662,44,2.578,45,2.578,46,0.927,47,2.578,48,2.578,49,2.578,50,2.578,51,1.468,52,1.79,53,2.578,54,2.67,55,2.67,56,2.578,57,2.187,58,0.83,59,3.374,60,2.578,61,1.192,62,2.578,63,1.372,64,3.991,65,3.374,66,1.344,67,1.921,68,3.374,69,3.374,70,3.374,71,3.374,72,3.374,73,3.374,74,3.374,75,2.578,76,2.578,77,2.578,78,1.192,79,2.578,80,2.578,81,0.911,82,3.374,83,3.374,84,3.374,85,0.026,86,0.033,87,0.026]],["title/classes/Cursor.html",[25,0.405,29,0.224]],["body/classes/Cursor.html",[3,0.446,4,0.446,5,0.367,6,0.439,7,0.333,11,0.529,12,1.155,15,0.837,16,0.047,25,0.658,28,0.446,29,0.292,31,0.875,39,1.059,41,1.659,42,0.769,57,3.414,58,0.875,61,1.581,85,0.029,86,0.037,87,0.029,88,2.526,89,2.977,90,2.79,91,2.106,92,4.55,93,5.178,94,5.178,95,2.719,96,3.662,97,4.95,98,1.397,99,1.758,100,4.55,101,1.307,102,1.016,103,1.307,104,4.55,105,3.662,106,2.032,107,3.662,108,3.662,109,2.977,110,3.662,111,3.662,112,3.662,113,3.662,114,3.662,115,3.662,116,3.662]],["title/interfaces/CursorStoreInfo.html",[0,0.118,117,1.022]],["body/interfaces/CursorStoreInfo.html",[0,0.154,2,1.332,3,0.444,4,0.444,5,0.366,6,0.291,7,0.221,11,0.528,12,1.153,15,0.874,16,0.047,17,0.657,24,0.528,25,0.824,28,0.553,29,0.291,31,0.617,33,2.714,36,1.255,39,1.085,42,0.617,46,0.816,52,1.656,58,0.835,63,0.927,85,0.029,86,0.037,87,0.029,98,1.313,117,1.886,118,2.519,119,2.519,120,4.409,121,2.257,122,4.471,123,4.409,124,1.471,125,1.691,126,1.183,127,1.499,128,1.332,129,2.969,130,2.969,131,2.969,132,3.692,133,2.969,134,2.969,135,2.969,136,2.969,137,3.692,138,2.969,139,2.969,140,2.969,141,2.969,142,2.969,143,2.969,144,2.969,145,2.969]],["title/injectables/CursorStoreService.html",[124,0.908,127,1.151]],["body/injectables/CursorStoreService.html",[0,0.137,3,0.397,4,0.397,5,0.326,6,0.428,7,0.324,11,0.471,12,1.073,15,0.869,16,0.047,17,0.611,24,0.471,25,0.811,28,0.514,29,0.26,31,0.793,33,2.803,36,1.305,39,1.061,42,0.793,46,0.728,52,1.809,58,0.793,63,0.828,85,0.026,86,0.034,87,0.026,91,1.957,98,1.425,99,1.706,101,1.425,102,1.108,103,1.425,106,2.037,117,1.874,118,3.697,119,2.249,120,4.179,121,2.162,122,4.282,123,4.179,124,1.369,125,1.51,126,1.056,127,1.735,128,1.71,129,2.651,130,3.436,131,2.651,132,4.282,133,2.651,134,2.651,135,2.651,136,3.436,137,3.436,138,2.651,139,2.651,140,2.651,141,2.651,142,2.651,143,3.436,144,2.651,145,3.436,146,2.249,147,2.215,148,2.526,149,4.227,150,4.227,151,3.261,152,3.261,153,3.261,154,3.261]],["title/interfaces/DataProvider.html",[0,0.118,155,1.298]],["body/interfaces/DataProvider.html",[0,0.148,2,1.279,3,0.59,4,0.427,5,0.351,6,0.428,7,0.325,8,2.485,11,0.507,12,1.124,15,0.907,16,0.047,17,0.64,25,0.829,28,0.427,39,1.086,40,3.054,41,1.279,81,1.542,85,0.028,86,0.036,87,0.028,91,2.05,98,1.232,99,1.703,101,1.51,102,1.174,103,1.51,106,2.158,117,1.859,121,2.238,155,2.05,156,2.851,157,5.098,158,2.9,159,4.429,160,4.853,161,2.9,162,3.507,163,2.814,164,3.507,165,1.786,166,4.429,167,3.507,168,3.507,169,3.507,170,3.507,171,3.507,172,4.429,173,2.544,174,3.507,175,2.096]],["title/directives/MugenScrollBottomDirective.html",[18,0.908,176,1.022]],["body/directives/MugenScrollBottomDirective.html",[3,0.497,4,0.497,5,0.409,6,0.414,7,0.314,8,2.404,9,0.877,11,0.591,15,0.69,16,0.047,17,0.591,18,1.575,19,2.206,24,0.591,26,1.996,28,0.497,29,0.326,31,0.69,42,0.822,58,0.69,85,0.033,86,0.039,87,0.033,95,2.906,99,1.575,101,1.174,102,0.913,103,1.174,176,1.773,177,2.141,178,3.321,179,2.442,180,4.863,181,3.581,182,2.818,183,4.086,184,2.549,185,3.321,186,4.086,187,2.141,188,2.141]],["title/directives/MugenScrollDataDirective.html",[18,0.908,30,0.908]],["body/directives/MugenScrollDataDirective.html",[0,0.111,1,3.214,3,0.32,4,0.32,5,0.263,6,0.433,7,0.328,8,2.511,9,0.917,10,1.814,11,0.38,12,0.929,13,1.366,14,2.66,15,0.888,16,0.048,17,0.529,18,1.185,19,1.08,20,3.419,21,1.378,22,3.696,23,3.696,24,0.38,25,0.691,26,1.502,27,2.974,28,0.32,29,0.21,30,1.185,31,0.875,32,3.419,33,2.514,34,1.757,35,2.204,36,1.314,37,2.204,38,3.419,39,0.821,40,2.901,41,1.334,42,0.618,43,1.917,44,3.419,45,2.138,46,0.817,47,2.138,48,2.138,49,2.138,50,2.138,51,2.105,52,1.887,53,2.138,54,2.505,55,2.505,56,2.138,57,2.901,58,0.768,59,2.974,60,2.974,61,1.421,62,2.138,63,1.314,64,3.696,65,2.974,66,1.185,67,1.693,68,2.974,69,2.974,70,2.974,71,2.974,72,2.974,73,2.974,74,2.974,75,2.138,76,2.974,77,2.138,78,1.051,79,2.138,80,2.974,81,1.208,82,2.974,83,2.974,84,2.974,85,0.021,86,0.029,87,0.021,90,1.917,91,1.693,95,2.186,99,1.742,101,1.306,102,1.016,103,1.306,106,1.866,109,2.138,177,1.378,179,1.572,189,3.658,190,3.658,191,3.658,192,2.63,193,3.658,194,2.63,195,2.63,196,2.63,197,2.63,198,2.63,199,2.63,200,2.63,201,2.63,202,1.217,203,2.63,204,2.63]],["title/directives/MugenScrollTopDirective.html",[18,0.908,205,1.022]],["body/directives/MugenScrollTopDirective.html",[3,0.497,4,0.497,5,0.409,6,0.414,7,0.314,8,2.404,9,0.877,11,0.591,15,0.69,16,0.047,17,0.591,18,1.575,19,2.206,24,0.591,26,1.996,28,0.497,29,0.326,31,0.69,42,0.822,58,0.69,85,0.033,86,0.039,87,0.033,95,2.906,99,1.575,101,1.174,102,0.913,103,1.174,177,2.141,179,2.442,181,3.581,182,2.818,184,2.549,185,3.321,187,2.141,188,2.141,205,1.773,206,3.321,207,3.953,208,4.086,209,4.086]],["title/components/NgxMugenScrollComponent.html",[210,1.298,211,1.151]],["body/components/NgxMugenScrollComponent.html",[0,0.113,3,0.21,4,0.21,5,0.172,6,0.432,7,0.347,9,0.749,11,0.249,12,0.68,13,0.437,14,1.721,15,0.871,16,0.048,17,0.614,18,0.558,19,1.52,21,2.401,24,0.249,25,0.387,26,1.743,28,0.4,29,0.137,30,1.199,31,0.813,34,1.709,35,1.721,36,1.455,37,1.721,39,0.522,42,0.452,43,1.403,46,1.179,51,0.797,52,1.754,54,0.903,55,0.903,58,0.813,61,0.495,63,1.078,66,1.299,78,0.769,81,1.316,85,0.014,86,0.022,87,0.014,90,1.403,91,1.239,98,0.68,99,1.748,101,0.769,102,0.896,103,0.769,106,1.881,117,0.976,126,0.558,127,1.819,148,1.029,155,1.52,158,2.213,161,2.213,165,1.375,175,1.029,176,1.35,177,0.903,179,1.029,181,1.846,182,1.188,184,1.721,187,0.903,188,1.941,205,1.35,207,1.4,210,1.52,211,1.52,212,2.677,213,1.722,214,1.722,215,2.841,216,1.029,217,1.099,218,2.265,219,2.265,220,1.962,221,1.197,222,2.265,223,2.265,224,2.928,225,2.265,226,1.932,227,2.213,228,2.554,229,2.554,230,2.554,231,3.284,232,2.677,233,2.677,234,2.265,235,2.265,236,2.265,237,2.265,238,2.265,239,2.265,240,2.265,241,2.677,242,2.677,243,1.722,244,1.722,245,1.722,246,1.722,247,1.722,248,1.722,249,1.722,250,3.056,251,1.722,252,1.722,253,1.722,254,1.722,255,1.722,256,1.722,257,1.722,258,1.722,259,1.722,260,1.846,261,1.722,262,3.284,263,1.846,264,1.722,265,1.846,266,1.722,267,1.846,268,1.722,269,1.188,270,2.265,271,1.029,272,1.029,273,1.029,274,0.903,275,0.903,276,1.188,277,1.188,278,1.846,279,1.646,280,2.554,281,1.188,282,1.846,283,1.846,284,1.846,285,1.188,286,1.188,287,1.099,288,2.265,289,1.846,290,2.093,291,1.846,292,3.639,293,3.639,294,1.846,295,1.846,296,3.056,297,2.928,298,2.766,299,2.554,300,1.188,301,1.188,302,1.188,303,1.188,304,2.265,305,1.188,306,1.188,307,1.188,308,1.846,309,1.188,310,1.846,311,1.188,312,1.188,313,1.188,314,1.188,315,1.188,316,1.188,317,1.188,318,1.188,319,1.188,320,1.188,321,1.188,322,1.188,323,1.188,324,2.265,325,1.188,326,1.188,327,1.188,328,1.188,329,1.188,330,1.188,331,2.554,332,1.188,333,1.846,334,1.188,335,1.188,336,1.188,337,1.846,338,1.846,339,1.188,340,1.099,341,1.188,342,1.188,343,1.188,344,1.188,345,1.188,346,1.188,347,1.188,348,1.188,349,1.188,350,1.188,351,2.677,352,3.703,353,1.722,354,1.722,355,1.722,356,1.722]],["title/modules/NgxMugenScrollModule.html",[357,1.933,358,1.675]],["body/modules/NgxMugenScrollModule.html",[3,0.447,4,0.447,5,0.368,6,0.293,7,0.329,9,0.838,16,0.047,17,0.771,24,0.532,28,0.447,29,0.293,30,1.848,85,0.03,86,0.037,87,0.03,176,2.08,205,2.08,211,2.342,215,1.927,221,1.341,271,2.198,272,2.198,273,2.198,350,2.536,357,2.536,358,3.452,359,2.536,360,2.198,361,4.031,362,2.989,363,2.989,364,4.031,365,2.989,366,2.989,367,2.989,368,3.708,369,2.989,370,2.989,371,3.678,372,4.562,373,3.678,374,3.678]],["title/classes/NotFoundResourceError.html",[29,0.224,375,1.298]],["body/classes/NotFoundResourceError.html",[0,0.111,3,0.206,4,0.206,5,0.169,6,0.292,7,0.241,9,0.286,11,0.636,12,0.67,13,1.238,15,0.549,16,0.048,17,0.382,24,0.245,25,0.658,28,0.446,29,0.211,31,0.672,34,1.051,36,0.824,39,0.859,41,0.617,42,0.446,46,1.089,58,0.889,61,1.4,63,1.421,66,0.855,67,1.841,78,0.932,81,1.053,85,0.026,86,0.021,87,0.014,88,1.167,98,1.409,99,1.051,101,0.486,102,0.941,103,0.486,121,1.807,124,0.855,125,0.783,126,0.548,128,1.806,147,0.887,163,2.209,165,1.626,173,1.701,202,1.222,217,1.084,221,0.617,226,2.033,279,1.084,287,1.333,290,1.333,340,1.73,375,1.222,376,1.698,377,0.783,378,1.578,379,2.192,380,2.631,381,1.692,382,2.64,383,1.692,384,1.011,385,1.011,386,1.011,387,0.783,388,1.922,389,1.578,390,1.222,391,1.011,392,1.222,393,1.011,394,1.011,395,2.631,396,2.519,397,1.011,398,1.011,399,1.011,400,1.011,401,1.011,402,1.011,403,1.011,404,2.192,405,1.578,406,1.011,407,1.94,408,1.94,409,1.578,410,1.94,411,1.011,412,1.011,413,1.011,414,1.011,415,1.011,416,2.377,417,1.011,418,1.011,419,1.011,420,2.519,421,2.86,422,1.011,423,1.011,424,1.011,425,1.011,426,3.164,427,3.164,428,2.377,429,1.94,430,2.519,431,1.011,432,1.578,433,1.011,434,1.011,435,1.011,436,1.011,437,1.011,438,1.578,439,2.631,440,1.011,441,1.011,442,1.011,443,2.631,444,2.797,445,2.307,446,2.775,447,2.192,448,1.011,449,1.011,450,1.011,451,1.578,452,1.578,453,1.578,454,1.578,455,1.94,456,1.94,457,2.192,458,2.377,459,1.578,460,1.011,461,2.377,462,1.011,463,2.377,464,1.011,465,1.011,466,1.578,467,1.011,468,1.011,469,1.011,470,1.011,471,1.011,472,1.011,473,1.011,474,1.011,475,1.011,476,1.011,477,1.011,478,1.011,479,2.377,480,2.192,481,2.631,482,1.011,483,1.578,484,2.192,485,1.578,486,1.578,487,2.377,488,1.011,489,1.011,490,1.94,491,1.011,492,2.519,493,1.011,494,1.011,495,1.011,496,1.011,497,1.011,498,1.011,499,1.578,500,1.578,501,1.011,502,1.011,503,1.011,504,1.94,505,1.011,506,1.011,507,1.011,508,1.011,509,1.011,510,1.011,511,1.011,512,1.011,513,1.011,514,1.011,515,1.011,516,1.011,517,1.011,518,1.011,519,0.783,520,0.887,521,1.011,522,1.011,523,1.011,524,1.011,525,1.011,526,1.011,527,1.011,528,1.011,529,1.011,530,1.011,531,1.383,532,1.011,533,0.887,534,1.011,535,1.011,536,1.011]],["title/injectables/OrderedDataStoreIdxService.html",[124,0.908,392,1.298]],["body/injectables/OrderedDataStoreIdxService.html",[0,0.089,3,0.157,4,0.157,5,0.129,6,0.394,7,0.302,9,0.218,11,0.677,12,0.538,13,1.323,15,0.858,16,0.048,17,0.307,24,0.186,25,0.706,28,0.381,29,0.169,31,0.816,34,0.876,36,0.796,39,0.991,41,0.773,42,0.457,46,1.006,51,0.981,52,0.773,58,0.843,61,1.419,63,1.38,66,0.687,67,1.604,78,0.776,81,1.183,85,0.022,86,0.017,87,0.01,91,0.981,98,1.44,99,1.583,101,1.419,102,1.046,103,1.262,106,1.888,121,1.923,124,0.687,125,0.596,126,0.417,128,1.928,146,0.888,147,1.417,163,2.303,165,1.688,173,2.303,202,1.451,217,0.528,221,0.469,226,2.225,227,1.267,279,1.286,287,1.752,290,1.11,340,1.53,375,0.596,376,2.287,377,0.596,378,0.769,379,0.769,380,2.071,384,0.769,385,0.769,386,0.769,387,0.596,388,1.643,389,1.267,390,1.451,391,0.769,392,1.604,393,1.615,394,1.267,395,2.53,396,2.461,397,1.615,398,0.769,399,0.769,400,0.769,401,1.615,402,1.615,403,1.267,404,2.461,405,1.873,406,0.769,407,1.615,408,1.615,409,1.267,410,1.615,411,0.769,412,0.769,413,0.769,414,0.769,415,1.873,416,2.071,417,0.769,418,1.267,419,1.615,420,2.228,421,2.626,422,0.769,423,0.769,424,1.267,425,0.769,426,3.009,427,3.009,428,2.071,429,1.615,430,2.228,431,0.769,432,1.267,433,0.769,434,0.769,435,0.769,436,0.769,437,0.769,438,1.267,439,2.356,440,0.769,441,1.267,442,1.615,443,2.356,444,2.55,445,2.066,446,2.771,447,1.873,448,0.769,449,0.769,450,1.615,451,2.228,452,2.228,453,2.228,454,2.228,455,2.55,456,1.615,457,1.873,458,2.692,459,1.267,460,0.769,461,2.071,462,0.769,463,2.071,464,0.769,465,0.769,466,1.267,467,0.769,468,0.769,469,0.769,470,0.769,471,0.769,472,0.769,473,0.769,474,1.267,475,0.769,476,1.873,477,0.769,478,0.769,479,2.692,480,2.461,481,2.55,482,0.769,483,1.267,484,1.873,485,1.267,486,1.267,487,2.55,488,1.615,489,0.769,490,2.356,491,1.615,492,2.626,493,0.769,494,0.769,495,0.769,496,0.769,497,0.769,498,0.769,499,1.267,500,1.267,501,0.769,502,0.769,503,0.769,504,1.615,505,0.769,506,0.769,507,0.769,508,1.615,509,1.615,510,0.769,511,0.769,512,0.769,513,0.769,514,0.769,515,0.769,516,0.769,517,0.769,518,0.769,519,0.596,520,0.675,521,0.769,522,0.769,523,0.769,524,0.769,525,0.769,526,0.769,527,0.769,528,0.769,529,0.769,530,0.769,531,1.111,532,0.769,533,0.675,534,0.769,535,0.769,536,0.769,537,2.12,538,2.12,539,2.12,540,1.287,541,1.287,542,1.287,543,1.287,544,1.287,545,3.134,546,3.134,547,1.287,548,1.287,549,1.287,550,1.287,551,1.287,552,1.287,553,1.287,554,1.287,555,1.287,556,1.287,557,1.287,558,1.287,559,1.287,560,1.287,561,1.287,562,1.287,563,1.287]],["title/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.118,387,1.298]],["body/interfaces/OrderedDataStoreIdxServiceIndex.html",[0,0.112,2,0.626,3,0.209,4,0.209,5,0.172,6,0.137,7,0.161,9,0.29,11,0.64,12,0.678,13,1.162,15,0.554,16,0.048,17,0.386,24,0.248,25,0.661,28,0.45,29,0.213,31,0.677,34,0.556,36,0.832,39,0.864,41,0.626,42,0.29,46,1.093,58,0.891,61,1.447,63,1.423,66,0.864,67,1.853,78,0.941,81,1.218,85,0.026,86,0.021,87,0.014,98,1.411,102,0.947,121,1.816,124,0.864,125,0.794,126,0.556,128,1.714,147,0.899,163,2.222,165,1.631,173,1.717,202,1.235,217,0.704,221,0.626,226,2.04,279,1.096,287,1.345,290,1.345,340,1.74,375,0.794,376,0.794,377,0.794,378,1.025,379,1.025,380,2.393,384,1.025,385,1.025,386,1.025,387,1.235,388,2.319,389,2.393,390,1.235,391,1.025,392,1.235,393,1.025,394,1.025,395,2.64,396,2.533,397,1.025,398,1.025,399,1.025,400,1.025,401,1.025,402,1.025,403,1.025,404,2.209,405,1.595,406,1.025,407,1.958,408,1.958,409,1.595,410,1.958,411,1.025,412,1.025,413,1.025,414,1.025,415,1.025,416,2.393,417,1.025,418,1.025,419,1.025,420,2.533,421,2.871,422,1.025,423,1.025,424,1.025,425,1.025,426,3.172,427,3.172,428,2.393,429,1.958,430,2.533,431,1.025,432,1.595,433,1.025,434,1.025,435,1.025,436,1.025,437,1.025,438,1.595,439,2.644,440,1.025,441,1.025,442,1.025,443,2.644,444,2.809,445,2.319,446,2.782,447,2.209,448,1.025,449,1.025,450,1.025,451,1.595,452,1.595,453,1.595,454,1.595,455,1.958,456,1.958,457,2.209,458,2.393,459,1.595,460,1.025,461,2.393,462,1.025,463,2.393,464,1.025,465,1.025,466,1.595,467,1.025,468,1.025,469,1.025,470,1.025,471,1.025,472,1.025,473,1.025,474,1.025,475,1.025,476,1.025,477,1.025,478,1.025,479,2.393,480,2.209,481,2.644,482,1.025,483,1.595,484,2.209,485,1.595,486,1.595,487,2.393,488,1.025,489,1.025,490,1.958,491,1.025,492,2.533,493,1.025,494,1.025,495,1.025,496,1.025,497,1.025,498,1.025,499,1.595,500,1.595,501,1.025,502,1.025,503,1.025,504,1.958,505,1.025,506,1.025,507,1.025,508,1.025,509,1.025,510,1.025,511,1.025,512,1.025,513,1.025,514,1.025,515,1.025,516,1.025,517,1.025,518,1.025,519,0.794,520,0.899,521,1.025,522,1.025,523,1.025,524,1.025,525,1.025,526,1.025,527,1.025,528,1.025,529,1.025,530,1.025,531,1.399,532,1.025,533,0.899,534,1.025,535,1.025,536,1.025]],["title/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.118,390,1.298]],["body/interfaces/OrderedDataStoreIdxServiceStore.html",[0,0.112,2,0.626,3,0.209,4,0.209,5,0.172,6,0.137,7,0.161,9,0.29,11,0.64,12,0.678,13,1.162,15,0.554,16,0.048,17,0.386,24,0.248,25,0.661,28,0.45,29,0.213,31,0.677,34,0.556,36,0.832,39,0.864,41,0.626,42,0.29,46,1.093,58,0.891,61,1.479,63,1.423,66,0.864,67,1.853,78,0.941,81,1.061,85,0.026,86,0.021,87,0.014,98,1.411,102,0.947,121,1.816,124,0.864,125,0.794,126,0.556,128,1.714,147,0.899,163,2.222,165,1.631,173,1.717,202,1.235,217,0.704,221,0.626,226,2.04,279,1.096,287,1.345,290,1.345,340,1.74,375,0.794,376,0.794,377,0.794,378,1.025,379,1.025,380,2.393,384,1.025,385,1.025,386,1.025,387,0.794,388,2.319,389,1.595,390,1.516,391,2.209,392,1.235,393,1.025,394,1.025,395,2.64,396,2.533,397,1.025,398,1.025,399,1.025,400,1.025,401,1.025,402,1.025,403,1.025,404,2.209,405,1.595,406,1.025,407,1.958,408,1.958,409,1.595,410,1.958,411,1.025,412,1.025,413,1.025,414,1.025,415,1.025,416,2.393,417,1.025,418,1.025,419,1.025,420,2.533,421,2.871,422,1.025,423,1.025,424,1.025,425,1.025,426,3.172,427,3.172,428,2.393,429,1.958,430,2.533,431,1.025,432,1.595,433,1.025,434,1.025,435,1.025,436,1.025,437,1.025,438,1.595,439,2.644,440,1.025,441,1.025,442,1.025,443,2.644,444,2.809,445,2.319,446,2.782,447,2.209,448,1.025,449,1.025,450,1.025,451,1.595,452,1.595,453,1.595,454,1.595,455,1.958,456,1.958,457,2.209,458,2.393,459,1.595,460,1.025,461,2.393,462,1.025,463,2.393,464,1.025,465,1.025,466,1.595,467,1.025,468,1.025,469,1.025,470,1.025,471,1.025,472,1.025,473,1.025,474,1.025,475,1.025,476,1.025,477,1.025,478,1.025,479,2.393,480,2.209,481,2.644,482,1.025,483,1.595,484,2.209,485,1.595,486,1.595,487,2.393,488,1.025,489,1.025,490,1.958,491,1.025,492,2.533,493,1.025,494,1.025,495,1.025,496,1.025,497,1.025,498,1.025,499,1.595,500,1.595,501,1.025,502,1.025,503,1.025,504,1.958,505,1.025,506,1.025,507,1.025,508,1.025,509,1.025,510,1.025,511,1.025,512,1.025,513,1.025,514,1.025,515,1.025,516,1.025,517,1.025,518,1.025,519,0.794,520,0.899,521,1.025,522,1.025,523,1.025,524,1.025,525,1.025,526,1.025,527,1.025,528,1.025,529,1.025,530,1.025,531,1.399,532,1.025,533,0.899,534,1.025,535,1.025,536,1.025]],["title/interfaces/ScrollBottomEvent.html",[0,0.118,274,1.469]],["body/interfaces/ScrollBottomEvent.html",[0,0.138,2,0.822,3,0.274,4,0.274,5,0.226,6,0.18,7,0.293,9,0.761,13,0.572,14,1.181,16,0.048,17,0.68,19,1.346,21,2.606,24,0.326,25,0.474,26,0.925,28,0.47,29,0.18,30,1.062,31,0.717,34,1.708,35,1.181,36,1.473,37,1.181,39,0.44,42,0.381,43,1.181,46,1.228,51,1.043,52,1.643,54,1.181,55,1.181,58,0.87,61,0.647,63,1.194,66,1.459,78,0.942,81,1.218,85,0.018,86,0.026,87,0.018,90,1.718,98,0.572,117,1.195,126,0.73,127,1.586,148,1.347,155,1.517,158,1.347,161,1.347,165,1.251,175,1.347,176,1.195,184,1.718,187,1.181,188,2.223,205,1.195,210,1.517,211,0.925,215,1.181,216,1.347,217,0.925,218,2.261,219,2.261,220,1.347,221,0.822,222,1.555,223,1.555,224,2.664,225,1.555,226,1.586,227,1.347,228,1.555,229,1.555,230,1.555,234,1.555,235,1.555,236,1.555,237,1.555,238,1.555,239,1.555,240,1.555,250,3.108,260,1.555,263,1.555,265,1.555,267,1.555,269,1.555,270,2.664,271,1.347,272,1.347,273,1.347,274,1.718,275,1.181,276,1.555,277,1.555,278,2.261,279,1.85,280,2.925,281,1.555,282,2.261,283,2.261,284,2.261,285,1.555,286,1.555,287,1.346,288,2.664,289,2.261,290,2.203,291,2.261,292,3.791,293,3.791,294,2.261,295,2.261,296,3.346,297,3.243,298,3.108,299,2.925,300,1.555,301,1.555,302,1.555,303,1.555,304,2.664,305,1.555,306,1.555,307,1.555,308,2.261,309,1.555,310,2.261,311,1.555,312,1.555,313,1.555,314,1.555,315,1.555,316,1.555,317,1.555,318,1.555,319,1.555,320,1.555,321,1.555,322,1.555,323,1.555,324,2.664,325,1.555,326,1.555,327,1.555,328,1.555,329,1.555,330,1.555,331,2.925,332,1.555,333,2.261,334,1.555,335,1.555,336,1.555,337,2.261,338,2.261,339,1.555,340,1.346,341,1.555,342,1.555,343,1.555,344,1.555,345,1.555,346,1.555,347,1.555,348,1.555,349,1.555]],["title/interfaces/ScrollTopEvent.html",[0,0.118,275,1.469]],["body/interfaces/ScrollTopEvent.html",[0,0.138,2,0.822,3,0.274,4,0.274,5,0.226,6,0.18,7,0.293,9,0.761,13,0.572,14,1.181,16,0.048,17,0.68,19,1.346,21,2.606,24,0.326,25,0.474,26,0.925,28,0.47,29,0.18,30,1.062,31,0.717,34,1.708,35,1.181,36,1.473,37,1.181,39,0.44,42,0.381,43,1.181,46,1.228,51,1.043,52,1.643,54,1.181,55,1.181,58,0.87,61,0.647,63,1.194,66,1.459,78,0.942,81,1.218,85,0.018,86,0.026,87,0.018,90,1.718,98,0.572,117,1.195,126,0.73,127,1.586,148,1.347,155,1.517,158,1.347,161,1.347,165,1.251,175,1.347,176,1.195,184,1.718,187,1.181,188,2.223,205,1.195,210,1.517,211,0.925,215,1.181,216,1.347,217,0.925,218,2.261,219,2.261,220,1.347,221,0.822,222,1.555,223,1.555,224,2.664,225,1.555,226,1.586,227,1.347,228,1.555,229,1.555,230,1.555,234,1.555,235,1.555,236,1.555,237,1.555,238,1.555,239,1.555,240,1.555,250,3.108,260,1.555,263,1.555,265,1.555,267,1.555,269,1.555,270,2.664,271,1.347,272,1.347,273,1.347,274,1.181,275,1.718,276,1.555,277,1.555,278,2.261,279,1.85,280,2.925,281,1.555,282,2.261,283,2.261,284,2.261,285,1.555,286,1.555,287,1.346,288,2.664,289,2.261,290,2.203,291,2.261,292,3.791,293,3.791,294,2.261,295,2.261,296,3.346,297,3.243,298,3.108,299,2.925,300,1.555,301,1.555,302,1.555,303,1.555,304,2.664,305,1.555,306,1.555,307,1.555,308,2.261,309,1.555,310,2.261,311,1.555,312,1.555,313,1.555,314,1.555,315,1.555,316,1.555,317,1.555,318,1.555,319,1.555,320,1.555,321,1.555,322,1.555,323,1.555,324,2.664,325,1.555,326,1.555,327,1.555,328,1.555,329,1.555,330,1.555,331,2.925,332,1.555,333,2.261,334,1.555,335,1.555,336,1.555,337,2.261,338,2.261,339,1.555,340,1.346,341,1.555,342,1.555,343,1.555,344,1.555,345,1.555,346,1.555,347,1.555,348,1.555,349,1.555]],["title/coverage.html",[564,3.107]],["body/coverage.html",[0,0.229,1,2.085,5,0.349,6,0.459,7,0.351,8,2.43,9,0.86,10,3.044,13,1.361,15,0.59,16,0.047,18,1.568,25,0.504,29,0.352,30,1.13,46,0.779,78,1.655,85,0.028,86,0.036,87,0.028,89,2.836,117,1.272,118,3.044,119,3.044,124,1.43,127,1.432,128,1.955,155,1.615,156,2.836,176,1.272,178,2.836,202,2.043,205,1.272,206,2.836,210,1.615,211,1.432,215,2.537,216,2.893,274,1.828,275,1.828,375,1.615,376,2.482,377,2.482,387,1.615,390,1.615,392,1.615,519,1.615,564,2.836,565,3.489,566,3.489,567,3.489,568,4.414,569,3.489,570,3.489,571,4.842,572,3.489,573,3.489,574,5.088,575,4.842,576,3.489,577,2.836,578,3.489,579,3.489]],["title/dependencies.html",[360,2.014,580,2.343]],["body/dependencies.html",[16,0.047,24,0.621,85,0.035,86,0.04,87,0.035,360,2.568,581,4.298,582,5.722,583,4.298,584,4.298,585,4.298,586,5.01,587,4.073,588,4.298,589,4.298,590,4.298,591,4.298,592,4.298,593,4.298,594,4.298,595,4.298]],["title/miscellaneous/functions.html",[596,1.904,597,2.74]],["body/miscellaneous/functions.html",[6,0.336,7,0.255,11,0.608,13,1.335,16,0.045,85,0.034,86,0.04,87,0.034,101,1.422,102,1.106,103,1.422,106,2.032,128,1.917,165,1.363,376,1.948,377,2.434,388,2.594,395,2.594,445,2.206,446,2.844,519,2.291,520,2.594,531,2.594,533,2.206,577,4.023,596,3.422,597,3.422,598,4.95,599,4.209,600,4.209]],["title/index.html",[11,0.339,601,2.343,602,2.343]],["body/index.html",[7,0.256,9,0.84,16,0.044,85,0.034,86,0.04,87,0.034,220,2.531,603,4.236,604,4.236,605,5.272,606,4.236,607,4.236,608,4.236,609,4.236,610,5.615,611,4.236,612,4.236,613,4.968,614,4.968,615,5.272,616,4.968,617,5.438,618,4.968,619,4.236,620,4.236,621,4.236,622,4.236,623,4.236,624,4.236,625,4.236,626,4.236]],["title/modules.html",[359,2.636]],["body/modules.html",[16,0.042,85,0.036,86,0.042,87,0.036,358,2.704,359,3.121,587,3.679,627,4.525,628,4.525,629,4.525]],["title/overview.html",[630,3.107]],["body/overview.html",[2,1.472,16,0.046,30,1.818,85,0.032,86,0.039,87,0.032,88,2.783,146,2.783,176,2.047,177,2.115,205,2.047,210,1.868,211,2.305,350,2.783,357,3.329,358,3.468,360,2.412,361,3.281,362,3.281,363,3.281,364,3.281,365,3.281,366,3.281,367,3.281,368,3.924,369,3.281,370,3.281,630,3.281,631,4.828,632,4.036,633,4.828,634,4.036]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":78,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["0.10.2",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["0px",{"_index":317,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["1",{"_index":631,"title":{},"body":{"overview.html":{}}}],["1.0",{"_index":319,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["100",{"_index":48,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["11.0.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":633,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":632,"title":{},"body":{"overview.html":{}}}],["50",{"_index":281,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["6.6.0",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":634,"title":{},"body":{"overview.html":{}}}],["accessors",{"_index":95,"title":{},"body":{"classes/Cursor.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["actual_component",{"_index":356,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["add",{"_index":537,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["add(storename",{"_index":441,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["afterviewinit",{"_index":219,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["angular",{"_index":606,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":619,"title":{},"body":{"index.html":{}}}],["any).result",{"_index":429,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["application",{"_index":614,"title":{},"body":{"index.html":{}}}],["args",{"_index":442,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["args.foreach((arg",{"_index":448,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arrange",{"_index":189,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["arrange(deleteattop",{"_index":80,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["array",{"_index":61,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["array).foreach((v",{"_index":515,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybuffer",{"_index":453,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["arraybufferview",{"_index":452,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["async",{"_index":226,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["attached",{"_index":73,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["autofetchingbottom",{"_index":234,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autofetchingtop",{"_index":235,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["autoloadscrollposition",{"_index":236,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["await",{"_index":340,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["base",{"_index":403,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.add",{"_index":414,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["base.get",{"_index":406,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["boolean",{"_index":81,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bootstrap",{"_index":362,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["bottom",{"_index":35,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom.directive",{"_index":272,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["bottom.directive.ts",{"_index":178,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"coverage.html":{}}}],["bottom.directive.ts:12",{"_index":186,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{}}}],["bottom.directive.ts:6",{"_index":183,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{}}}],["bottomcursor",{"_index":120,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomcursor.tostring",{"_index":133,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["bottomdirective",{"_index":222,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["browse",{"_index":629,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":587,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["build",{"_index":618,"title":{},"body":{"index.html":{}}}],["cb",{"_index":509,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cb(v",{"_index":516,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cd",{"_index":624,"title":{},"body":{"index.html":{}}}],["class",{"_index":29,"title":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["classes",{"_index":88,"title":{},"body":{"classes/Cursor.html":{},"classes/NotFoundResourceError.html":{},"overview.html":{}}}],["clear",{"_index":51,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["clear(storename",{"_index":474,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["clearall",{"_index":476,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cluster_ngxmugenscrollmodule",{"_index":365,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["cluster_ngxmugenscrollmodule_declarations",{"_index":367,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["cluster_ngxmugenscrollmodule_exports",{"_index":366,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["component",{"_index":210,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"overview.html":{}}}],["component_template",{"_index":353,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["components",{"_index":212,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["console.error('mugenscrolldatadirective",{"_index":330,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.bottom",{"_index":334,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('mugenscrolldatadirective.top",{"_index":332,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error('provider",{"_index":329,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["console.error(ev",{"_index":438,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`fetch",{"_index":408,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`filter",{"_index":510,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`from",{"_index":495,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["console.log(`load",{"_index":138,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["console.log(`save",{"_index":131,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["const",{"_index":63,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["constructor(datas",{"_index":96,"title":{},"body":{"classes/Cursor.html":{}}}],["constructor(el",{"_index":182,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["constructor(message",{"_index":381,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["constructor(public",{"_index":384,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["constructor(template",{"_index":192,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["content",{"_index":293,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild",{"_index":269,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrollbottomdirective",{"_index":263,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolldatadirective",{"_index":265,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["contentchild(mugenscrolltopdirective",{"_index":267,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["countperload",{"_index":237,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["coverage",{"_index":564,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["ctx",{"_index":1,"title":{"interfaces/Ctx.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"coverage.html":{}}}],["ctx.data",{"_index":84,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["current",{"_index":287,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["current.getitems",{"_index":484,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["current.tostring",{"_index":494,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursor",{"_index":25,"title":{"classes/Cursor.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["cursor([v.tostring",{"_index":50,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["cursor.continue",{"_index":507,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["cursorstoreinfo",{"_index":117,"title":{"interfaces/CursorStoreInfo.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["cursorstoreinfo.scrolltop",{"_index":326,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["cursorstoreservice",{"_index":127,"title":{"injectables/CursorStoreService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["data",{"_index":13,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["data.directive",{"_index":273,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["data.directive.ts",{"_index":10,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"coverage.html":{}}}],["data.directive.ts:13",{"_index":200,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:14",{"_index":199,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:15",{"_index":203,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:17",{"_index":201,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:18",{"_index":193,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:29",{"_index":196,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:36",{"_index":204,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:40",{"_index":197,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:59",{"_index":198,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["data.directive.ts:78",{"_index":194,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["datadirective",{"_index":223,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["dataprovider",{"_index":155,"title":{"interfaces/DataProvider.html":{}},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["datas",{"_index":90,"title":{},"body":{"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["datas.foreach(data",{"_index":62,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datas.map(v",{"_index":112,"title":{},"body":{"classes/Cursor.html":{}}}],["datas.reverse().foreach(data",{"_index":77,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["datasmap",{"_index":32,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["date",{"_index":451,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db",{"_index":395,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["db.createobjectstore",{"_index":522,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames",{"_index":478,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.objectstorenames.contains(storename",{"_index":521,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["db.transaction(storename",{"_index":534,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["dbname",{"_index":397,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["declarations",{"_index":361,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["decorators",{"_index":262,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["default",{"_index":545,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["defined",{"_index":99,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["delete",{"_index":147,"title":{},"body":{"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["delete(p",{"_index":143,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["delete(storename",{"_index":543,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["deleteattop",{"_index":195,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["delimiter",{"_index":97,"title":{},"body":{"classes/Cursor.html":{}}}],["demo",{"_index":613,"title":{},"body":{"index.html":{}}}],["demo1unit",{"_index":621,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":360,"title":{"dependencies.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depends",{"_index":608,"title":{},"body":{"index.html":{}}}],["develop",{"_index":609,"title":{},"body":{"index.html":{}}}],["development",{"_index":607,"title":{},"body":{"index.html":{}}}],["direction",{"_index":492,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["directive",{"_index":18,"title":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"coverage.html":{}}}],["directives",{"_index":177,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"overview.html":{}}}],["dist",{"_index":623,"title":{},"body":{"index.html":{}}}],["dist/ngx",{"_index":625,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":213,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["dynamic",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["el",{"_index":184,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["element",{"_index":181,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["elementref",{"_index":19,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["embeddedviewref",{"_index":20,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["end",{"_index":480,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["end.getitems",{"_index":485,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["entities",{"_index":306,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entities.foreach(entity",{"_index":307,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.isintersecting",{"_index":310,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["entity.target",{"_index":308,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["eof",{"_index":503,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error",{"_index":378,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('db",{"_index":417,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["error('mugenscrollbottomdirective",{"_index":291,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolldatadirective",{"_index":297,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('mugenscrolltopdirective",{"_index":295,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error('provider",{"_index":299,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["error(`cannot",{"_index":535,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev",{"_index":426,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ev.target",{"_index":428,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["event",{"_index":427,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["eventemitter",{"_index":250,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["export",{"_index":28,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["exports",{"_index":364,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["false",{"_index":279,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetch",{"_index":402,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fetch(base",{"_index":547,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["fetchbottom",{"_index":158,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchbottom(cursor",{"_index":162,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetcher",{"_index":405,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["fetchoninit",{"_index":159,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchoninit(n",{"_index":166,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload",{"_index":160,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchonload(info",{"_index":168,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["fetchtop",{"_index":161,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["fetchtop(cursor",{"_index":170,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["filter",{"_index":508,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["filter(storename",{"_index":549,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["find",{"_index":412,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["function",{"_index":202,"title":{},"body":{"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{}}}],["functions",{"_index":597,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(p",{"_index":145,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["get(storename",{"_index":552,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getelement",{"_index":185,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{}}}],["getitem",{"_index":92,"title":{},"body":{"classes/Cursor.html":{}}}],["getitem(i",{"_index":104,"title":{},"body":{"classes/Cursor.html":{}}}],["getitems",{"_index":93,"title":{},"body":{"classes/Cursor.html":{}}}],["getlargern",{"_index":538,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlargern(storename",{"_index":554,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getlength",{"_index":109,"title":{},"body":{"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{}}}],["getsmallern",{"_index":488,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["getsmallern(storename",{"_index":556,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["getting",{"_index":601,"title":{"index.html":{}},"body":{}}],["html",{"_index":351,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["htmlelement",{"_index":187,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scroll(0",{"_index":325,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["htmlelement).scrolltop",{"_index":339,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["i.bottomcursor.tostring",{"_index":139,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.n",{"_index":141,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.scrolltop",{"_index":142,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["i.topcursor.tostring",{"_index":140,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["idbarraykey",{"_index":454,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbcursorwithvalue",{"_index":502,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbdatabase",{"_index":396,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbfactory",{"_index":394,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange",{"_index":455,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.bound",{"_index":483,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.lowerbound(current.getitems",{"_index":482,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbkeyrange.upperbound(current.getitems",{"_index":489,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbrequest",{"_index":513,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idbtransaction",{"_index":533,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["identifier",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":457,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.get(query",{"_index":460,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.getkey(key",{"_index":467,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["idx.service.ts",{"_index":377,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["idx.service.ts:105",{"_index":540,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:113",{"_index":553,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:138",{"_index":544,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:171",{"_index":541,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:186",{"_index":542,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:198",{"_index":555,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:225",{"_index":557,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:252",{"_index":560,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:29",{"_index":563,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:293",{"_index":551,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:30",{"_index":562,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:31",{"_index":539,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:39",{"_index":548,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:6",{"_index":382,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:67",{"_index":561,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["idx.service.ts:7",{"_index":383,"title":{},"body":{"classes/NotFoundResourceError.html":{}}}],["idx.service.ts:75",{"_index":558,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["implements",{"_index":217,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["import",{"_index":17,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["imports",{"_index":374,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["includeequal",{"_index":163,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indecies",{"_index":520,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indecies.foreach(v",{"_index":523,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["indexed",{"_index":410,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexeddb",{"_index":393,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indexname",{"_index":479,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["indices",{"_index":391,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["inifinit",{"_index":604,"title":{},"body":{"index.html":{}}}],["init",{"_index":227,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["init(version",{"_index":418,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["initstore",{"_index":519,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["initstore(db",{"_index":599,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectable",{"_index":124,"title":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{}},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{}}}],["injectables",{"_index":146,"title":{},"body":{"injectables/CursorStoreService.html":{},"injectables/OrderedDataStoreIdxService.html":{},"overview.html":{}}}],["input",{"_index":21,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["inputs",{"_index":233,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["installrun",{"_index":611,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"interfaces/DataProvider.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"overview.html":{}}}],["intersectionobserver",{"_index":224,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["iter",{"_index":491,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["iter(storename",{"_index":559,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["key",{"_index":404,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2",{"_index":466,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onerror",{"_index":473,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["key2.onsuccess",{"_index":468,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["keypath",{"_index":388,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["legend",{"_index":350,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["length",{"_index":57,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"directives/MugenScrollDataDirective.html":{}}}],["lib",{"_index":220,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"index.html":{}}}],["libmugenscrollbottom",{"_index":180,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{}}}],["libmugenscrollbottom]'},{'name",{"_index":354,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolldata",{"_index":27,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["libmugenscrolldata]'},{'name",{"_index":355,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["libmugenscrolltop",{"_index":207,"title":{},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["libpublish",{"_index":622,"title":{},"body":{"index.html":{}}}],["library",{"_index":605,"title":{},"body":{"index.html":{}}}],["load",{"_index":148,"title":{},"body":{"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["load(p",{"_index":136,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["local",{"_index":612,"title":{},"body":{"index.html":{}}}],["map",{"_index":33,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{}}}],["matching",{"_index":86,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["max",{"_index":38,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["message",{"_index":379,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["metadata",{"_index":179,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{}}}],["methods",{"_index":91,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{}}}],["miscellaneous",{"_index":596,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":531,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["module",{"_index":357,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["modules",{"_index":359,"title":{"modules.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"modules.html":{}}}],["mugen",{"_index":7,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mugenscrollbottomdirective",{"_index":176,"title":{"directives/MugenScrollBottomDirective.html":{}},"body":{"directives/MugenScrollBottomDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"overview.html":{}}}],["mugenscrolldatadirective",{"_index":30,"title":{"directives/MugenScrollDataDirective.html":{}},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"overview.html":{}}}],["mugenscrolltopdirective",{"_index":205,"title":{"directives/MugenScrollTopDirective.html":{}},"body":{"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"overview.html":{}}}],["n",{"_index":121,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["name",{"_index":102,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["new",{"_index":46,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["newcursor",{"_index":40,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{}}}],["newcursor(v",{"_index":172,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["next",{"_index":487,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ng",{"_index":292,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngafterviewinit",{"_index":228,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngmodule",{"_index":372,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["ngoninit",{"_index":229,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngx",{"_index":221,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["ngxmugenscroll",{"_index":603,"title":{},"body":{"index.html":{}}}],["ngxmugenscrollcomponent",{"_index":211,"title":{"components/NgxMugenScrollComponent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"overview.html":{}}}],["ngxmugenscrollmodule",{"_index":358,"title":{"modules/NgxMugenScrollModule.html":{}},"body":{"modules/NgxMugenScrollModule.html":{},"modules.html":{},"overview.html":{}}}],["notfoundresourceerror",{"_index":375,"title":{"classes/NotFoundResourceError.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{}}}],["notfoundresourceerror(`cannot",{"_index":411,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["npm",{"_index":610,"title":{},"body":{"index.html":{}}}],["null",{"_index":458,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["number",{"_index":39,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["object",{"_index":14,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["objectstorenames",{"_index":477,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["oninit",{"_index":218,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["optional",{"_index":103,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["ordereddatastoreidxservice",{"_index":392,"title":{"injectables/OrderedDataStoreIdxService.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{}}}],["ordereddatastoreidxserviceindex",{"_index":387,"title":{"interfaces/OrderedDataStoreIdxServiceIndex.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{}}}],["ordereddatastoreidxservicestore",{"_index":390,"title":{"interfaces/OrderedDataStoreIdxServiceStore.html":{}},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{}}}],["out",{"_index":370,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["output",{"_index":270,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["outputs",{"_index":241,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["overview",{"_index":630,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":132,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["package",{"_index":580,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":101,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["prev",{"_index":490,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["previous",{"_index":300,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["private",{"_index":31,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["projects/.../ordered",{"_index":598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/ngx",{"_index":6,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["promise",{"_index":165,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":420,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["promise>((resolve",{"_index":500,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["properties",{"_index":12,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["providedin",{"_index":125,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["provider",{"_index":238,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["providers",{"_index":363,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["public",{"_index":34,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["publish",{"_index":626,"title":{},"body":{"index.html":{}}}],["push",{"_index":190,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["push(...datas",{"_index":60,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["query",{"_index":450,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r",{"_index":67,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.detectchanges",{"_index":70,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r.onerror",{"_index":463,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.onsuccess",{"_index":461,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r.rootnodes[0].setattribute('_cursor",{"_index":69,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["r2",{"_index":512,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["r2.result",{"_index":514,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range",{"_index":481,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.lower",{"_index":496,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["range.upper",{"_index":497,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["readonly",{"_index":380,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["readwrite",{"_index":447,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ref",{"_index":82,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["reject",{"_index":421,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reject(ev",{"_index":439,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reject(r.error",{"_index":464,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["remote",{"_index":413,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request",{"_index":422,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onblocked",{"_index":437,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onerror",{"_index":440,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onsuccess",{"_index":425,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["request.onupgradeneeded",{"_index":431,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["reset",{"_index":369,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}],["resolve",{"_index":430,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resolve(r.result",{"_index":462,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resolve(ret",{"_index":504,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["result",{"_index":85,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":87,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["resultsinitstore",{"_index":432,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["resultsinitstore.push(initstore(db",{"_index":434,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret",{"_index":499,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(cursor.value",{"_index":505,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.push(v",{"_index":517,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(cursor.value",{"_index":506,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["ret.unshift(v",{"_index":518,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["return",{"_index":58,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["returns",{"_index":106,"title":{},"body":{"classes/Cursor.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":126,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["rootmargin",{"_index":316,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["run",{"_index":617,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":348,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["save",{"_index":149,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["save(p",{"_index":130,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["savescrollposition",{"_index":230,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scroll",{"_index":9,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{},"index.html":{}}}],["scroll.component",{"_index":373,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.component.ts",{"_index":216,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["scroll.component.ts:160",{"_index":258,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:186",{"_index":253,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:204",{"_index":254,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:22",{"_index":264,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:224",{"_index":261,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:25",{"_index":268,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:258",{"_index":259,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:28",{"_index":266,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:31",{"_index":247,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:34",{"_index":249,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:37",{"_index":248,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:40",{"_index":246,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:43",{"_index":243,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:46",{"_index":244,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:49",{"_index":245,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:52",{"_index":251,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:55",{"_index":252,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:57",{"_index":242,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:73",{"_index":257,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:76",{"_index":256,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.component.ts:80",{"_index":255,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scroll.module.ts",{"_index":371,"title":{},"body":{"modules/NgxMugenScrollModule.html":{}}}],["scroll.ts",{"_index":156,"title":{},"body":{"interfaces/DataProvider.html":{},"coverage.html":{}}}],["scroll.ts:10",{"_index":169,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:12",{"_index":167,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:13",{"_index":174,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:6",{"_index":164,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll.ts:8",{"_index":171,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scroll/src/lib/cursor",{"_index":118,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"coverage.html":{}}}],["scroll/src/lib/cursor.ts",{"_index":89,"title":{},"body":{"classes/Cursor.html":{},"coverage.html":{}}}],["scroll/src/lib/cursor.ts:10",{"_index":108,"title":{},"body":{"classes/Cursor.html":{}}}],["scroll/src/lib/cursor.ts:13",{"_index":105,"title":{},"body":{"classes/Cursor.html":{}}}],["scroll/src/lib/cursor.ts:16",{"_index":107,"title":{},"body":{"classes/Cursor.html":{}}}],["scroll/src/lib/cursor.ts:2",{"_index":100,"title":{},"body":{"classes/Cursor.html":{}}}],["scroll/src/lib/cursor.ts:9",{"_index":110,"title":{},"body":{"classes/Cursor.html":{}}}],["scroll/src/lib/mugen",{"_index":8,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"coverage.html":{}}}],["scroll/src/lib/ngx",{"_index":215,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["scroll/src/lib/ordered",{"_index":376,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["scrollbottom",{"_index":231,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scrollbottomevent",{"_index":274,"title":{"interfaces/ScrollBottomEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["scrollbottomoninit",{"_index":239,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrollid",{"_index":157,"title":{},"body":{"interfaces/DataProvider.html":{}}}],["scrolltop",{"_index":122,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["scrolltopat",{"_index":232,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["scrolltopat(at",{"_index":260,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["scrolltopevent",{"_index":275,"title":{"interfaces/ScrollTopEvent.html":{}},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{},"coverage.html":{}}}],["selector",{"_index":26,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["sort",{"_index":498,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["start",{"_index":620,"title":{},"body":{"index.html":{}}}],["started",{"_index":602,"title":{"index.html":{}},"body":{}}],["state",{"_index":288,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["statements",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":401,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store",{"_index":128,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["store.clear",{"_index":475,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.createindex",{"_index":524,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.delete(key",{"_index":465,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.index(index",{"_index":459,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.indices",{"_index":436,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.keypath",{"_index":435,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name",{"_index":407,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.name}.${index}.${key",{"_index":409,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.service",{"_index":175,"title":{},"body":{"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["store.service.ts",{"_index":119,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"coverage.html":{}}}],["store.service.ts:16",{"_index":150,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:22",{"_index":154,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:27",{"_index":153,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:36",{"_index":151,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.service.ts:40",{"_index":152,"title":{},"body":{"injectables/CursorStoreService.html":{}}}],["store.transaction.onabort",{"_index":529,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.oncomplete",{"_index":528,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["store.transaction.onerror",{"_index":530,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["storename",{"_index":446,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["storename}.${indexname",{"_index":493,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores",{"_index":419,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["stores.foreach(async",{"_index":433,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["string",{"_index":98,"title":{},"body":{"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["styles",{"_index":276,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["support",{"_index":627,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":628,"title":{},"body":{"modules.html":{}}}],["t",{"_index":173,"title":{},"body":{"interfaces/DataProvider.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["t,i",{"_index":550,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["table",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":469,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["target.result",{"_index":471,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["template",{"_index":43,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["templateref",{"_index":22,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["terminal",{"_index":616,"title":{},"body":{"index.html":{}}}],["test",{"_index":615,"title":{},"body":{"index.html":{}}}],["then(resolve).catch(reject",{"_index":472,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.arrange(false",{"_index":79,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.arrange(true",{"_index":75,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.autofetchingbottom",{"_index":282,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autofetchingtop",{"_index":283,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.autoloadscrollposition",{"_index":284,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom",{"_index":55,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottom.emit",{"_index":314,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective",{"_index":289,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.bottomdirective.element",{"_index":313,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.constructor.name",{"_index":386,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.countperload",{"_index":280,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.load(this.provider.scrollid",{"_index":322,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.cursorstoreservice.save",{"_index":335,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective",{"_index":296,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.bottom",{"_index":333,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.clear",{"_index":301,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.newcursor",{"_index":302,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.push(...datas",{"_index":324,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.top",{"_index":331,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datadirective.unshift(...datas",{"_index":344,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.datas",{"_index":111,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.join(this.delimiter",{"_index":114,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.length",{"_index":113,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas.map(v",{"_index":116,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datas[i",{"_index":115,"title":{},"body":{"classes/Cursor.html":{}}}],["this.datasmap",{"_index":45,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.clear",{"_index":56,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.has(cursor.tostring",{"_index":65,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.datasmap.set(cursor.tostring",{"_index":74,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.db",{"_index":416,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.dbname",{"_index":398,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.delete(storename",{"_index":470,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.el.nativeelement",{"_index":188,"title":{},"body":{"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchbottom",{"_index":315,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.fetchtop",{"_index":312,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.indexeddb",{"_index":399,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.indexeddb.open(this.dbname",{"_index":423,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.init",{"_index":285,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver",{"_index":304,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.disconnect",{"_index":305,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.bottomdirective.element",{"_index":320,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.intersectionobserver.observe(this.topdirective.element",{"_index":321,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.iter",{"_index":486,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.max",{"_index":47,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.name",{"_index":385,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.newcursor",{"_index":49,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.newcursor(data",{"_index":64,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.provider",{"_index":298,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchbottom",{"_index":341,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchoninit(this.countperload).then(datas",{"_index":327,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchonload(cursorstoreinfo).then(datas",{"_index":323,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.fetchtop",{"_index":342,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor",{"_index":303,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at",{"_index":349,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(at).tostring",{"_index":347,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.bottom",{"_index":337,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top",{"_index":338,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.newcursor(this.datadirective.top).tostring",{"_index":346,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.provider.scrollid",{"_index":336,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottom",{"_index":328,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrollbottomoninit",{"_index":278,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.scrolltopat(topbeforeadded",{"_index":345,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.store",{"_index":129,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.delete(p",{"_index":144,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.get(p",{"_index":137,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.store.set(p",{"_index":135,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["this.top",{"_index":54,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.top.emit",{"_index":311,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective",{"_index":294,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.topdirective.element",{"_index":309,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.uniqid",{"_index":277,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["this.validdb",{"_index":443,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["this.viewcontainer.clear",{"_index":53,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":68,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["this.viewcontainer.length",{"_index":59,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["threshold",{"_index":318,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["throw",{"_index":290,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top",{"_index":37,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top.directive",{"_index":271,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"modules/NgxMugenScrollModule.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["top.directive.ts",{"_index":206,"title":{},"body":{"directives/MugenScrollTopDirective.html":{},"coverage.html":{}}}],["top.directive.ts:13",{"_index":209,"title":{},"body":{"directives/MugenScrollTopDirective.html":{}}}],["top.directive.ts:6",{"_index":208,"title":{},"body":{"directives/MugenScrollTopDirective.html":{}}}],["topbeforeadded",{"_index":343,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["topcursor",{"_index":123,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topcursor.tostring",{"_index":134,"title":{},"body":{"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{}}}],["topdirective",{"_index":225,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tostring",{"_index":94,"title":{},"body":{"classes/Cursor.html":{}}}],["transaction",{"_index":536,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tree",{"_index":214,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["true",{"_index":66,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["tslib",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["tx",{"_index":444,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename",{"_index":456,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).getall",{"_index":511,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).index(indexname).opencursor(range",{"_index":501,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["tx.objectstore(storename).put(arg",{"_index":449,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollBottomDirective.html":{},"directives/MugenScrollDataDirective.html":{},"directives/MugenScrollTopDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"coverage.html":{}}}],["undefined",{"_index":36,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["uniqid",{"_index":240,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["unique",{"_index":389,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["unshift",{"_index":191,"title":{},"body":{"directives/MugenScrollDataDirective.html":{}}}],["unshift(...datas",{"_index":76,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["until",{"_index":72,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["v",{"_index":41,"title":{},"body":{"interfaces/Ctx.html":{},"classes/Cursor.html":{},"interfaces/DataProvider.html":{},"directives/MugenScrollDataDirective.html":{},"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.keypath",{"_index":526,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.name",{"_index":525,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["v.unique",{"_index":527,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validate",{"_index":286,"title":{},"body":{"components/NgxMugenScrollComponent.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["validdb",{"_index":415,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["validtx",{"_index":577,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validtx(db",{"_index":445,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{},"miscellaneous/functions.html":{}}}],["value",{"_index":546,"title":{},"body":{"injectables/OrderedDataStoreIdxService.html":{}}}],["var",{"_index":352,"title":{},"body":{"components/NgxMugenScrollComponent.html":{}}}],["version",{"_index":424,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["versionchange",{"_index":532,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["viewcontainer",{"_index":44,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["viewcontainerref",{"_index":23,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["void",{"_index":52,"title":{},"body":{"interfaces/Ctx.html":{},"interfaces/CursorStoreInfo.html":{},"injectables/CursorStoreService.html":{},"directives/MugenScrollDataDirective.html":{},"components/NgxMugenScrollComponent.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/ScrollBottomEvent.html":{},"interfaces/ScrollTopEvent.html":{}}}],["vref.context",{"_index":83,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["wait",{"_index":71,"title":{},"body":{"interfaces/Ctx.html":{},"directives/MugenScrollDataDirective.html":{}}}],["window.indexeddb",{"_index":400,"title":{},"body":{"classes/NotFoundResourceError.html":{},"injectables/OrderedDataStoreIdxService.html":{},"interfaces/OrderedDataStoreIdxServiceIndex.html":{},"interfaces/OrderedDataStoreIdxServiceStore.html":{}}}],["yes",{"_index":600,"title":{},"body":{"miscellaneous/functions.html":{}}}],["zone.js",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":368,"title":{},"body":{"modules/NgxMugenScrollModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Ctx.html":{"url":"interfaces/Ctx.html","title":"interface - Ctx","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Ctx\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n  public bottom: object | undefined;\n  public top: object | undefined;\n\n  public max: number;\n  public newCursor: (v: object) => Cursor;\n\n  constructor(\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 100;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cursor.html":{"url":"classes/Cursor.html","title":"class - Cursor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cursor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/cursor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                datas\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getItem\n                            \n                            \n                                getItems\n                            \n                            \n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(datas: Array, delimiter: string)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/cursor.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        datas\n                                                  \n                                                        \n                                                                    Array\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        delimiter\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            datas\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/cursor.ts:2\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItem\n                        \n                        \n                    \n                \n            \n            \n                \ngetItem(i: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/cursor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    i\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     number | string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItems\n                        \n                        \n                    \n                \n            \n            \n                \ngetItems()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/cursor.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/cursor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in projects/ngx-mugen-scroll/src/lib/cursor.ts:9\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export class Cursor {\n    private datas: Array;\n    constructor(\n        datas: Array,\n        private delimiter: string = '-',\n    ) {\n        this.datas = datas.map(v => v);\n    }\n    get length(): number { return this.datas.length; }\n    toString(): string {\n        return this.datas.join(this.delimiter);\n    }\n    getItem(i: number): number | string {\n        return this.datas[i];\n    }\n    getItems(): Array {\n        return this.datas.map(v => v);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CursorStoreInfo.html":{"url":"interfaces/CursorStoreInfo.html","title":"interface - CursorStoreInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CursorStoreInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        bottomCursor\n                                \n                                \n                                        n\n                                \n                                \n                                        scrollTop\n                                \n                                \n                                        topCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bottomCursor\n                                    \n                                \n                                \n                                    \n                                        bottomCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        n\n                                    \n                                \n                                \n                                    \n                                        n:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollTop\n                                    \n                                \n                                \n                                    \n                                        scrollTop:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        topCursor\n                                    \n                                \n                                \n                                    \n                                        topCursor:         Cursor\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Cursor\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CursorStoreService.html":{"url":"injectables/CursorStoreService.html","title":"injectable - CursorStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CursorStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                load\n                            \n                            \n                                save\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(p: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(p: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            load\n                        \n                        \n                    \n                \n            \n            \n                \nload(p: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CursorStoreInfo | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            save\n                        \n                        \n                    \n                \n            \n            \n                \nsave(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    p\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bottomCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    topCursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    scrollTop\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            store\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Map\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\nexport interface CursorStoreInfo {\n  bottomCursor: Cursor;\n  topCursor: Cursor;\n  n: number;\n  scrollTop: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CursorStoreService {\n\n  private store: Map;\n\n  constructor() {\n    this.store = new Map();\n  }\n\n  save(p: string, bottomCursor: Cursor, topCursor: Cursor, n: number, scrollTop: number): void {\n    console.log(`Save cursor: ${p}, ${bottomCursor.toString()}, ${topCursor.toString()}, ${n}, ${scrollTop}`);\n    this.store.set(p, { bottomCursor, topCursor, n, scrollTop });\n  }\n\n  load(p: string): CursorStoreInfo | undefined {\n    const i = this.store.get(p);\n    if (!i) {\n      return undefined;\n    }\n    console.log(`Load cursor: ${p}, ${i.bottomCursor.toString()}, ${i.topCursor.toString()}, ${i.n}, ${i.scrollTop}`);\n    return i;\n  }\n\n  delete(p: string): void {\n    this.store.delete(p);\n  }\n\n  get(p: string): CursorStoreInfo | undefined {\n    return this.store.get(p);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DataProvider.html":{"url":"interfaces/DataProvider.html","title":"interface - DataProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DataProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/mugen-scroll.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        scrollId\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    fetchBottom\n                                \n                                \n                                    fetchOnInit\n                                \n                                \n                                    fetchOnLoad\n                                \n                                \n                                    fetchTop\n                                \n                                \n                                    newCursor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \nfetchBottom(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnInit(n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchOnLoad\n                        \n                        \n                    \n                \n            \n            \n                \nfetchOnLoad(info: CursorStoreInfo)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    info\n                                    \n                                                CursorStoreInfo\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \nfetchTop(cursor: Cursor, n: number, includeEqual: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cursor\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            newCursor\n                        \n                        \n                    \n                \n            \n            \n                \nnewCursor(v: T)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    v\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Cursor\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        scrollId\n                                    \n                                \n                                \n                                    \n                                        scrollId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Cursor } from './cursor';\nimport { CursorStoreInfo } from './cursor-store.service';\n\nexport interface DataProvider {\n    scrollId: string;\n    fetchBottom(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchTop(\n        cursor: Cursor, n: number, includeEqual: boolean): Promise>;\n    fetchOnLoad(\n        info: CursorStoreInfo): Promise>;\n    fetchOnInit(n: number): Promise>;\n    newCursor(v: T): Cursor;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollBottomDirective.html":{"url":"directives/MugenScrollBottomDirective.html","title":"directive - MugenScrollBottomDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollBottomDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/mugen-scroll-bottom.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollBottom]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    element\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-bottom.directive.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        element\n                    \n                \n\n                \n                    \n                        getelement()\n                    \n                \n                            \n                                \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-bottom.directive.ts:12\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollBottom]'\n})\nexport class MugenScrollBottomDirective {\n\n  constructor(\n    private el: ElementRef,\n  ) { }\n\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollDataDirective.html":{"url":"directives/MugenScrollDataDirective.html","title":"directive - MugenScrollDataDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollDataDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollData]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bottom\n                            \n                            \n                                    Private\n                                datasMap\n                            \n                            \n                                    Public\n                                max\n                            \n                            \n                                    Public\n                                newCursor\n                            \n                            \n                                    Public\n                                top\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                arrange\n                            \n                            \n                                clear\n                            \n                            \n                                push\n                            \n                            \n                                unshift\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    length\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(template: TemplateRef, viewContainer: ViewContainerRef)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        template\n                                                  \n                                                        \n                                                                    TemplateRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        viewContainer\n                                                  \n                                                        \n                                                                        ViewContainerRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            arrange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    arrange(deleteAtTop: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    deleteAtTop\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            push\n                        \n                        \n                    \n                \n            \n            \n                \npush(...datas: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            unshift\n                        \n                        \n                    \n                \n            \n            \n                \nunshift(...datas: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    datas\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            bottom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            datasMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            max\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            newCursor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            top\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     object | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        length\n                    \n                \n\n                \n                    \n                        getlength()\n                    \n                \n                            \n                                \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts:36\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Cursor } from './cursor';\n\ninterface Ctx {\n  data: object;\n}\n\n@Directive({\n  selector: '[libMugenScrollData]'\n})\nexport class MugenScrollDataDirective {\n\n  private datasMap: Map;\n  public bottom: object | undefined;\n  public top: object | undefined;\n\n  public max: number;\n  public newCursor: (v: object) => Cursor;\n\n  constructor(\n    private template: TemplateRef,\n    private viewContainer: ViewContainerRef,\n  ) {\n    this.datasMap = new Map();\n    this.max = 100;\n    this.newCursor = (v: object) => new Cursor([v.toString()]);\n  }\n\n  clear(): void {\n    this.viewContainer.clear();\n    this.top = undefined;\n    this.bottom = undefined;\n    this.datasMap.clear();\n  }\n\n  get length(): number {\n    return this.viewContainer.length;\n  }\n\n  push(...datas: Array): void {\n    datas.forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.top === undefined) {\n        this.top = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.bottom = data;\n    });\n    this.arrange(true);\n  }\n\n  unshift(...datas: Array): void {\n    datas.reverse().forEach(data => {\n      const cursor = this.newCursor(data);\n      if (this.datasMap.has(cursor.toString()) === true) {\n        return;\n      }\n      if (this.bottom === undefined) {\n        this.bottom = data;\n      }\n      const ctx: Ctx = { data };\n      const r = this.viewContainer.createEmbeddedView(this.template, ctx, 0);\n      r.rootNodes[0].setAttribute('_cursor', this.newCursor(data));\n      r.detectChanges(); // Wait until data is attached???\n      this.datasMap.set(cursor.toString(), data);\n      this.top = data;\n    });\n    this.arrange(false);\n  }\n\n  private arrange(deleteAtTop: boolean): void {\n    if (this.viewContainer.length  = ref as EmbeddedViewRef;\n        const ctx = vref.context as Ctx;\n        this.top = ctx.data;\n      }\n      return;\n    }\n    for (let i = 0; i  = ref as EmbeddedViewRef;\n      const ctx = vref.context as Ctx;\n      this.bottom = ctx.data;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/MugenScrollTopDirective.html":{"url":"directives/MugenScrollTopDirective.html","title":"directive - MugenScrollTopDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  MugenScrollTopDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/mugen-scroll-top.directive.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [libMugenScrollTop]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    element\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-top.directive.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        element\n                    \n                \n\n                \n                    \n                        getelement()\n                    \n                \n                            \n                                \n                                    Defined in projects/ngx-mugen-scroll/src/lib/mugen-scroll-top.directive.ts:13\n                                \n                            \n\n            \n        \n\n\n    \n\n\n    \n        import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[libMugenScrollTop]'\n})\nexport class MugenScrollTopDirective {\n\n  constructor(\n    private el: ElementRef,\n  ) {\n  }\n\n  get element(): HTMLElement {\n    return this.el.nativeElement;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMugenScrollComponent.html":{"url":"components/NgxMugenScrollComponent.html","title":"component - NgxMugenScrollComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxMugenScrollComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                lib-ngx-mugen-scroll\n            \n\n\n\n            \n                template\n                \n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bottomDirective\n                            \n                            \n                                    Public\n                                dataDirective\n                            \n                            \n                                    Private\n                                intersectionObserver\n                            \n                            \n                                    Public\n                                topDirective\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                fetchBottom\n                            \n                            \n                                    Async\n                                fetchTop\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                ngAfterViewInit\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                saveScrollPosition\n                            \n                            \n                                    Private\n                                scrollBottom\n                            \n                            \n                                    Private\n                                scrollTopAt\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autoFetchingBottom\n                            \n                            \n                                autoFetchingTop\n                            \n                            \n                                autoLoadScrollPosition\n                            \n                            \n                                countPerLoad\n                            \n                            \n                                provider\n                            \n                            \n                                scrollBottomOnInit\n                            \n                            \n                                uniqId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                bottom\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, cursorStoreService: CursorStoreService)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cursorStoreService\n                                                  \n                                                        \n                                                                        CursorStoreService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        autoFetchingBottom\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:43\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        autoFetchingTop\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:46\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        autoLoadScrollPosition\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:49\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        countPerLoad\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        provider\n                    \n                \n                \n                    \n                        Type :         DataProvider | undefined\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:31\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        scrollBottomOnInit\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        uniqId\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:34\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        bottom\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:52\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:55\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchBottom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchBottom()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            fetchTop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetchTop()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            saveScrollPosition\n                        \n                        \n                    \n                \n            \n            \n                \nsaveScrollPosition()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            scrollBottom\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scrollBottom()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:258\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            scrollTopAt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    scrollTopAt(at: object)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    at\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            bottomDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MugenScrollBottomDirective | undefined\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChild(MugenScrollBottomDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MugenScrollDataDirective | undefined\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChild(MugenScrollDataDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            intersectionObserver\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IntersectionObserver | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            topDirective\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MugenScrollTopDirective | undefined\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ContentChild(MugenScrollTopDirective)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  public bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  public topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  public dataDirective: MugenScrollDataDirective | undefined;\n\n  @Input()\n  public provider: DataProvider | undefined;\n\n  @Input()\n  public uniqId: string;\n\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  @Input()\n  public countPerLoad: number;\n\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  @Input()\n  public autoFetchingTop: boolean;\n\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  @Output()\n  public bottom: EventEmitter;\n\n  @Output()\n  public top: EventEmitter;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 50;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n  }\n\n  ngOnInit(): void {\n  }\n\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    this.dataDirective.push(...datas);\n  }\n\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n    this.scrollTopAt(topBeforeAdded);\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i \n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'NgxMugenScrollComponent', 'selector': 'lib-ngx-mugen-scroll'}];\n    var DIRECTIVES = [{'name': 'MugenScrollBottomDirective', 'selector': '[libMugenScrollBottom]'},{'name': 'MugenScrollDataDirective', 'selector': '[libMugenScrollData]'},{'name': 'MugenScrollTopDirective', 'selector': '[libMugenScrollTop]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMugenScrollComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxMugenScrollModule.html":{"url":"modules/NgxMugenScrollModule.html","title":"module - NgxMugenScrollModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxMugenScrollModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxMugenScrollModule\n\n\n\ncluster_NgxMugenScrollModule_exports\n\n\n\ncluster_NgxMugenScrollModule_declarations\n\n\n\n\nMugenScrollBottomDirective\n\nMugenScrollBottomDirective\n\n\n\nNgxMugenScrollModule\n\nNgxMugenScrollModule\n\nNgxMugenScrollModule -->\n\nMugenScrollBottomDirective->NgxMugenScrollModule\n\n\n\n\n\nMugenScrollDataDirective\n\nMugenScrollDataDirective\n\nNgxMugenScrollModule -->\n\nMugenScrollDataDirective->NgxMugenScrollModule\n\n\n\n\n\nMugenScrollTopDirective\n\nMugenScrollTopDirective\n\nNgxMugenScrollModule -->\n\nMugenScrollTopDirective->NgxMugenScrollModule\n\n\n\n\n\nNgxMugenScrollComponent\n\nNgxMugenScrollComponent\n\nNgxMugenScrollModule -->\n\nNgxMugenScrollComponent->NgxMugenScrollModule\n\n\n\n\n\nMugenScrollBottomDirective \n\nMugenScrollBottomDirective \n\nMugenScrollBottomDirective  -->\n\nNgxMugenScrollModule->MugenScrollBottomDirective \n\n\n\n\n\nMugenScrollDataDirective \n\nMugenScrollDataDirective \n\nMugenScrollDataDirective  -->\n\nNgxMugenScrollModule->MugenScrollDataDirective \n\n\n\n\n\nMugenScrollTopDirective \n\nMugenScrollTopDirective \n\nMugenScrollTopDirective  -->\n\nNgxMugenScrollModule->MugenScrollTopDirective \n\n\n\n\n\nNgxMugenScrollComponent \n\nNgxMugenScrollComponent \n\nNgxMugenScrollComponent  -->\n\nNgxMugenScrollModule->NgxMugenScrollComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MugenScrollBottomDirective\n                        \n                        \n                            MugenScrollDataDirective\n                        \n                        \n                            MugenScrollTopDirective\n                        \n                        \n                            NgxMugenScrollComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxMugenScrollComponent } from './ngx-mugen-scroll.component';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxMugenScrollComponent,\n    MugenScrollTopDirective,\n    MugenScrollBottomDirective,\n    MugenScrollDataDirective,\n  ],\n})\nexport class NgxMugenScrollModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotFoundResourceError.html":{"url":"classes/NotFoundResourceError.html","title":"class - NotFoundResourceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotFoundResourceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        Error\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Readonly\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrderedDataStoreIdxService.html":{"url":"injectables/OrderedDataStoreIdxService.html","title":"injectable - OrderedDataStoreIdxService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OrderedDataStoreIdxService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                dbName\n                            \n                            \n                                    Private\n                                indexedDB\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                clear\n                            \n                            \n                                    Async\n                                clearAll\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Static\n                                    Async\n                                fetch\n                            \n                            \n                                    Public\n                                    Async\n                                filter\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getLargerN\n                            \n                            \n                                    Async\n                                getSmallerN\n                            \n                            \n                                    Async\n                                init\n                            \n                            \n                                    Private\n                                    Async\n                                iter\n                            \n                            \n                                    Private\n                                validDB\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(storeName: string, ...args: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:105\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear(storeName: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            clearAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearAll()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:186\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(storeName: string, key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    key\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            fetch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fetch(base: OrderedDataStoreIdxService, store: OrderedDataStoreIdxServiceStore, key: string, index: string, fetcher: () => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:39\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    base\n                                    \n                                                OrderedDataStoreIdxService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    store\n                                    \n                                                OrderedDataStoreIdxServiceStore\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fetcher\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            filter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    filter(storeName: string, direction: \"next\" | \"prev\", cb: (v: T,i: number) => void)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:293\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    direction\n                                    \n                                            \"next\" | \"prev\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(storeName: string, query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange, index: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:113\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    query\n                                    \n                                            string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    index\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getLargerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLargerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:198\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSmallerN\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSmallerN(storeName: string, indexName: string, current: Cursor, n: number, includeEqual: boolean, end: Cursor | null)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:225\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    current\n                                    \n                                                Cursor\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    includeEqual\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                                \n                                    end\n                                    \n                                                Cursor | null\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        null\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(version: number, stores: Array)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    version\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    stores\n                                    \n                                                Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            iter\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    iter(storeName: string, indexName: string, current: Array, range: IDBKeyRange, direction: \"next\" | \"prev\", n: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:252\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    storeName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    indexName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    current\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    range\n                                    \n                                            IDBKeyRange\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    direction\n                                    \n                                            \"next\" | \"prev\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    n\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            validDB\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validDB()\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     IDBDatabase\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IDBDatabase | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            indexedDB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IDBFactory\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts:29\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceIndex.html":{"url":"interfaces/OrderedDataStoreIdxServiceIndex.html","title":"interface - OrderedDataStoreIdxServiceIndex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceIndex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                                \n                                        unique\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unique\n                                    \n                                \n                                \n                                    \n                                        unique:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OrderedDataStoreIdxServiceStore.html":{"url":"interfaces/OrderedDataStoreIdxServiceStore.html","title":"interface - OrderedDataStoreIdxServiceStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  OrderedDataStoreIdxServiceStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        indices\n                                \n                                \n                                        keyPath\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        indices\n                                    \n                                \n                                \n                                    \n                                        indices:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyPath\n                                    \n                                \n                                \n                                    \n                                        keyPath:     string | Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Cursor } from './cursor';\n\n\nexport class NotFoundResourceError implements Error {\n  readonly name: string;\n  constructor(public message: string) {\n    this.name = this.constructor.name;\n  }\n}\n\nexport interface OrderedDataStoreIdxServiceIndex {\n  name: string;\n  keyPath: string | Array;\n  unique: boolean;\n}\n\nexport interface OrderedDataStoreIdxServiceStore {\n  name: string;\n  keyPath: string | Array;\n  indices: Array;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderedDataStoreIdxService {\n\n  private indexedDB: IDBFactory;\n  private db: IDBDatabase | undefined;\n  private dbName: string;\n\n  constructor(\n  ) {\n    this.dbName = 'ngx-mugen-scroll-store';\n    this.indexedDB = window.indexedDB;\n  }\n\n  static async fetch(\n    base: OrderedDataStoreIdxService,\n    store: OrderedDataStoreIdxServiceStore,\n    key: string,\n    index: string,\n    fetcher: () => Promise,\n  ): Promise {\n    let data = await base.get(\n      store.name,\n      key,\n      index,\n    );\n    if (data) {\n      console.log(`Fetch ${store.name}.${index}.${key} from indexed db`);\n      return data;\n    }\n    data = await fetcher();\n    if (!data) {\n      throw new NotFoundResourceError(`Cannot find '${key}'`);\n    }\n    console.log(`Fetch ${store.name}.${index}.${key} from remote`);\n    await base.add(\n      store.name,\n      data,\n    );\n    return data;\n  }\n\n  private validDB(): IDBDatabase {\n    if (!this.db) {\n      throw new Error('db is undefined');\n    }\n    return this.db;\n  }\n\n\n  async init(version: number, stores: Array): Promise {\n    return new Promise((resolve, reject) => {\n      const request = this.indexedDB.open(this.dbName, version);\n      request.onsuccess = (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        resolve();\n      };\n      request.onupgradeneeded = async (ev: Event) => {\n        this.db = (ev.target as any).result as IDBDatabase;\n        const db = this.db;\n        const resultsInitStore: Array> = [];\n        stores.forEach(async store => {\n          resultsInitStore.push(initStore(db, store.name, store.keyPath, store.indices));\n        });\n        for (const result of resultsInitStore) {\n          await result;\n        }\n        resolve();\n      };\n      request.onblocked = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n      request.onerror = (ev: Event) => {\n        console.error(ev);\n        reject(ev);\n      };\n    });\n  }\n\n  async add(storeName: string, ...args: Array): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    args.forEach((arg: T) => {\n      tx.objectStore(storeName).put(arg);\n    });\n  }\n\n  async get(\n    storeName: string,\n    query: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const store = tx.objectStore(storeName);\n      let idx = null;\n      if (index) {\n        idx = store.index(index);\n      } else {\n        idx = store;\n      }\n      const r = idx.get(query);\n      r.onsuccess = (ev: Event) => {\n        resolve(r.result);\n      };\n      r.onerror = (ev: Event) => {\n        reject(r.error);\n      };\n    });\n  }\n\n  async delete(\n    storeName: string,\n    key: string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange,\n    index: string = '',\n  ): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    if (!index) {\n      return new Promise((resolve, reject) => {\n        const r = store.delete(key);\n        r.onsuccess = (ev: Event) => {\n          resolve();\n        };\n        r.onerror = (ev: Event) => {\n          reject();\n        };\n      });\n    }\n    const idx = store.index(index);\n    const key2 = idx.getKey(key);\n    if (!key2) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      key2.onsuccess = (ev: Event) => {\n        const target = ev.target as any;\n        this.delete(storeName, target.result, '').then(resolve).catch(reject);\n      };\n      key2.onerror = (ev: Event) => { reject(ev); };\n    });\n  }\n\n  async clear(storeName: string): Promise {\n    const db = this.validDB();\n    const tx = validTx(db, storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    const r = store.clear();\n    return new Promise((resolve, reject) => {\n      r.onsuccess = (ev: Event) => {\n        resolve();\n      };\n      r.onerror = (ev: Event) => {\n        reject();\n      };\n    });\n  }\n\n  async clearAll(): Promise {\n    const db = this.validDB();\n    const objectStoreNames = db.objectStoreNames;\n    for (let i = 0; i (\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.lowerBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        current.getItems(),\n        end.getItems(),\n        !includeEqual,\n        true,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'next',\n      n,\n    );\n  }\n\n  async getSmallerN(\n    storeName: string,\n    indexName: string,\n    current: Cursor,\n    n: number,\n    includeEqual: boolean = false,\n    end: Cursor | null = null,\n  ): Promise> {\n    let range = IDBKeyRange.upperBound(current.getItems(), !includeEqual);\n    if (end) {\n      range = IDBKeyRange.bound(\n        end.getItems(),\n        current.getItems(),\n        true,\n        !includeEqual,\n      );\n    }\n    return await this.iter(\n      storeName,\n      indexName,\n      current.getItems(),\n      range,\n      'prev',\n      n,\n    );\n  }\n\n  private async iter(\n    storeName: string,\n    indexName: string,\n    current: Array,\n    range: IDBKeyRange,\n    direction: 'next' | 'prev',\n    n: number,\n  ): Promise> {\n    // console.log(`Fetch ${storeName}.${indexName} at ${current.toString()}`);\n    // console.log(`From ${range.lower} to ${range.upper} sort ${direction} ${n} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      let i = 0;\n      const r = tx.objectStore(storeName).index(indexName).openCursor(range, direction);\n      r.onsuccess = (ev: Event) => {\n        const cursor: IDBCursorWithValue = (ev.target as any).result;\n        if (!cursor) {\n          // EOF\n          resolve(ret);\n          return;\n        }\n        if (i >= n) {\n          resolve(ret);\n          return;\n        }\n        if (direction === 'next') {\n          ret.push(cursor.value);\n        } else {\n          ret.unshift(cursor.value);\n        }\n        cursor.continue();\n        i++;\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n\n  public async filter(\n    storeName: string,\n    direction: 'next' | 'prev',\n    cb: (v: T, i: number) => boolean,\n  ): Promise> {\n    console.log(`Filter ${storeName} from indexed db`);\n    const ret: Array = [];\n    return new Promise>((resolve, reject) => {\n      const db = this.validDB();\n      const tx = validTx(db, storeName, 'readonly');\n      const r = tx.objectStore(storeName).getAll();\n      let i = 0;\n      r.onsuccess = (ev: Event) => {\n        const r2 = ev.target as IDBRequest;\n        (r2.result as Array).forEach((v: T) => {\n          if (cb(v, i)) {\n            if (direction === 'next') {\n              ret.push(v);\n            } else {\n              ret.unshift(v);\n            }\n          }\n        });\n        i++;\n        resolve(ret);\n      };\n      r.onerror = (ev: Event) => {\n        reject(ev);\n      };\n    });\n  }\n}\n\nasync function initStore(\n  db: IDBDatabase,\n  storeName: string,\n  keyPath: string | Array,\n  indecies: Array = [],\n): Promise {\n  return new Promise((resolve, reject) => {\n    if (db.objectStoreNames.contains(storeName)) {\n      return resolve();\n    }\n    const store = db.createObjectStore(\n      storeName,\n      {\n        keyPath,\n      },\n    );\n    indecies.forEach(v => {\n      store.createIndex(\n        v.name,\n        v.keyPath,\n        {\n          unique: v.unique,\n        },\n      );\n    });\n    store.transaction.oncomplete = (ev: Event) => {\n      resolve();\n    };\n    store.transaction.onabort = (ev: Event) => {\n      reject(ev);\n    };\n    store.transaction.onerror = (ev: Event) => {\n      reject(ev);\n    };\n  });\n\n}\n\n\nfunction validTx(db: IDBDatabase, storeName: string, mode?: 'readonly' | 'readwrite' | 'versionchange' | undefined): IDBTransaction {\n  const tx = db.transaction(storeName, mode);\n  if (!tx) {\n    throw new Error(`Cannot get transaction '${storeName}'`);\n  }\n  return tx;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollBottomEvent.html":{"url":"interfaces/ScrollBottomEvent.html","title":"interface - ScrollBottomEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollBottomEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  public bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  public topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  public dataDirective: MugenScrollDataDirective | undefined;\n\n  @Input()\n  public provider: DataProvider | undefined;\n\n  @Input()\n  public uniqId: string;\n\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  @Input()\n  public countPerLoad: number;\n\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  @Input()\n  public autoFetchingTop: boolean;\n\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  @Output()\n  public bottom: EventEmitter;\n\n  @Output()\n  public top: EventEmitter;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 50;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n  }\n\n  ngOnInit(): void {\n  }\n\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    this.dataDirective.push(...datas);\n  }\n\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n    this.scrollTopAt(topBeforeAdded);\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScrollTopEvent.html":{"url":"interfaces/ScrollTopEvent.html","title":"interface - ScrollTopEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ScrollTopEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts\n        \n\n\n\n\n\n\n    \n\n\n    \n        import { AfterViewInit, Component, ContentChild, ElementRef, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { MugenScrollTopDirective } from './mugen-scroll-top.directive';\nimport { MugenScrollBottomDirective } from './mugen-scroll-bottom.directive';\nimport { DataProvider } from './mugen-scroll';\nimport { CursorStoreService } from './cursor-store.service';\nimport { MugenScrollDataDirective } from './mugen-scroll-data.directive';\n\nexport interface ScrollBottomEvent { }\nexport interface ScrollTopEvent { }\n\n@Component({\n  selector: 'lib-ngx-mugen-scroll',\n  template: `\n    \n  `,\n  styles: [\n  ]\n})\nexport class NgxMugenScrollComponent implements OnInit, AfterViewInit {\n\n  @ContentChild(MugenScrollBottomDirective)\n  public bottomDirective: MugenScrollBottomDirective | undefined;\n\n  @ContentChild(MugenScrollTopDirective)\n  public topDirective: MugenScrollTopDirective | undefined;\n\n  @ContentChild(MugenScrollDataDirective)\n  public dataDirective: MugenScrollDataDirective | undefined;\n\n  @Input()\n  public provider: DataProvider | undefined;\n\n  @Input()\n  public uniqId: string;\n\n  @Input()\n  public scrollBottomOnInit: boolean;\n\n  @Input()\n  public countPerLoad: number;\n\n  @Input()\n  public autoFetchingBottom: boolean;\n\n  @Input()\n  public autoFetchingTop: boolean;\n\n  @Input()\n  public autoLoadScrollPosition: boolean;\n\n  @Output()\n  public bottom: EventEmitter;\n\n  @Output()\n  public top: EventEmitter;\n\n  private intersectionObserver: IntersectionObserver | undefined;\n\n  constructor(\n    private el: ElementRef,\n    private cursorStoreService: CursorStoreService,\n  ) {\n    this.uniqId = '';\n    this.scrollBottomOnInit = false;\n    this.countPerLoad = 50;\n    this.bottom = new EventEmitter();\n    this.top = new EventEmitter();\n    this.autoFetchingBottom = true;\n    this.autoFetchingTop = true;\n    this.autoLoadScrollPosition = true;\n  }\n\n  ngOnInit(): void {\n  }\n\n  async ngAfterViewInit(): Promise {\n    this.init();\n  }\n\n  init(): void {\n    // Validate current state\n    if (this.bottomDirective === undefined) {\n      throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n    }\n    if (this.topDirective === undefined) {\n      throw new Error('MugenScrollTopDirective is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    // Clear previous state\n    this.dataDirective.clear();\n    this.dataDirective.newCursor = this.provider.newCursor;\n    if (this.intersectionObserver !== undefined) {\n      this.intersectionObserver.disconnect();\n      this.intersectionObserver = undefined;\n    }\n    // New current state\n    this.intersectionObserver = new IntersectionObserver(\n      (entities: Array): void => {\n        entities.forEach(entity => {\n          if (this.bottomDirective === undefined) {\n            throw new Error('MugenScrollBottomDirective is undefined in ng-content');\n          }\n          if (this.topDirective === undefined) {\n            throw new Error('MugenScrollTopDirective is undefined in ng-content');\n          }\n          if (entity.target === this.topDirective.element && entity.isIntersecting === true) {\n            this.top.emit({});\n            if (this.autoFetchingTop === false) {\n              return;\n            }\n            this.fetchTop();\n          }\n          if (entity.target === this.bottomDirective.element && entity.isIntersecting === true) {\n            this.bottom.emit({});\n            if (this.autoFetchingBottom === false) {\n              return;\n            }\n            this.fetchBottom();\n          }\n        });\n      },\n      {\n        root: this.el.nativeElement,\n        rootMargin: '0px',\n        threshold: 1.0,\n      },\n    );\n    this.intersectionObserver.observe(this.bottomDirective.element);\n    this.intersectionObserver.observe(this.topDirective.element);\n    // Load data\n    if (this.autoLoadScrollPosition) {\n      const cursorStoreInfo = this.cursorStoreService.load(this.provider.scrollId);\n      if (cursorStoreInfo !== undefined) {\n        this.provider.fetchOnLoad(cursorStoreInfo).then(datas => {\n          if (this.dataDirective === undefined) {\n            throw new Error('MugenScrollDataDirective is undefined in ng-content');\n          }\n          this.dataDirective.push(...datas);\n          (this.el.nativeElement as HTMLElement).scroll(0, cursorStoreInfo.scrollTop);\n        });\n        return;\n      }\n    }\n    this.provider.fetchOnInit(this.countPerLoad).then(datas => {\n      if (this.dataDirective === undefined) {\n        throw new Error('MugenScrollDataDirective is undefined in ng-content');\n      }\n      this.dataDirective.push(...datas);\n      if (this.scrollBottomOnInit) {\n        this.scrollBottom();\n      }\n    });\n  }\n\n  saveScrollPosition(): void {\n    if (this.provider === undefined) {\n      console.error('provider is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective === undefined) {\n      console.error('MugenScrollDataDirective is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.top === undefined) {\n      console.error('MugenScrollDataDirective.top is undefined in ng-content');\n      return;\n    }\n    if (this.dataDirective.bottom === undefined) {\n      console.error('MugenScrollDataDirective.bottom is undefined in ng-content');\n      return;\n    }\n    this.cursorStoreService.save(\n      this.provider.scrollId,\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      (this.el.nativeElement as HTMLElement).scrollTop,\n    );\n  }\n\n  async fetchBottom(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.bottom === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchBottom(\n      this.provider.newCursor(this.dataDirective.bottom),\n      this.countPerLoad,\n      false,\n    );\n    this.dataDirective.push(...datas);\n  }\n\n  async fetchTop(): Promise {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top === undefined) {\n      return;\n    }\n    const datas = await this.provider.fetchTop(\n      this.provider.newCursor(this.dataDirective.top),\n      this.countPerLoad,\n      false,\n    );\n    const topBeforeAdded = this.dataDirective.top;\n    this.dataDirective.unshift(...datas);\n    this.scrollTopAt(topBeforeAdded);\n  }\n\n  private scrollTopAt(at: object): void {\n    if (this.provider === undefined) {\n      throw new Error('provider is undefined in ng-content');\n    }\n    if (this.dataDirective === undefined) {\n      throw new Error('MugenScrollDataDirective is undefined in ng-content');\n    }\n    if (this.dataDirective.top !== undefined) {\n      if (this.provider.newCursor(this.dataDirective.top).toString() === this.provider.newCursor(at).toString()) {\n        return;\n      }\n    }\n    let s = 0;\n    const cursor = this.provider.newCursor(at);\n    const el = this.el.nativeElement as HTMLElement;\n    for (let i = 0; i \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts\n            \n            injectable\n            CursorStoreService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/cursor-store.service.ts\n            \n            interface\n            CursorStoreInfo\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/cursor.ts\n            \n            class\n            Cursor\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/mugen-scroll-bottom.directive.ts\n            \n            directive\n            MugenScrollBottomDirective\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts\n            \n            directive\n            MugenScrollDataDirective\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/mugen-scroll-data.directive.ts\n            \n            interface\n            Ctx\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/mugen-scroll-top.directive.ts\n            \n            directive\n            MugenScrollTopDirective\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/mugen-scroll.ts\n            \n            interface\n            DataProvider\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts\n            \n            component\n            NgxMugenScrollComponent\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts\n            \n            interface\n            ScrollBottomEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ngx-mugen-scroll.component.ts\n            \n            interface\n            ScrollTopEvent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n            \n            class\n            NotFoundResourceError\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n            \n            injectable\n            OrderedDataStoreIdxService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n            \n            interface\n            OrderedDataStoreIdxServiceIndex\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n            \n            interface\n            OrderedDataStoreIdxServiceStore\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n            \n            function\n            initStore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n            \n            function\n            validTx\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~11.0.0\n        \n            @angular/common : ~11.0.0\n        \n            @angular/compiler : ~11.0.0\n        \n            @angular/core : ~11.0.0\n        \n            @angular/forms : ~11.0.0\n        \n            @angular/platform-browser : ~11.0.0\n        \n            @angular/platform-browser-dynamic : ~11.0.0\n        \n            @angular/router : ~11.0.0\n        \n            rxjs : ~6.6.0\n        \n            tslib : ^2.0.0\n        \n            zone.js : ~0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            initStore   (projects/.../ordered-data-store-idx.service.ts)\n                        \n                        \n                            validTx   (projects/.../ordered-data-store-idx.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-mugen-scroll/src/lib/ordered-data-store-idx.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            initStore\n                        \n                        \n                    \n                \n            \n            \n                \ninitStore(db, storeName, keyPath, indecies)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keyPath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    indecies\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validTx\n                        \n                        \n                    \n                \n            \n            \n                \nvalidTx(db, storeName, mode?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    db\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    storeName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IDBTransaction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgxMugenScroll\nInifinit scroll library for Angular\nDevelopment\nGet depends to develop\nnpm installRun library on local demo application\nTest library on demo* application.\n# A terminal\nnpm run build-lib\n# Another terminal\nnpm run start-demo1Unit test\nnpm run test-libPublish\nnpm run build-dist\ncd dist/ngx-mugen-scroll\nnpm publish\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxMugenScrollModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxMugenScrollModule\n\n\n\ncluster_NgxMugenScrollModule_declarations\n\n\n\ncluster_NgxMugenScrollModule_exports\n\n\n\n\nMugenScrollBottomDirective\n\nMugenScrollBottomDirective\n\n\n\nNgxMugenScrollModule\n\nNgxMugenScrollModule\n\nNgxMugenScrollModule -->\n\nMugenScrollBottomDirective->NgxMugenScrollModule\n\n\n\n\n\nMugenScrollDataDirective\n\nMugenScrollDataDirective\n\nNgxMugenScrollModule -->\n\nMugenScrollDataDirective->NgxMugenScrollModule\n\n\n\n\n\nMugenScrollTopDirective\n\nMugenScrollTopDirective\n\nNgxMugenScrollModule -->\n\nMugenScrollTopDirective->NgxMugenScrollModule\n\n\n\n\n\nNgxMugenScrollComponent\n\nNgxMugenScrollComponent\n\nNgxMugenScrollModule -->\n\nNgxMugenScrollComponent->NgxMugenScrollModule\n\n\n\n\n\nMugenScrollBottomDirective \n\nMugenScrollBottomDirective \n\nMugenScrollBottomDirective  -->\n\nNgxMugenScrollModule->MugenScrollBottomDirective \n\n\n\n\n\nMugenScrollDataDirective \n\nMugenScrollDataDirective \n\nMugenScrollDataDirective  -->\n\nNgxMugenScrollModule->MugenScrollDataDirective \n\n\n\n\n\nMugenScrollTopDirective \n\nMugenScrollTopDirective \n\nMugenScrollTopDirective  -->\n\nNgxMugenScrollModule->MugenScrollTopDirective \n\n\n\n\n\nNgxMugenScrollComponent \n\nNgxMugenScrollComponent \n\nNgxMugenScrollComponent  -->\n\nNgxMugenScrollModule->NgxMugenScrollComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    3 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
